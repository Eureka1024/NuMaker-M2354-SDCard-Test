<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil5\rtthread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil5\rtthread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sun Dec 19 09:04:58 2021
<BR><P>
<H3>Maximum Stack Usage =       2660 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_usbh_hub_irq &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[88]">SPD_Next</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c5]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26c]">rt_kprintf</a><BR>
 <LI><a href="#[28]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">NMI_Handler</a><BR>
 <LI><a href="#[2a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">SVC_Handler</a><BR>
 <LI><a href="#[59]">ACMP01_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">ACMP01_IRQHandler</a><BR>
 <LI><a href="#[616]">rt_mp_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d0]">rt_schedule</a><BR>
 <LI><a href="#[4e8]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49c]">msh_exec</a><BR>
 <LI><a href="#[405]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[405]">copydir</a><BR>
 <LI><a href="#[3fa]">directory_delete_for_msh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3fa]">directory_delete_for_msh</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[59]">ACMP01_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[2d]">BOD_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[72]">BPWM0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[73]">BPWM1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[45]">BRAKE0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[49]">BRAKE1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[63]">CAN0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[31]">CLKFAIL_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[6b]">CRPT_IRQHandler</a> from drv_crypto.o(.text.CRPT_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[56]">DAC_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[32]">DEFAULT_IRQHandler</a> from startup_m2354.o(.text) referenced 28 times from startup_m2354.o(RESET)
 <LI><a href="#[57]">EADC0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[58]">EADC1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[5a]">EADC2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[5b]">EADC3_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[77]">ECAP0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[78]">ECAP1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[37]">EINT0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[38]">EINT1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[39]">EINT2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[3a]">EINT3_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[3b]">EINT4_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[3c]">EINT5_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[6d]">EINT6_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[7a]">EINT7_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[46]">EPWM0_P0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[47]">EPWM0_P1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[48]">EPWM0_P2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[4a]">EPWM1_P0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[4b]">EPWM1_P1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[4c]">EPWM1_P2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[81]">EWDT_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[82]">EWWDT_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[3d]">GPA_IRQHandler</a> from drv_gpio.o(.text.GPA_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[3e]">GPB_IRQHandler</a> from drv_gpio.o(.text.GPB_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[3f]">GPC_IRQHandler</a> from drv_gpio.o(.text.GPC_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[40]">GPD_IRQHandler</a> from drv_gpio.o(.text.GPD_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[41]">GPE_IRQHandler</a> from drv_gpio.o(.text.GPE_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[42]">GPF_IRQHandler</a> from drv_gpio.o(.text.GPF_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[6c]">GPG_IRQHandler</a> from drv_gpio.o(.text.GPG_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[79]">GPH_IRQHandler</a> from drv_gpio.o(.text.GPH_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[29]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[53]">I2C0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[54]">I2C1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[74]">I2C2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[69]">I2S0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[2e]">IRC_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[7f]">KS_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[7d]">LCD_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[28]">NMI_Handler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[83]">NS_ISP_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[6a]">OPA0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[55]">PDMA0_IRQHandler</a> from drv_pdma.o(.text.PDMA0_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[7b]">PDMA1_IRQHandler</a> from drv_pdma.o(.text.PDMA1_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[2f]">PWRWU_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[2b]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[75]">QEI0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[76]">QEI1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[43]">QSPI0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[33]">RTC_IRQHandler</a> from drv_rtc.o(.text.RTC_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[34]">RTC_TAMPER_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[27]">Reset_Handler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[64]">SC0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[65]">SC1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[66]">SC2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[7c]">SCU_IRQHandler</a> from system_m2354.o(.text.SCU_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[68]">SDH0_IRQHandler</a> from drv_sdh.o(.text.SDH0_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[88]">SPD_Next</a> from startup_m2354.o(.text) referenced from startup_m2354.o(.text)
 <LI><a href="#[44]">SPI0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[5e]">SPI1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[5f]">SPI2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[67]">SPI3_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[30]">SRAM_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[2a]">SVC_Handler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[2c]">SysTick_Handler</a> from drv_common.o(.text.SysTick_Handler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_m2354.o(.text.SystemInit) referenced from startup_m2354.o(.text)
 <LI><a href="#[80]">TAMPER_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[4d]">TMR0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[4e]">TMR1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[4f]">TMR2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[50]">TMR3_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[84]">TMR4_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[85]">TMR5_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[7e]">TRNG_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[51]">UART0_IRQHandler</a> from drv_uart.o(.text.UART0_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[52]">UART1_IRQHandler</a> from drv_uart.o(.text.UART1_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[5c]">UART2_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[5d]">UART3_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[6e]">UART4_IRQHandler</a> from drv_uart.o(.text.UART4_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[6f]">UART5_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[60]">USBD_IRQHandler</a> from drv_usbd.o(.text.USBD_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[61]">USBH_IRQHandler</a> from ohci.o(.text.USBH_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[62]">USBOTG_IRQHandler</a> from drv_otg.o(.text.USBOTG_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[70]">USCI0_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[71]">USCI1_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[35]">WDT_IRQHandler</a> from drv_wdt.o(.text.WDT_IRQHandler) referenced from startup_m2354.o(RESET)
 <LI><a href="#[36]">WWDT_IRQHandler</a> from startup_m2354.o(.text) referenced from startup_m2354.o(RESET)
 <LI><a href="#[87]">__main</a> from __main.o(!!!main) referenced from startup_m2354.o(.text)
 <LI><a href="#[91]">__wqueue_pollwake</a> from poll.o(.text.__wqueue_pollwake) referenced from poll.o(.text._poll_add)
 <LI><a href="#[b6]">_adc_control</a> from adc.o(.text._adc_control) referenced from adc.o(.text.rt_hw_adc_register)
 <LI><a href="#[b5]">_adc_read</a> from adc.o(.text._adc_read) referenced from adc.o(.text.rt_hw_adc_register)
 <LI><a href="#[94]">_delayed_work_timeout_handler</a> from workqueue.o(.text._delayed_work_timeout_handler) referenced from workqueue.o(.text._workqueue_submit_work)
 <LI><a href="#[118]">_ep0_send_status</a> from drv_usbd.o(.text._ep0_send_status) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[112]">_ep_clear_stall</a> from drv_usbd.o(.text._ep_clear_stall) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[114]">_ep_disable</a> from drv_usbd.o(.text._ep_disable) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[113]">_ep_enable</a> from drv_usbd.o(.text._ep_enable) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[e2]">_ep_in_handler</a> from hid.o(.text._ep_in_handler) referenced from hid.o(.text.rt_usbd_function_hid_create)
 <LI><a href="#[e1]">_ep_out_handler</a> from hid.o(.text._ep_out_handler) referenced from hid.o(.text.rt_usbd_function_hid_create)
 <LI><a href="#[116]">_ep_read</a> from drv_usbd.o(.text._ep_read) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[115]">_ep_read_prepare</a> from drv_usbd.o(.text._ep_read_prepare) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[111]">_ep_set_stall</a> from drv_usbd.o(.text._ep_set_stall) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[117]">_ep_write</a> from drv_usbd.o(.text._ep_write) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[24]">_function_disable</a> from hid.o(.text._function_disable) referenced 2 times from hid.o(.data.ops)
 <LI><a href="#[23]">_function_enable</a> from hid.o(.text._function_enable) referenced 2 times from hid.o(.data.ops)
 <LI><a href="#[89]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[90]">_hid_set_report_callback</a> from hid.o(.text._hid_set_report_callback) referenced from hid.o(.text._interface_handler)
 <LI><a href="#[dd]">_hid_write</a> from hid.o(.text._hid_write) referenced from hid.o(.text.rt_usb_hid_init)
 <LI><a href="#[ae]">_init</a> from drv_usbd.o(.text._init) referenced from drv_usbd.o(.text.nu_usbd_register)
 <LI><a href="#[e0]">_interface_handler</a> from hid.o(.text._interface_handler) referenced from hid.o(.text.rt_usbd_function_hid_create)
 <LI><a href="#[b4]">_pin_control</a> from pin.o(.text._pin_control) referenced from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[b2]">_pin_read</a> from pin.o(.text._pin_read) referenced from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[b3]">_pin_write</a> from pin.o(.text._pin_write) referenced from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[b0]">_poll_add</a> from poll.o(.text._poll_add) referenced from poll.o(.text.poll_table_init)
 <LI><a href="#[f6]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[f7]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[8d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[d7]">_rt_pm_device_control</a> from pm.o(.text._rt_pm_device_control) referenced from pm.o(.text.rt_system_pm_init)
 <LI><a href="#[d5]">_rt_pm_device_read</a> from pm.o(.text._rt_pm_device_read) referenced from pm.o(.text.rt_system_pm_init)
 <LI><a href="#[d6]">_rt_pm_device_write</a> from pm.o(.text._rt_pm_device_write) referenced from pm.o(.text.rt_system_pm_init)
 <LI><a href="#[8c]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from sscanf.o(.text)
 <LI><a href="#[8e]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[f9]">_scanf_really_hex_real</a> from scanf_hexfp.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[fa]">_scanf_really_infnan</a> from scanf_infnan.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[f8]">_scanf_really_real</a> from scanf_fp.o(.text) referenced from scanf1.o(x$fpl$scanf1)
 <LI><a href="#[10f]">_set_address</a> from drv_usbd.o(.text._set_address) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[110]">_set_config</a> from drv_usbd.o(.text._set_config) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[8b]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from sscanf.o(.text)
 <LI><a href="#[8a]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[d4]">_spi_bus_device_control</a> from spi_dev.o(.text._spi_bus_device_control) referenced from spi_dev.o(.text.rt_spi_bus_device_init)
 <LI><a href="#[d2]">_spi_bus_device_read</a> from spi_dev.o(.text._spi_bus_device_read) referenced from spi_dev.o(.text.rt_spi_bus_device_init)
 <LI><a href="#[d3]">_spi_bus_device_write</a> from spi_dev.o(.text._spi_bus_device_write) referenced from spi_dev.o(.text.rt_spi_bus_device_init)
 <LI><a href="#[119]">_suspend</a> from drv_usbd.o(.text._suspend) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[92]">_thread_exit</a> from thread.o(.text._thread_exit) referenced from thread.o(.text._thread_init)
 <LI><a href="#[11a]">_wakeup</a> from drv_usbd.o(.text._wakeup) referenced from drv_usbd.o(.rodata._udc_ops)
 <LI><a href="#[e9]">_workqueue_thread_entry</a> from workqueue.o(.text._workqueue_thread_entry) referenced from workqueue.o(.text.rt_workqueue_create)
 <LI><a href="#[186]">adc</a> from adc.o(.text.adc) referenced from adc.o(FSymTab)
 <LI><a href="#[fd]">aprom_erase</a> from drv_fmc.o(.text.aprom_erase) referenced from drv_fmc.o(.rodata.Onchip_aprom_flash)
 <LI><a href="#[fb]">aprom_read</a> from drv_fmc.o(.text.aprom_read) referenced from drv_fmc.o(.rodata.Onchip_aprom_flash)
 <LI><a href="#[fc]">aprom_write</a> from drv_fmc.o(.text.aprom_write) referenced from drv_fmc.o(.rodata.Onchip_aprom_flash)
 <LI><a href="#[183]">at</a> from at_cli.o(.text.at) referenced from at_cli.o(FSymTab)
 <LI><a href="#[120]">at_bind</a> from at_socket.o(.text.at_bind) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[9b]">at_client_entry</a> from at_cli.o(.text.at_client_entry) referenced from at_cli.o(.text.client_cli_parser)
 <LI><a href="#[96]">at_client_rx_ind</a> from at_client.o(.text.at_client_rx_ind) referenced from at_client.o(.text.at_client_init)
 <LI><a href="#[99]">at_closed_notice_cb</a> from at_socket.o(.text.at_closed_notice_cb) referenced from at_socket.o(.text.at_socket)
 <LI><a href="#[11f]">at_closesocket</a> from at_socket.o(.text.at_closesocket) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[121]">at_connect</a> from at_socket.o(.text.at_connect) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[11d]">at_freeaddrinfo</a> from at_socket.o(.text.at_freeaddrinfo) referenced from af_inet_at.o(.rodata.at_netdb_ops)
 <LI><a href="#[11c]">at_getaddrinfo</a> from at_socket.o(.text.at_getaddrinfo) referenced from af_inet_at.o(.rodata.at_netdb_ops)
 <LI><a href="#[11b]">at_gethostbyname</a> from at_socket.o(.text.at_gethostbyname) referenced from af_inet_at.o(.rodata.at_netdb_ops)
 <LI><a href="#[124]">at_getsockopt</a> from at_socket.o(.text.at_getsockopt) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[127]">at_poll</a> from af_inet_at.o(.text.at_poll) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[98]">at_recv_notice_cb</a> from at_socket.o(.text.at_recv_notice_cb) referenced from at_socket.o(.text.at_socket)
 <LI><a href="#[123]">at_recvfrom</a> from at_socket.o(.text.at_recvfrom) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[122]">at_sendto</a> from at_socket.o(.text.at_sendto) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[125]">at_setsockopt</a> from at_socket.o(.text.at_setsockopt) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[126]">at_shutdown</a> from at_socket.o(.text.at_shutdown) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[11e]">at_socket</a> from at_socket.o(.text.at_socket) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[184]">at_wifi_set</a> from board_dev.o(.text.at_wifi_set) referenced from board_dev.o(FSymTab)
 <LI><a href="#[ea]">check_netdev_internet_up_work</a> from sal_socket.o(.text.check_netdev_internet_up_work) referenced from sal_socket.o(.text.sal_check_netdev_internet_up)
 <LI><a href="#[1af]">clear</a> from cmd.o(.text.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[9a]">client_getchar_rx_ind</a> from at_cli.o(.text.client_getchar_rx_ind) referenced from at_cli.o(.text.client_cli_parser)
 <LI><a href="#[97]">client_parser</a> from at_client.o(.text.client_parser) referenced from at_client.o(.text.at_client_para_init)
 <LI><a href="#[185]">cmd_canstat</a> from can.o(.text.cmd_canstat) referenced from can.o(FSymTab)
 <LI><a href="#[1a3]">cmd_cat</a> from msh_file.o(.text.cmd_cat) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1a5]">cmd_cd</a> from msh_file.o(.text.cmd_cd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1a1]">cmd_cp</a> from msh_file.o(.text.cmd_cp) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1ab]">cmd_df</a> from msh_file.o(.text.cmd_df) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1ac]">cmd_echo</a> from msh_file.o(.text.cmd_echo) referenced from msh_file.o(FSymTab)
 <LI><a href="#[19f]">cmd_free</a> from msh.o(.text.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[1a0]">cmd_ls</a> from msh_file.o(.text.cmd_ls) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1a7]">cmd_mkdir</a> from msh_file.o(.text.cmd_mkdir) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1a8]">cmd_mkfs</a> from msh_file.o(.text.cmd_mkfs) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1a9]">cmd_mount</a> from msh_file.o(.text.cmd_mount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1a2]">cmd_mv</a> from msh_file.o(.text.cmd_mv) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1bc]">cmd_ntp_sync</a> from ntp.o(.text.cmd_ntp_sync) referenced from ntp.o(FSymTab)
 <LI><a href="#[19e]">cmd_ps</a> from msh.o(.text.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[1a6]">cmd_pwd</a> from msh_file.o(.text.cmd_pwd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[181]">cmd_readspeed</a> from readspeed.o(.text.cmd_readspeed) referenced from readspeed.o(FSymTab)
 <LI><a href="#[1a4]">cmd_rm</a> from msh_file.o(.text.cmd_rm) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1ad]">cmd_tail</a> from msh_file.o(.text.cmd_tail) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1aa]">cmd_umount</a> from msh_file.o(.text.cmd_umount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[182]">cmd_writespeed</a> from writespeed.o(.text.cmd_writespeed) referenced from writespeed.o(FSymTab)
 <LI><a href="#[95]">console_getchar_rx_ind</a> from at_cli.o(.text.console_getchar_rx_ind) referenced from at_cli.o(.text.at_cli_init)
 <LI><a href="#[17f]">dance_mouse_init</a> from usbd_hid_dance_mouse.o(.text.dance_mouse_init) referenced from usbd_hid_dance_mouse.o(.rti_fn.6)
 <LI><a href="#[195]">date</a> from rtc.o(.text.date) referenced from rtc.o(FSymTab)
 <LI><a href="#[102]">dfs_device_fs_close</a> from devfs.o(.text.dfs_device_fs_close) referenced from devfs.o(.rodata._device_fops)
 <LI><a href="#[106]">dfs_device_fs_getdents</a> from devfs.o(.text.dfs_device_fs_getdents) referenced from devfs.o(.rodata._device_fops)
 <LI><a href="#[103]">dfs_device_fs_ioctl</a> from devfs.o(.text.dfs_device_fs_ioctl) referenced from devfs.o(.rodata._device_fops)
 <LI><a href="#[108]">dfs_device_fs_mount</a> from devfs.o(.text.dfs_device_fs_mount) referenced from devfs.o(.rodata._device_fs)
 <LI><a href="#[101]">dfs_device_fs_open</a> from devfs.o(.text.dfs_device_fs_open) referenced from devfs.o(.rodata._device_fops)
 <LI><a href="#[107]">dfs_device_fs_poll</a> from devfs.o(.text.dfs_device_fs_poll) referenced from devfs.o(.rodata._device_fops)
 <LI><a href="#[104]">dfs_device_fs_read</a> from devfs.o(.text.dfs_device_fs_read) referenced from devfs.o(.rodata._device_fops)
 <LI><a href="#[109]">dfs_device_fs_stat</a> from devfs.o(.text.dfs_device_fs_stat) referenced from devfs.o(.rodata._device_fs)
 <LI><a href="#[105]">dfs_device_fs_write</a> from devfs.o(.text.dfs_device_fs_write) referenced from devfs.o(.rodata._device_fops)
 <LI><a href="#[130]">dfs_elm_close</a> from dfs_elm.o(.text.dfs_elm_close) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[134]">dfs_elm_flush</a> from dfs_elm.o(.text.dfs_elm_flush) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[136]">dfs_elm_getdents</a> from dfs_elm.o(.text.dfs_elm_getdents) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[131]">dfs_elm_ioctl</a> from dfs_elm.o(.text.dfs_elm_ioctl) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[135]">dfs_elm_lseek</a> from dfs_elm.o(.text.dfs_elm_lseek) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[12a]">dfs_elm_mkfs</a> from dfs_elm.o(.text.dfs_elm_mkfs) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[128]">dfs_elm_mount</a> from dfs_elm.o(.text.dfs_elm_mount) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[12f]">dfs_elm_open</a> from dfs_elm.o(.text.dfs_elm_open) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[132]">dfs_elm_read</a> from dfs_elm.o(.text.dfs_elm_read) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[12e]">dfs_elm_rename</a> from dfs_elm.o(.text.dfs_elm_rename) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[12d]">dfs_elm_stat</a> from dfs_elm.o(.text.dfs_elm_stat) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[12b]">dfs_elm_statfs</a> from dfs_elm.o(.text.dfs_elm_statfs) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[12c]">dfs_elm_unlink</a> from dfs_elm.o(.text.dfs_elm_unlink) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[129]">dfs_elm_unmount</a> from dfs_elm.o(.text.dfs_elm_unmount) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[133]">dfs_elm_write</a> from dfs_elm.o(.text.dfs_elm_write) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[16a]">dfs_init</a> from dfs.o(.text.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[10a]">dfs_net_close</a> from dfs_net.o(.text.dfs_net_close) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[10b]">dfs_net_ioctl</a> from dfs_net.o(.text.dfs_net_ioctl) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[10e]">dfs_net_poll</a> from dfs_net.o(.text.dfs_net_poll) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[10c]">dfs_net_read</a> from dfs_net.o(.text.dfs_net_read) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[10d]">dfs_net_write</a> from dfs_net.o(.text.dfs_net_write) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[176]">elm_init</a> from dfs_elm.o(.text.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[139]">esp8266_control</a> from at_device_esp8266.o(.text.esp8266_control) referenced from at_device_esp8266.o(.rodata.esp8266_device_ops)
 <LI><a href="#[138]">esp8266_deinit</a> from at_device_esp8266.o(.text.esp8266_deinit) referenced from at_device_esp8266.o(.rodata.esp8266_device_ops)
 <LI><a href="#[16c]">esp8266_device_class_register</a> from at_device_esp8266.o(.text.esp8266_device_class_register) referenced from at_device_esp8266.o(.rti_fn.3)
 <LI><a href="#[144]">esp8266_domain_resolve</a> from at_socket_esp8266.o(.text.esp8266_domain_resolve) referenced from at_socket_esp8266.o(.rodata.esp8266_socket_ops)
 <LI><a href="#[9e]">esp8266_get_netdev_info</a> from at_device_esp8266.o(.text.esp8266_get_netdev_info) referenced from at_device_esp8266.o(.text.esp8266_netdev_start_delay_work)
 <LI><a href="#[137]">esp8266_init</a> from at_device_esp8266.o(.text.esp8266_init) referenced from at_device_esp8266.o(.rodata.esp8266_device_ops)
 <LI><a href="#[9d]">esp8266_init_thread_entry</a> from at_device_esp8266.o(.text.esp8266_init_thread_entry) referenced from at_device_esp8266.o(.text.esp8266_net_init)
 <LI><a href="#[140]">esp8266_netdev_netstat</a> from at_device_esp8266.o(.text.esp8266_netdev_netstat) referenced from at_device_esp8266.o(.rodata.esp8266_netdev_ops)
 <LI><a href="#[13f]">esp8266_netdev_ping</a> from at_device_esp8266.o(.text.esp8266_netdev_ping) referenced from at_device_esp8266.o(.rodata.esp8266_netdev_ops)
 <LI><a href="#[13c]">esp8266_netdev_set_addr_info</a> from at_device_esp8266.o(.text.esp8266_netdev_set_addr_info) referenced from at_device_esp8266.o(.rodata.esp8266_netdev_ops)
 <LI><a href="#[13e]">esp8266_netdev_set_dhcp</a> from at_device_esp8266.o(.text.esp8266_netdev_set_dhcp) referenced from at_device_esp8266.o(.rodata.esp8266_netdev_ops)
 <LI><a href="#[13d]">esp8266_netdev_set_dns_server</a> from at_device_esp8266.o(.text.esp8266_netdev_set_dns_server) referenced from at_device_esp8266.o(.rodata.esp8266_netdev_ops)
 <LI><a href="#[13b]">esp8266_netdev_set_down</a> from at_device_esp8266.o(.text.esp8266_netdev_set_down) referenced from at_device_esp8266.o(.rodata.esp8266_netdev_ops)
 <LI><a href="#[13a]">esp8266_netdev_set_up</a> from at_device_esp8266.o(.text.esp8266_netdev_set_up) referenced from at_device_esp8266.o(.rodata.esp8266_netdev_ops)
 <LI><a href="#[142]">esp8266_socket_close</a> from at_socket_esp8266.o(.text.esp8266_socket_close) referenced from at_socket_esp8266.o(.rodata.esp8266_socket_ops)
 <LI><a href="#[141]">esp8266_socket_connect</a> from at_socket_esp8266.o(.text.esp8266_socket_connect) referenced from at_socket_esp8266.o(.rodata.esp8266_socket_ops)
 <LI><a href="#[143]">esp8266_socket_send</a> from at_socket_esp8266.o(.text.esp8266_socket_send) referenced from at_socket_esp8266.o(.rodata.esp8266_socket_ops)
 <LI><a href="#[145]">esp8266_socket_set_event_cb</a> from at_socket_esp8266.o(.text.esp8266_socket_set_event_cb) referenced from at_socket_esp8266.o(.rodata.esp8266_socket_ops)
 <LI><a href="#[f4]">event_hid_in</a> from usbd_hid_dance_mouse.o(.text.event_hid_in) referenced from usbd_hid_dance_mouse.o(.text.usb_thread_entry)
 <LI><a href="#[19b]">fal</a> from fal_rtt.o(.text.fal) referenced from fal_rtt.o(FSymTab)
 <LI><a href="#[9f]">finsh_rx_ind</a> from shell.o(.text.finsh_rx_ind) referenced from shell.o(.text.finsh_set_device)
 <LI><a href="#[17d]">finsh_system_init</a> from shell.o(.text.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[a0]">finsh_thread_entry</a> from shell.o(.text.finsh_thread_entry) referenced from shell.o(.text.finsh_system_init)
 <LI><a href="#[1ae]">hello</a> from cmd.o(.text.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[de]">hid_thread_entry</a> from hid.o(.text.hid_thread_entry) referenced from hid.o(.text.rt_usb_hid_init)
 <LI><a href="#[ce]">i2c_bus_device_control</a> from i2c_dev.o(.text.i2c_bus_device_control) referenced from i2c_dev.o(.text.rt_i2c_bus_device_device_init)
 <LI><a href="#[cc]">i2c_bus_device_read</a> from i2c_dev.o(.text.i2c_bus_device_read) referenced from i2c_dev.o(.text.rt_i2c_bus_device_device_init)
 <LI><a href="#[cd]">i2c_bus_device_write</a> from i2c_dev.o(.text.i2c_bus_device_write) referenced from i2c_dev.o(.text.rt_i2c_bus_device_device_init)
 <LI><a href="#[ad]">int_xfer_done_cb</a> from drv_usbhost.o(.text.int_xfer_done_cb) referenced from drv_usbhost.o(.text.nu_pipe_xfer)
 <LI><a href="#[1bb]">iperf</a> from iperf.o(.text.iperf) referenced from iperf.o(FSymTab)
 <LI><a href="#[a2]">iperf_client</a> from iperf.o(.text.iperf_client) referenced from iperf.o(.text.iperf)
 <LI><a href="#[a1]">iperf_server</a> from iperf.o(.text.iperf_server) referenced from iperf.o(.text.iperf)
 <LI><a href="#[a4]">iperf_udp_client</a> from iperf.o(.text.iperf_udp_client) referenced from iperf.o(.text.iperf)
 <LI><a href="#[a3]">iperf_udp_server</a> from iperf.o(.text.iperf_udp_server) referenced from iperf.o(.text.iperf)
 <LI><a href="#[8f]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[100]">ldrom_erase</a> from drv_fmc.o(.text.ldrom_erase) referenced from drv_fmc.o(.rodata.Onchip_ldrom_flash)
 <LI><a href="#[fe]">ldrom_read</a> from drv_fmc.o(.text.ldrom_read) referenced from drv_fmc.o(.rodata.Onchip_ldrom_flash)
 <LI><a href="#[ff]">ldrom_write</a> from drv_fmc.o(.text.ldrom_write) referenced from drv_fmc.o(.rodata.Onchip_ldrom_flash)
 <LI><a href="#[1ba]">list</a> from cmd.o(.text.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b9]">list_device</a> from cmd.o(.text.list_device) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b3]">list_event</a> from cmd.o(.text.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[19c]">list_fd</a> from dfs.o(.text.list_fd) referenced from dfs.o(FSymTab)
 <LI><a href="#[1b5]">list_mailbox</a> from cmd.o(.text.list_mailbox) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b7]">list_mempool</a> from cmd.o(.text.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b6]">list_msgqueue</a> from cmd.o(.text.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b4]">list_mutex</a> from cmd.o(.text.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b2]">list_sem</a> from cmd.o(.text.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b1]">list_thread</a> from cmd.o(.text.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[1b8]">list_timer</a> from cmd.o(.text.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[18b]">lptimer_dump</a> from lptimer.o(.text.lptimer_dump) referenced from lptimer.o(FSymTab)
 <LI><a href="#[b1]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced from components.o(.text.rt_application_init)
 <LI><a href="#[17a]">mnt_init_sdcard_hotplug</a> from drv_sdh.o(.text.mnt_init_sdcard_hotplug) referenced from drv_sdh.o(.rti_fn.5)
 <LI><a href="#[19d]">msh_help</a> from msh.o(.text.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[199]">msh_rtc_set_date</a> from drv_rtc.o(.text.msh_rtc_set_date) referenced from drv_rtc.o(FSymTab)
 <LI><a href="#[19a]">msh_rtc_set_time</a> from drv_rtc.o(.text.msh_rtc_set_time) referenced from drv_rtc.o(FSymTab)
 <LI><a href="#[1bf]">netdev_dns</a> from netdev.o(.text.netdev_dns) referenced from netdev.o(FSymTab)
 <LI><a href="#[1bd]">netdev_ifconfig</a> from netdev.o(.text.netdev_ifconfig) referenced from netdev.o(FSymTab)
 <LI><a href="#[1c0]">netdev_netstat</a> from netdev.o(.text.netdev_netstat) referenced from netdev.o(FSymTab)
 <LI><a href="#[1be]">netdev_ping</a> from netdev.o(.text.netdev_ping) referenced from netdev.o(FSymTab)
 <LI><a href="#[148]">nu_aes_crypt</a> from drv_crypto.o(.text.nu_aes_crypt) referenced from drv_crypto.o(.rodata.nu_aes_ops)
 <LI><a href="#[12]">nu_close_pipe</a> from drv_usbhost.o(.text.nu_close_pipe) referenced 2 times from drv_usbhost.o(.data.nu_uhcd_ops)
 <LI><a href="#[149]">nu_crc_update</a> from drv_crc.o(.text.nu_crc_update) referenced from drv_crypto.o(.rodata.nu_crc_ops)
 <LI><a href="#[146]">nu_eadc_enabled</a> from drv_eadc.o(.text.nu_eadc_enabled) referenced from drv_eadc.o(.rodata.nu_adc_ops)
 <LI><a href="#[17c]">nu_fmc_init</a> from drv_fmc.o(.text.nu_fmc_init) referenced from drv_fmc.o(.rti_fn.6)
 <LI><a href="#[147]">nu_get_eadc_value</a> from drv_eadc.o(.text.nu_get_eadc_value) referenced from drv_eadc.o(.rodata.nu_adc_ops)
 <LI><a href="#[9]">nu_gpio_attach_irq</a> from drv_gpio.o(.text.nu_gpio_attach_irq) referenced 2 times from drv_gpio.o(.data.nu_gpio_ops)
 <LI><a href="#[a]">nu_gpio_detach_irq</a> from drv_gpio.o(.text.nu_gpio_detach_irq) referenced 2 times from drv_gpio.o(.data.nu_gpio_ops)
 <LI><a href="#[b]">nu_gpio_irq_enable</a> from drv_gpio.o(.text.nu_gpio_irq_enable) referenced 2 times from drv_gpio.o(.data.nu_gpio_ops)
 <LI><a href="#[6]">nu_gpio_mode</a> from drv_gpio.o(.text.nu_gpio_mode) referenced 2 times from drv_gpio.o(.data.nu_gpio_ops)
 <LI><a href="#[c]">nu_gpio_pin_get</a> from drv_gpio.o(.text.nu_gpio_pin_get) referenced 2 times from drv_gpio.o(.data.nu_gpio_ops)
 <LI><a href="#[8]">nu_gpio_read</a> from drv_gpio.o(.text.nu_gpio_read) referenced 2 times from drv_gpio.o(.data.nu_gpio_ops)
 <LI><a href="#[7]">nu_gpio_write</a> from drv_gpio.o(.text.nu_gpio_write) referenced 2 times from drv_gpio.o(.data.nu_gpio_ops)
 <LI><a href="#[a6]">nu_hcd_connect_callback</a> from drv_usbhost.o(.text.nu_hcd_connect_callback) referenced from drv_usbhost.o(.text.nu_hcd_init)
 <LI><a href="#[a7]">nu_hcd_disconnect_callback</a> from drv_usbhost.o(.text.nu_hcd_disconnect_callback) referenced from drv_usbhost.o(.text.nu_hcd_init)
 <LI><a href="#[af]">nu_hcd_init</a> from drv_usbhost.o(.text.nu_hcd_init) referenced from drv_usbhost.o(.text.nu_usbh_register)
 <LI><a href="#[14c]">nu_hwcrypto_clone</a> from drv_crypto.o(.text.nu_hwcrypto_clone) referenced from drv_crypto.o(.rodata.nu_hwcrypto_ops)
 <LI><a href="#[14a]">nu_hwcrypto_create</a> from drv_crypto.o(.text.nu_hwcrypto_create) referenced from drv_crypto.o(.rodata.nu_hwcrypto_ops)
 <LI><a href="#[14b]">nu_hwcrypto_destroy</a> from drv_crypto.o(.text.nu_hwcrypto_destroy) referenced from drv_crypto.o(.rodata.nu_hwcrypto_ops)
 <LI><a href="#[171]">nu_hwcrypto_device_init</a> from drv_crypto.o(.text.nu_hwcrypto_device_init) referenced from drv_crypto.o(.rti_fn.3)
 <LI><a href="#[14d]">nu_hwcrypto_reset</a> from drv_crypto.o(.text.nu_hwcrypto_reset) referenced from drv_crypto.o(.rodata.nu_hwcrypto_ops)
 <LI><a href="#[14f]">nu_i2c_bus_control</a> from drv_i2c.o(.text.nu_i2c_bus_control) referenced from drv_i2c.o(.rodata.nu_i2c_ops)
 <LI><a href="#[14e]">nu_i2c_mst_xfer</a> from drv_i2c.o(.text.nu_i2c_mst_xfer) referenced from drv_i2c.o(.rodata.nu_i2c_ops)
 <LI><a href="#[11]">nu_open_pipe</a> from drv_usbhost.o(.text.nu_open_pipe) referenced 2 times from drv_usbhost.o(.data.nu_uhcd_ops)
 <LI><a href="#[a9]">nu_pdma_memfun_cb</a> from drv_pdma.o(.text.nu_pdma_memfun_cb) referenced from drv_pdma.o(.text.nu_pdma_memfun)
 <LI><a href="#[aa]">nu_pdma_uart_rx_cb</a> from drv_uart.o(.text.nu_pdma_uart_rx_cb) referenced from drv_uart.o(.text.nu_pdma_uart_rx_config)
 <LI><a href="#[ab]">nu_pdma_uart_tx_cb</a> from drv_uart.o(.text.nu_pdma_uart_tx_cb) referenced from drv_uart.o(.text.nu_pdma_uart_tx_config)
 <LI><a href="#[10]">nu_pipe_xfer</a> from drv_usbhost.o(.text.nu_pipe_xfer) referenced 2 times from drv_usbhost.o(.data.nu_uhcd_ops)
 <LI><a href="#[f]">nu_reset_port</a> from drv_usbhost.o(.text.nu_reset_port) referenced 2 times from drv_usbhost.o(.data.nu_uhcd_ops)
 <LI><a href="#[b7]">nu_rtc_control</a> from drv_rtc.o(.text.nu_rtc_control) referenced from drv_rtc.o(.text.rt_hw_rtc_init)
 <LI><a href="#[ba]">nu_sdh_close</a> from drv_sdh.o(.text.nu_sdh_close) referenced from drv_sdh.o(.text.rt_hw_sdh_init)
 <LI><a href="#[bd]">nu_sdh_control</a> from drv_sdh.o(.text.nu_sdh_control) referenced from drv_sdh.o(.text.rt_hw_sdh_init)
 <LI><a href="#[b8]">nu_sdh_init</a> from drv_sdh.o(.text.nu_sdh_init) referenced from drv_sdh.o(.text.rt_hw_sdh_init)
 <LI><a href="#[b9]">nu_sdh_open</a> from drv_sdh.o(.text.nu_sdh_open) referenced from drv_sdh.o(.text.rt_hw_sdh_init)
 <LI><a href="#[bb]">nu_sdh_read</a> from drv_sdh.o(.text.nu_sdh_read) referenced from drv_sdh.o(.text.rt_hw_sdh_init)
 <LI><a href="#[bc]">nu_sdh_write</a> from drv_sdh.o(.text.nu_sdh_write) referenced from drv_sdh.o(.text.rt_hw_sdh_init)
 <LI><a href="#[152]">nu_sha_finish</a> from drv_crypto.o(.text.nu_sha_finish) referenced from drv_crypto.o(.rodata.nu_sha_ops)
 <LI><a href="#[151]">nu_sha_update</a> from drv_crypto.o(.text.nu_sha_update) referenced from drv_crypto.o(.rodata.nu_sha_ops)
 <LI><a href="#[c5]">nu_slcd_close</a> from drv_slcd.o(.text.nu_slcd_close) referenced from drv_slcd.o(.text.rt_hw_slcd_register)
 <LI><a href="#[c7]">nu_slcd_control</a> from drv_slcd.o(.text.nu_slcd_control) referenced from drv_slcd.o(.text.rt_hw_slcd_register)
 <LI><a href="#[c4]">nu_slcd_open</a> from drv_slcd.o(.text.nu_slcd_open) referenced from drv_slcd.o(.text.rt_hw_slcd_register)
 <LI><a href="#[177]">nu_slcd_panel_init</a> from slcd_rhe6616tp01.o(.text.nu_slcd_panel_init) referenced from slcd_rhe6616tp01.o(.rti_fn.4)
 <LI><a href="#[c6]">nu_slcd_write</a> from drv_slcd.o(.text.nu_slcd_write) referenced from drv_slcd.o(.text.rt_hw_slcd_register)
 <LI><a href="#[d]">nu_spi_bus_configure</a> from drv_spi.o(.text.nu_spi_bus_configure) referenced 2 times from drv_spi.o(.data.nu_spi_poll_ops)
 <LI><a href="#[e]">nu_spi_bus_xfer</a> from drv_spi.o(.text.nu_spi_bus_xfer) referenced 2 times from drv_spi.o(.data.nu_spi_poll_ops)
 <LI><a href="#[150]">nu_trng_rand</a> from drv_trng.o(.text.nu_trng_rand) referenced from drv_crypto.o(.rodata.nu_rng_ops)
 <LI><a href="#[153]">nu_uart_configure</a> from drv_uart.o(.text.nu_uart_configure) referenced from drv_uart.o(.rodata.nu_uart_ops)
 <LI><a href="#[154]">nu_uart_control</a> from drv_uart.o(.text.nu_uart_control) referenced from drv_uart.o(.rodata.nu_uart_ops)
 <LI><a href="#[157]">nu_uart_dma_transmit</a> from drv_uart.o(.text.nu_uart_dma_transmit) referenced from drv_uart.o(.rodata.nu_uart_ops)
 <LI><a href="#[156]">nu_uart_receive</a> from drv_uart.o(.text.nu_uart_receive) referenced from drv_uart.o(.rodata.nu_uart_ops)
 <LI><a href="#[155]">nu_uart_send</a> from drv_uart.o(.text.nu_uart_send) referenced from drv_uart.o(.rodata.nu_uart_ops)
 <LI><a href="#[172]">nu_usbd_register</a> from drv_usbd.o(.text.nu_usbd_register) referenced from drv_usbd.o(.rti_fn.3)
 <LI><a href="#[173]">nu_usbh_register</a> from drv_usbhost.o(.text.nu_usbh_register) referenced from drv_usbhost.o(.rti_fn.3)
 <LI><a href="#[a8]">nu_usbh_rh_thread_entry</a> from drv_usbhost.o(.text.nu_usbh_rh_thread_entry) referenced from drv_usbhost.o(.text.nu_hcd_init)
 <LI><a href="#[18]">ohci_bulk_xfer</a> from ohci.o(.text.ohci_bulk_xfer) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[17]">ohci_ctrl_xfer</a> from ohci.o(.text.ohci_ctrl_xfer) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[13]">ohci_init</a> from ohci.o(.text.ohci_init) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[19]">ohci_int_xfer</a> from ohci.o(.text.ohci_int_xfer) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[1a]">ohci_iso_xfer</a> from ohci.o(.text.ohci_iso_xfer) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[1b]">ohci_quit_xfer</a> from ohci.o(.text.ohci_quit_xfer) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[16]">ohci_resume</a> from ohci.o(.text.ohci_resume) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[1d]">ohci_rh_polling</a> from ohci.o(.text.ohci_rh_polling) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[1c]">ohci_rh_port_reset</a> from ohci.o(.text.ohci_rh_port_reset) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[14]">ohci_shutdown</a> from ohci.o(.text.ohci_shutdown) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[15]">ohci_suspend</a> from ohci.o(.text.ohci_suspend) referenced 2 times from ohci.o(.data.ohci_driver)
 <LI><a href="#[16f]">otg_init</a> from drv_otg.o(.text.otg_init) referenced from drv_otg.o(.rti_fn.3)
 <LI><a href="#[1f]">pm_run</a> from drv_clk.o(.text.pm_run) referenced 2 times from drv_clk.o(.data.ops)
 <LI><a href="#[1e]">pm_sleep</a> from drv_clk.o(.text.pm_sleep) referenced 2 times from drv_clk.o(.data.ops)
 <LI><a href="#[22]">pm_timer_get_tick</a> from drv_clk.o(.text.pm_timer_get_tick) referenced 2 times from drv_clk.o(.data.ops)
 <LI><a href="#[20]">pm_timer_start</a> from drv_clk.o(.text.pm_timer_start) referenced 2 times from drv_clk.o(.data.ops)
 <LI><a href="#[21]">pm_timer_stop</a> from drv_clk.o(.text.pm_timer_stop) referenced 2 times from drv_clk.o(.data.ops)
 <LI><a href="#[188]">pwm_disable</a> from rt_drv_pwm.o(.text.pwm_disable) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[187]">pwm_enable</a> from rt_drv_pwm.o(.text.pwm_enable) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[18a]">pwm_get</a> from rt_drv_pwm.o(.text.pwm_get) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[189]">pwm_set</a> from rt_drv_pwm.o(.text.pwm_set) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[ef]">qspi_read</a> from spi_flash_sfud.o(.text.qspi_read) referenced from spi_flash_sfud.o(.text.sfud_spi_port_init)
 <LI><a href="#[197]">reboot</a> from drv_common.o(.text.reboot) referenced from drv_common.o(FSymTab)
 <LI><a href="#[f2]">retry_delay_100us</a> from spi_flash_sfud.o(.text.retry_delay_100us) referenced from spi_flash_sfud.o(.text.sfud_spi_port_init)
 <LI><a href="#[164]">rt_hw_eadc_init</a> from drv_eadc.o(.text.rt_hw_eadc_init) referenced from drv_eadc.o(.rti_fn.1)
 <LI><a href="#[17b]">rt_hw_esp8266_port</a> from board_dev.o(.text.rt_hw_esp8266_port) referenced from board_dev.o(.rti_fn.6)
 <LI><a href="#[161]">rt_hw_gpio_init</a> from drv_gpio.o(.text.rt_hw_gpio_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[16e]">rt_hw_i2c_init</a> from drv_i2c.o(.text.rt_hw_i2c_init) referenced from drv_i2c.o(.rti_fn.3)
 <LI><a href="#[170]">rt_hw_pdma_memfun_init</a> from drv_pdma.o(.text.rt_hw_pdma_memfun_init) referenced from drv_pdma.o(.rti_fn.3)
 <LI><a href="#[163]">rt_hw_pm_init</a> from drv_clk.o(.text.rt_hw_pm_init) referenced from drv_clk.o(.rti_fn.1)
 <LI><a href="#[165]">rt_hw_rtc_init</a> from drv_rtc.o(.text.rt_hw_rtc_init) referenced from drv_rtc.o(.rti_fn.1)
 <LI><a href="#[166]">rt_hw_sdh_init</a> from drv_sdh.o(.text.rt_hw_sdh_init) referenced from drv_sdh.o(.rti_fn.1)
 <LI><a href="#[174]">rt_hw_slcd_init</a> from drv_slcd.o(.text.rt_hw_slcd_init) referenced from drv_slcd.o(.rti_fn.3)
 <LI><a href="#[16d]">rt_hw_spi_init</a> from drv_spi.o(.text.rt_hw_spi_init) referenced from drv_spi.o(.rti_fn.3)
 <LI><a href="#[162]">rt_hw_wdt_init</a> from drv_wdt.o(.text.rt_hw_wdt_init) referenced from drv_wdt.o(.rti_fn.1)
 <LI><a href="#[175]">rt_i2c_core_init</a> from i2c_core.o(.text.rt_i2c_core_init) referenced from i2c_core.o(.rti_fn.4)
 <LI><a href="#[192]">rt_module_delay_sleep</a> from pm.o(.text.rt_module_delay_sleep) referenced from pm.o(FSymTab)
 <LI><a href="#[18f]">rt_module_release_mode</a> from pm.o(.text.rt_module_release_mode) referenced from pm.o(FSymTab)
 <LI><a href="#[190]">rt_module_release_mode_all</a> from pm.o(.text.rt_module_release_mode_all) referenced from pm.o(FSymTab)
 <LI><a href="#[191]">rt_module_request_mode</a> from pm.o(.text.rt_module_request_mode) referenced from pm.o(FSymTab)
 <LI><a href="#[194]">rt_pm_dump_status</a> from pm.o(.text.rt_pm_dump_status) referenced from pm.o(FSymTab)
 <LI><a href="#[18c]">rt_pm_release_mode</a> from pm.o(.text.rt_pm_release_mode) referenced from pm.o(FSymTab)
 <LI><a href="#[18d]">rt_pm_release_mode_all</a> from pm.o(.text.rt_pm_release_mode_all) referenced from pm.o(FSymTab)
 <LI><a href="#[18e]">rt_pm_request_mode</a> from pm.o(.text.rt_pm_request_mode) referenced from pm.o(FSymTab)
 <LI><a href="#[193]">rt_pm_run_mode_switch</a> from pm.o(.text.rt_pm_run_mode_switch) referenced from pm.o(FSymTab)
 <LI><a href="#[c0]">rt_serial_close</a> from serial.o(.text.rt_serial_close) referenced from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[c3]">rt_serial_control</a> from serial.o(.text.rt_serial_control) referenced from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[be]">rt_serial_init</a> from serial.o(.text.rt_serial_init) referenced from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[bf]">rt_serial_open</a> from serial.o(.text.rt_serial_open) referenced from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[c1]">rt_serial_read</a> from serial.o(.text.rt_serial_read) referenced from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[c2]">rt_serial_write</a> from serial.o(.text.rt_serial_write) referenced from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[d1]">rt_sfud_control</a> from spi_flash_sfud.o(.text.rt_sfud_control) referenced from spi_flash_sfud.o(.text.rt_sfud_flash_probe_ex)
 <LI><a href="#[cf]">rt_sfud_read</a> from spi_flash_sfud.o(.text.rt_sfud_read) referenced from spi_flash_sfud.o(.text.rt_sfud_flash_probe_ex)
 <LI><a href="#[d0]">rt_sfud_write</a> from spi_flash_sfud.o(.text.rt_sfud_write) referenced from spi_flash_sfud.o(.text.rt_sfud_flash_probe_ex)
 <LI><a href="#[d8]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[93]">rt_thread_timeout</a> from thread.o(.text.rt_thread_timeout) referenced from thread.o(.text._thread_init)
 <LI><a href="#[dc]">rt_udisk_control</a> from udisk.o(.text.rt_udisk_control) referenced from udisk.o(.text.rt_udisk_run)
 <LI><a href="#[d9]">rt_udisk_init</a> from udisk.o(.text.rt_udisk_init) referenced from udisk.o(.text.rt_udisk_run)
 <LI><a href="#[da]">rt_udisk_read</a> from udisk.o(.text.rt_udisk_read) referenced from udisk.o(.text.rt_udisk_run)
 <LI><a href="#[db]">rt_udisk_write</a> from udisk.o(.text.rt_udisk_write) referenced from udisk.o(.text.rt_udisk_run)
 <LI><a href="#[167]">rt_usbd_class_list_init</a> from usbdevice.o(.text.rt_usbd_class_list_init) referenced from usbdevice.o(.rti_fn.1)
 <LI><a href="#[5]">rt_usbd_function_hid_create</a> from hid.o(.text.rt_usbd_function_hid_create) referenced 2 times from hid.o(.data.hid_class)
 <LI><a href="#[16b]">rt_usbd_hid_class_register</a> from hid.o(.text.rt_usbd_hid_class_register) referenced from hid.o(.rti_fn.2)
 <LI><a href="#[df]">rt_usbd_thread_entry</a> from usbdevice_core.o(.text.rt_usbd_thread_entry) referenced from usbdevice_core.o(.text.rt_usbd_core_init)
 <LI><a href="#[e4]">rt_usbh_hub_disable</a> from hub.o(.text.rt_usbh_hub_disable) referenced from hub.o(.text.rt_usbh_class_driver_hub)
 <LI><a href="#[e3]">rt_usbh_hub_enable</a> from hub.o(.text.rt_usbh_hub_enable) referenced from hub.o(.text.rt_usbh_class_driver_hub)
 <LI><a href="#[e7]">rt_usbh_hub_irq</a> from hub.o(.text.rt_usbh_hub_irq) referenced from hub.o(.text.rt_usbh_hub_enable)
 <LI><a href="#[e8]">rt_usbh_hub_thread_entry</a> from hub.o(.text.rt_usbh_hub_thread_entry) referenced from hub.o(.text.rt_usbh_hub_init)
 <LI><a href="#[e6]">rt_usbh_storage_disable</a> from mass.o(.text.rt_usbh_storage_disable) referenced from mass.o(.text.rt_usbh_class_driver_storage)
 <LI><a href="#[e5]">rt_usbh_storage_enable</a> from mass.o(.text.rt_usbh_storage_enable) referenced from mass.o(.text.rt_usbh_class_driver_storage)
 <LI><a href="#[ca]">rt_watchdog_close</a> from watchdog.o(.text.rt_watchdog_close) referenced from watchdog.o(.text.rt_hw_watchdog_register)
 <LI><a href="#[cb]">rt_watchdog_control</a> from watchdog.o(.text.rt_watchdog_control) referenced from watchdog.o(.text.rt_hw_watchdog_register)
 <LI><a href="#[c8]">rt_watchdog_init</a> from watchdog.o(.text.rt_watchdog_init) referenced from watchdog.o(.text.rt_hw_watchdog_register)
 <LI><a href="#[c9]">rt_watchdog_open</a> from watchdog.o(.text.rt_watchdog_open) referenced from watchdog.o(.text.rt_hw_watchdog_register)
 <LI><a href="#[169]">rt_work_sys_workqueue_init</a> from workqueue.o(.text.rt_work_sys_workqueue_init) referenced from workqueue.o(.rti_fn.2)
 <LI><a href="#[168]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[160]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[180]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[15f]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[ed]">rx_callback</a> from sensor_cmd.o(.text.rx_callback) referenced from sensor_cmd.o(.text.sensor_int)
 <LI><a href="#[178]">sal_init</a> from sal_socket.o(.text.sal_init) referenced from sal_socket.o(.rti_fn.4)
 <LI><a href="#[a5]">sdh_hotplugger</a> from drv_sdh.o(.text.sdh_hotplugger) referenced from drv_sdh.o(.text.mnt_init_sdcard_hotplug)
 <LI><a href="#[1c4]">sensor</a> from sensor_cmd.o(.text.sensor) referenced from sensor_cmd.o(FSymTab)
 <LI><a href="#[1c1]">sensor_fifo</a> from sensor_cmd.o(.text.sensor_fifo) referenced from sensor_cmd.o(FSymTab)
 <LI><a href="#[eb]">sensor_fifo_rx_entry</a> from sensor_cmd.o(.text.sensor_fifo_rx_entry) referenced from sensor_cmd.o(.text.sensor_fifo)
 <LI><a href="#[1c2]">sensor_int</a> from sensor_cmd.o(.text.sensor_int) referenced from sensor_cmd.o(FSymTab)
 <LI><a href="#[ec]">sensor_irq_rx_entry</a> from sensor_cmd.o(.text.sensor_irq_rx_entry) referenced from sensor_cmd.o(.text.sensor_int)
 <LI><a href="#[1c3]">sensor_polling</a> from sensor_cmd.o(.text.sensor_polling) referenced from sensor_cmd.o(FSymTab)
 <LI><a href="#[196]">sf</a> from spi_flash_sfud.o(.text.sf) referenced from spi_flash_sfud.o(FSymTab)
 <LI><a href="#[f3]">slcd_demo_hook</a> from slcd_show_tick.o(.text.slcd_demo_hook) referenced from slcd_show_tick.o(.text.slcd_demo_init)
 <LI><a href="#[17e]">slcd_demo_init</a> from slcd_show_tick.o(.text.slcd_demo_init) referenced from slcd_show_tick.o(.rti_fn.6)
 <LI><a href="#[f0]">spi_lock</a> from spi_flash_sfud.o(.text.spi_lock) referenced from spi_flash_sfud.o(.text.sfud_spi_port_init)
 <LI><a href="#[f1]">spi_unlock</a> from spi_flash_sfud.o(.text.spi_unlock) referenced from spi_flash_sfud.o(.text.sfud_spi_port_init)
 <LI><a href="#[ee]">spi_write_read</a> from spi_flash_sfud.o(.text.spi_write_read) referenced from spi_flash_sfud.o(.text.sfud_spi_port_init)
 <LI><a href="#[158]">urc_busy_p_func</a> from at_device_esp8266.o(.text.urc_busy_p_func) referenced from at_device_esp8266.o(.rodata.urc_table)
 <LI><a href="#[159]">urc_busy_s_func</a> from at_device_esp8266.o(.text.urc_busy_s_func) referenced from at_device_esp8266.o(.rodata.urc_table)
 <LI><a href="#[15d]">urc_close_func</a> from at_socket_esp8266.o(.text.urc_close_func) referenced from at_socket_esp8266.o(.rodata.urc_table)
 <LI><a href="#[15a]">urc_func</a> from at_device_esp8266.o(.text.urc_func) referenced 2 times from at_device_esp8266.o(.rodata.urc_table)
 <LI><a href="#[15e]">urc_recv_func</a> from at_socket_esp8266.o(.text.urc_recv_func) referenced from at_socket_esp8266.o(.rodata.urc_table)
 <LI><a href="#[15c]">urc_send_bfsz_func</a> from at_socket_esp8266.o(.text.urc_send_bfsz_func) referenced from at_socket_esp8266.o(.rodata.urc_table)
 <LI><a href="#[15b]">urc_send_func</a> from at_socket_esp8266.o(.text.urc_send_func) referenced 2 times from at_socket_esp8266.o(.rodata.urc_table)
 <LI><a href="#[198]">usb_role</a> from drv_otg.o(.text.usb_role) referenced from drv_otg.o(FSymTab)
 <LI><a href="#[9c]">usb_thread_entry</a> from usbd_hid_dance_mouse.o(.text.usb_thread_entry) referenced from usbd_hid_dance_mouse.o(.text.dance_mouse_init)
 <LI><a href="#[4]">usbhost_pm_resume</a> from drv_usbhost.o(.text.usbhost_pm_resume) referenced 2 times from drv_usbhost.o(.data.device_pm_ops)
 <LI><a href="#[3]">usbhost_pm_suspend</a> from drv_usbhost.o(.text.usbhost_pm_suspend) referenced 2 times from drv_usbhost.o(.data.device_pm_ops)
 <LI><a href="#[179]">utest_init</a> from utest.o(.text.utest_init) referenced from utest.o(.rti_fn.4)
 <LI><a href="#[f5]">utest_run</a> from utest.o(.text.utest_run) referenced from utest.o(.text.utest_testcase_run)
 <LI><a href="#[1c5]">utest_tc_list</a> from utest.o(.text.utest_tc_list) referenced from utest.o(FSymTab)
 <LI><a href="#[1c6]">utest_testcase_run</a> from utest.o(.text.utest_testcase_run) referenced from utest.o(FSymTab)
 <LI><a href="#[1b0]">version</a> from cmd.o(.text.version) referenced from cmd.o(FSymTab)
 <LI><a href="#[26]">wdt_control</a> from drv_wdt.o(.text.wdt_control) referenced 2 times from drv_wdt.o(.data.ops_wdt)
 <LI><a href="#[25]">wdt_init</a> from drv_wdt.o(.text.wdt_init) referenced 2 times from drv_wdt.o(.data.ops_wdt)
 <LI><a href="#[2]">wdt_pm_frequency_change</a> from drv_wdt.o(.text.wdt_pm_frequency_change) referenced 2 times from drv_wdt.o(.data.device_pm_ops)
 <LI><a href="#[1]">wdt_pm_resume</a> from drv_wdt.o(.text.wdt_pm_resume) referenced 2 times from drv_wdt.o(.data.device_pm_ops)
 <LI><a href="#[0]">wdt_pm_suspend</a> from drv_wdt.o(.text.wdt_pm_suspend) referenced 2 times from drv_wdt.o(.data.device_pm_ops)
 <LI><a href="#[ac]">xfer_done_cb</a> from drv_usbhost.o(.text.xfer_done_cb) referenced from drv_usbhost.o(.text.nu_pipe_xfer)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[87]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(.text)
</UL>
<P><STRONG><a name="[1c7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1c9]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6e4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6e5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6e6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[231]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[1cb]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[1cd]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1d1]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[1d6]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1d8]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[1da]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[1dc]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1de]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[1e1]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1e9]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1eb]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[1ed]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[1f9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6e7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6e8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6e9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[6ea]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[6eb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6ec]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[6ed]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6ee]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[6ef]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[6f0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6f1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6f2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6f3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[6f4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[6f5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[6f6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6f7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6f8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6f9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[6fa]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6fb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1fe]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[6fc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[6fd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[6fe]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[6ff]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[700]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[701]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[702]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1c8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[703]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1f6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[704]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1fa]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; rt_hw_uart_init &rArr; nu_hw_uart_dma_allocate &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[705]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[258]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[706]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1ff]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[565]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_run
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_rand
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[707]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ca]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_get
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_ipaddr
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_all
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_request
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_release_all
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_release
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_delay_sleep
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_enter_critical
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lptimer_next_timeout_tick
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptimer_dump
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_irq_enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_detach_irq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_attach_irq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_handle_sig
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_free_sig
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
</UL>

<P><STRONG><a name="[2cf]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_get
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_ipaddr
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_all
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_request
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_release_all
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_release
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_delay_sleep
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lptimer_next_timeout_tick
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptimer_dump
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_irq_enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_detach_irq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_attach_irq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_handle_sig
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_free_sig
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
</UL>

<P><STRONG><a name="[62e]"></a>rt_hw_context_switch</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[630]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2b]"></a>PendSV_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[647]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[708]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[202]"></a>ProcessHardFaultx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2354.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFaultx
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFaultx
</UL>

<P><STRONG><a name="[2a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[709]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DEFAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>EADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>EADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EPWM0_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EPWM0_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EPWM0_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EPWM1_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EPWM1_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EPWM1_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>EWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>EWWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>KS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>NS_ISP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[70a]"></a>SC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text), UNUSED)

<P><STRONG><a name="[70b]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>TMR5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[253]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26e]"></a>__PC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_m2354.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_eadc0
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTG_IRQHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otg_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPH_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPG_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPF_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPE_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPD_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPA_IRQHandler
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_ep_partition
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_set_stall
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_read_prepare
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_disable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep0_send_status
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearStall
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
</UL>

<P><STRONG><a name="[70c]"></a>SPD_Return</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_m2354.o(.text), UNUSED)

<P><STRONG><a name="[70d]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_atol
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c32rtomb
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtoc32
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[70e]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[70f]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[710]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>__aeabi_uldivmod</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
</UL>

<P><STRONG><a name="[711]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
</UL>

<P><STRONG><a name="[207]"></a>sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_bfsz_func
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[209]"></a>vsscanf</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, vsscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
</UL>

<P><STRONG><a name="[20a]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_writespeed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readspeed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_mode_switch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request_mode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_mode_all
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_mode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_request_mode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_release_mode_all
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_release_mode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_delay_sleep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[20d]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_pin_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_rtc_set_time
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_rtc_set_date
</UL>

<P><STRONG><a name="[20c]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[20f]"></a>srand</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[1f0]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[40d]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3cb]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[3e0]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[491]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[2e3]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[3b4]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
</UL>

<P><STRONG><a name="[43e]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[493]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[712]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[214]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[213]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_memory_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
</UL>

<P><STRONG><a name="[218]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[2f7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_utr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_device
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_TD
</UL>

<P><STRONG><a name="[4c4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hcca_int_table
</UL>

<P><STRONG><a name="[216]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[217]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[362]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[713]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[714]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[715]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5cf]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
</UL>

<P><STRONG><a name="[21a]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[219]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[5d1]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
</UL>

<P><STRONG><a name="[716]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[717]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
</UL>

<P><STRONG><a name="[718]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5d0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
</UL>

<P><STRONG><a name="[719]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[6c3]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
</UL>

<P><STRONG><a name="[21f]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[21e]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[6c6]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
</UL>

<P><STRONG><a name="[71a]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
</UL>

<P><STRONG><a name="[71b]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
</UL>

<P><STRONG><a name="[71c]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[71d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[71e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71f]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[720]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[224]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[225]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[226]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[227]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[223]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1cc]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[205]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[206]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[8a]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[22b]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1df]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[22e]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1db]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[1e3]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[22f]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1ce]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[22a]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[232]"></a>_scanf_longlong</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _scanf_longlong &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[235]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[249]"></a>_scanf_string</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[208]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[8b]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> sscanf.o(.text)
<LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> sscanf.o(.text)
<LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[20e]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[237]"></a>_scanf_mbtowc</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[239]"></a>_scanf_wctomb</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[23b]"></a>_scanf_wstring</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[22d]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8f]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[229]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f6]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[f7]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[244]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1e8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1ea]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[246]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[234]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[236]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __vfscanf &rArr; _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[f8]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[23a]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[250]"></a>_mbrtoc32</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, _mbrtoc32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[238]"></a>_mbrtowc</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _mbrtoc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[251]"></a>_c32rtomb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _c32rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[22c]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c32rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[228]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f7]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[721]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[23d]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23e]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[240]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[24b]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[23f]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[24c]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1fc]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[722]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[724]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[25e]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[259]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[25a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[f9]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[fa]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[6db]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[725]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[25f]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[6d6]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[260]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[726]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[727]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; rt_hw_uart_init &rArr; nu_hw_uart_dma_allocate &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[501]"></a>AES_Open</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nu_crypto.o(.text.AES_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
</UL>

<P><STRONG><a name="[504]"></a>AES_SetDMATransfer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nu_crypto.o(.text.AES_SetDMATransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES_SetDMATransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
</UL>

<P><STRONG><a name="[503]"></a>AES_SetInitVect</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, nu_crypto.o(.text.AES_SetInitVect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AES_SetInitVect
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
</UL>

<P><STRONG><a name="[502]"></a>AES_SetKey</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, nu_crypto.o(.text.AES_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AES_SetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
</UL>

<P><STRONG><a name="[505]"></a>AES_Start</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nu_crypto.o(.text.AES_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AES_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
</UL>

<P><STRONG><a name="[597]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, nu_clk.o(.text.CLK_DisableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
</UL>

<P><STRONG><a name="[599]"></a>CLK_DisablePLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nu_clk.o(.text.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
</UL>

<P><STRONG><a name="[4b6]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, nu_clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_wdt
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_usbh
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_usbd
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart4
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart1
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart0
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_trng
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sram2
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sram1
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sram0
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_spi1
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_spi0
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sdh0
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_rtc
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_pdma1
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_pdma0
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_otg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_lcdcp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_lcd
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_isp
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_i2c1
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gph
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpf
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpe
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpd
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpb
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpa
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_fmcidle
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_eadc
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_crpt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_crc
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[264]"></a>CLK_EnablePLL</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, nu_clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[59a]"></a>CLK_EnableSysTick</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, nu_clk.o(.text.CLK_EnableSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_EnableSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_systick
</UL>

<P><STRONG><a name="[598]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, nu_clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
</UL>

<P><STRONG><a name="[2aa]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, nu_clk.o(.text.CLK_GetCPUFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLK_GetCPUFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[266]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nu_clk.o(.text.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_timeout_set
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_get_working_hz
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
</UL>

<P><STRONG><a name="[29a]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nu_clk.o(.text.CLK_GetHXTFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetHXTFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
</UL>

<P><STRONG><a name="[2af]"></a>CLK_GetModuleClockDivider</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, nu_clk.o(.text.CLK_GetModuleClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetModuleClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[2a3]"></a>CLK_GetModuleClockSource</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, nu_clk.o(.text.CLK_GetModuleClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_GetModuleClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_get_module_clock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[268]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nu_clk.o(.text.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBusClockFreq
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[269]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nu_clk.o(.text.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBusClockFreq
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[29b]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, nu_clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
</UL>

<P><STRONG><a name="[605]"></a>CLK_GetPMUWKSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nu_clk.o(.text.CLK_GetPMUWKSrc))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pm_init
</UL>

<P><STRONG><a name="[5bc]"></a>CLK_PowerDown</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, nu_clk.o(.text.CLK_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_PowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
</UL>

<P><STRONG><a name="[26a]"></a>CLK_SetCoreClock</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, nu_clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_run
</UL>

<P><STRONG><a name="[26b]"></a>CLK_SetHCLK</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, nu_clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[4b5]"></a>CLK_SetModuleClock</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, nu_clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_wdt
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_usbh
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_usbd
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart4
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart1
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart0
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_spi1
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_spi0
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sdh0
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_otg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_lcdcp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_lcd
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_eadc
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[5bb]"></a>CLK_SetPowerDownMode</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, nu_clk.o(.text.CLK_SetPowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SetPowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
</UL>

<P><STRONG><a name="[265]"></a>CLK_WaitClockReady</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, nu_clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[511]"></a>CRC_GetChecksum</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, nu_crc.o(.text.CRC_GetChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_run
</UL>

<P><STRONG><a name="[50f]"></a>CRC_Open</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nu_crc.o(.text.CRC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_run
</UL>

<P><STRONG><a name="[6b]"></a>CRPT_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, drv_crypto.o(.text.CRPT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CRPT_IRQHandler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[51a]"></a>EADC_Close</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, nu_eadc.o(.text.EADC_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EADC_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_eadc_enabled
</UL>

<P><STRONG><a name="[51e]"></a>EADC_ConfigSampleModule</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nu_eadc.o(.text.EADC_ConfigSampleModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EADC_ConfigSampleModule
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_get_eadc_value
</UL>

<P><STRONG><a name="[519]"></a>EADC_Open</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nu_eadc.o(.text.EADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EADC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_eadc_enabled
</UL>

<P><STRONG><a name="[26d]"></a>FMC_Erase</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, nu_fmc.o(.text.FMC_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
</UL>

<P><STRONG><a name="[26f]"></a>FMC_Read</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, nu_fmc.o(.text.FMC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FMC_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_read
</UL>

<P><STRONG><a name="[270]"></a>FMC_Write</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, nu_fmc.o(.text.FMC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FMC_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
</UL>

<P><STRONG><a name="[3d]"></a>GPA_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPA_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPB_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPB_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPC_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPC_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPD_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPD_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPE_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPE_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPF_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPF_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPG_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPG_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPH_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(.text.GPH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPH_IRQHandler &rArr; pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[522]"></a>GPIO_DisableInt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nu_gpio.o(.text.GPIO_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_irq_enable
</UL>

<P><STRONG><a name="[520]"></a>GPIO_EnableInt</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, nu_gpio.o(.text.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_irq_enable
</UL>

<P><STRONG><a name="[523]"></a>GPIO_SetMode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nu_gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_mode
</UL>

<P><STRONG><a name="[524]"></a>GPIO_SetPullCtl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nu_gpio.o(.text.GPIO_SetPullCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPullCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_mode
</UL>

<P><STRONG><a name="[27a]"></a>HID_Report_Received</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hid.o(.text.HID_Report_Received))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = HID_Report_Received &rArr; dump_report &rArr; dump_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_report
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_thread_entry
</UL>

<P><STRONG><a name="[602]"></a>I2C_Close</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, nu_i2c.o(.text.I2C_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[27c]"></a>I2C_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nu_i2c.o(.text.I2C_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[27d]"></a>I2C_SetBusClockFreq</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nu_i2c.o(.text.I2C_SetBusClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_SetBusClockFreq &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_bus_control
</UL>

<P><STRONG><a name="[27e]"></a>LCDLIB_Printf</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, slcd_rhe6616tp01.o(.text.LCDLIB_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCDLIB_Printf &rArr; SLCD_SetPixel &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLCD_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_hook
</UL>

<P><STRONG><a name="[281]"></a>LCDLIB_SetSymbol</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, slcd_rhe6616tp01.o(.text.LCDLIB_SetSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCDLIB_SetSymbol &rArr; SLCD_SetPixel &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLCD_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_hook
</UL>

<P><STRONG><a name="[282]"></a>LCD_Open</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, nu_lcd.o(.text.LCD_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Open &rArr; LCD_SetAllPixels
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAllPixels
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_open
</UL>

<P><STRONG><a name="[283]"></a>LCD_SetAllPixels</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, nu_lcd.o(.text.LCD_SetAllPixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetAllPixels
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open
</UL>

<P><STRONG><a name="[556]"></a>LCD_SetPixel</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, nu_lcd.o(.text.LCD_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_write
</UL>

<P><STRONG><a name="[55]"></a>PDMA0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_pdma.o(.text.PDMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PDMA0_IRQHandler &rArr; PDMA_IRQHandler &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PDMA1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_pdma.o(.text.PDMA1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PDMA1_IRQHandler &rArr; PDMA_IRQHandler &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[53c]"></a>PDMA_Close</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, nu_pdma.o(.text.PDMA_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PDMA_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
</UL>

<P><STRONG><a name="[547]"></a>PDMA_DisableInt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nu_pdma.o(.text.PDMA_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_timeout_set
</UL>

<P><STRONG><a name="[286]"></a>PDMA_DisableTimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nu_pdma.o(.text.PDMA_DisableTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_DisableTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_timeout_set
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_pdma_transfer
</UL>

<P><STRONG><a name="[2fa]"></a>PDMA_EnableInt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nu_pdma.o(.text.PDMA_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_timeout_set
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_pdma_transfer
</UL>

<P><STRONG><a name="[284]"></a>PDMA_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, drv_pdma.o(.text.PDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PDMA_IRQHandler &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_timeout_set
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
</UL>

<P><STRONG><a name="[538]"></a>PDMA_Open</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, nu_pdma.o(.text.PDMA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_enable
</UL>

<P><STRONG><a name="[546]"></a>PDMA_SetTimeOut</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, nu_pdma.o(.text.PDMA_SetTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PDMA_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_timeout_set
</UL>

<P><STRONG><a name="[2fb]"></a>PDMA_SetTransferMode</STRONG> (Thumb, 348 bytes, Stack size 28 bytes, nu_pdma.o(.text.PDMA_SetTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PDMA_SetTransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_pdma_transfer
</UL>

<P><STRONG><a name="[2fc]"></a>PDMA_Trigger</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nu_pdma.o(.text.PDMA_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_Trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_pdma_transfer
</UL>

<P><STRONG><a name="[567]"></a>RNG_Open</STRONG> (Thumb, 312 bytes, Stack size 12 bytes, nu_rng.o(.text.RNG_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RNG_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_run
</UL>

<P><STRONG><a name="[568]"></a>RNG_Random</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, nu_rng.o(.text.RNG_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RNG_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_run
</UL>

<P><STRONG><a name="[552]"></a>RTC_DisableInt</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, nu_rtc.o(.text.RTC_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_init
</UL>

<P><STRONG><a name="[54f]"></a>RTC_GetDateAndTime</STRONG> (Thumb, 464 bytes, Stack size 44 bytes, nu_rtc.o(.text.RTC_GetDateAndTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_GetDateAndTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_control
</UL>

<P><STRONG><a name="[33]"></a>RTC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_rtc.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[288]"></a>RTC_Open</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nu_rtc.o(.text.RTC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Open &rArr; RTC_SetDateAndTime
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateAndTime
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_init
</UL>

<P><STRONG><a name="[289]"></a>RTC_SetDateAndTime</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, nu_rtc.o(.text.RTC_SetDateAndTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetDateAndTime
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_control
</UL>

<P><STRONG><a name="[7c]"></a>SCU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_m2354.o(.text.SCU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SDH0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_sdh.o(.text.SDH0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = SDH0_IRQHandler &rArr; nu_sdh_isr &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[294]"></a>SDH_CardDetection</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, nu_sdh.o(.text.SDH_CardDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDH_CardDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[297]"></a>SDH_CheckRB</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, nu_sdh.o(.text.SDH_CheckRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDH_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Write
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
</UL>

<P><STRONG><a name="[28b]"></a>SDH_Get_SD_info</STRONG> (Thumb, 696 bytes, Stack size 80 bytes, nu_sdh.o(.text.SDH_Get_SD_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDH_Get_SD_info &rArr; SDH_SDCmdAndRsp2 &rArr; SDH_Swap32
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRspDataIn
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[290]"></a>SDH_Init</STRONG> (Thumb, 844 bytes, Stack size 56 bytes, nu_sdh.o(.text.SDH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDH_Init &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[292]"></a>SDH_Open</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, nu_sdh.o(.text.SDH_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDH_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdh_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_card_detector
</UL>

<P><STRONG><a name="[293]"></a>SDH_Probe</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, nu_sdh.o(.text.SDH_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SDH_Probe &rArr; SDH_Init &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_CardDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_open
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_card_detector
</UL>

<P><STRONG><a name="[296]"></a>SDH_Read</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, nu_sdh.o(.text.SDH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDH_Read &rArr; SDH_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
</UL>

<P><STRONG><a name="[28d]"></a>SDH_SDCmdAndRsp</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, nu_sdh.o(.text.SDH_SDCmdAndRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDH_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Write
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[28c]"></a>SDH_SDCmdAndRsp2</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, nu_sdh.o(.text.SDH_SDCmdAndRsp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDH_SDCmdAndRsp2 &rArr; SDH_Swap32
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[28e]"></a>SDH_SDCmdAndRspDataIn</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, nu_sdh.o(.text.SDH_SDCmdAndRspDataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDH_SDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SwitchToHighSpeed
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[28f]"></a>SDH_SDCommand</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, nu_sdh.o(.text.SDH_SDCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDH_SDCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Write
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Get_SD_info
</UL>

<P><STRONG><a name="[295]"></a>SDH_SelectCardType</STRONG> (Thumb, 796 bytes, Stack size 32 bytes, nu_sdh.o(.text.SDH_SelectCardType))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SDH_SelectCardType &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SwitchToHighSpeed
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Set_clock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRspDataIn
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>

<P><STRONG><a name="[291]"></a>SDH_Set_clock</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, nu_sdh.o(.text.SDH_Set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHXTFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Init
</UL>

<P><STRONG><a name="[298]"></a>SDH_Swap32</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nu_sdh.o(.text.SDH_Swap32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDH_Swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp2
</UL>

<P><STRONG><a name="[299]"></a>SDH_SwitchToHighSpeed</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, nu_sdh.o(.text.SDH_SwitchToHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDH_SwitchToHighSpeed &rArr; SDH_SDCmdAndRspDataIn
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SelectCardType
</UL>

<P><STRONG><a name="[29c]"></a>SDH_Write</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, nu_sdh.o(.text.SDH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDH_Write &rArr; SDH_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCommand
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_SDCmdAndRsp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
</UL>

<P><STRONG><a name="[29e]"></a>SHA_Open</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nu_crypto.o(.text.SHA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHABlockUpdate
</UL>

<P><STRONG><a name="[554]"></a>SHA_Read</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, nu_crypto.o(.text.SHA_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SHA_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_finish
</UL>

<P><STRONG><a name="[29f]"></a>SHA_SetDMATransfer</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nu_crypto.o(.text.SHA_SetDMATransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SHA_SetDMATransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHABlockUpdate
</UL>

<P><STRONG><a name="[2a0]"></a>SHA_Start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nu_crypto.o(.text.SHA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SHA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHABlockUpdate
</UL>

<P><STRONG><a name="[280]"></a>SLCD_SetPixel</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, slcd_rhe6616tp01.o(.text.SLCD_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SLCD_SetPixel &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLIB_SetSymbol
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLIB_Printf
</UL>

<P><STRONG><a name="[559]"></a>SPI_ClearRxFIFO</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, nu_spi.o(.text.SPI_ClearRxFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_ClearRxFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_drain_rxfifo
</UL>

<P><STRONG><a name="[2a2]"></a>SPI_Open</STRONG> (Thumb, 1404 bytes, Stack size 48 bytes, nu_spi.o(.text.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_configure
</UL>

<P><STRONG><a name="[2a4]"></a>SPI_SetBusClock</STRONG> (Thumb, 716 bytes, Stack size 32 bytes, nu_spi.o(.text.SPI_SetBusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_configure
</UL>

<P><STRONG><a name="[50d]"></a>SYS_ResetModule</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, nu_sys.o(.text.SYS_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_open
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_control
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_configure
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_init
</UL>

<P><STRONG><a name="[2c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_common.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[267]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_m2354.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_run
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_m2354.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(.text)
</UL>
<P><STRONG><a name="[2ab]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, nu_timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_tick_from_os_tick
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_pm_tick
</UL>

<P><STRONG><a name="[2ac]"></a>TIMER_Open</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, nu_timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[51]"></a>UART0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(.text.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = UART0_IRQHandler &rArr; nu_uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = UART1_IRQHandler &rArr; nu_uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UART4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = UART4_IRQHandler &rArr; nu_uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[56a]"></a>UART_Close</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nu_uart.o(.text.UART_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_control
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_configure
</UL>

<P><STRONG><a name="[2ae]"></a>UART_Open</STRONG> (Thumb, 520 bytes, Stack size 96 bytes, nu_uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UART_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_configure
</UL>

<P><STRONG><a name="[2b0]"></a>UART_SetLineConfig</STRONG> (Thumb, 516 bytes, Stack size 104 bytes, nu_uart.o(.text.UART_SetLineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UART_SetLineConfig &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_configure
</UL>

<P><STRONG><a name="[60]"></a>USBD_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_usbd.o(.text.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = USBD_IRQHandler &rArr; _USBD_IRQHandler &rArr; rt_usbd_ep0_setup_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[2b3]"></a>USBD_Start</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, nu_usbd.o(.text.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
</UL>

<P><STRONG><a name="[61]"></a>USBH_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, ohci.o(.text.USBH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = USBH_IRQHandler &rArr; remove_ed &rArr; free_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_done
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ed
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_TD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, drv_otg.o(.text.USBOTG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBOTG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>WDT_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, drv_wdt.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(RESET)
</UL>
<P><STRONG><a name="[6d1]"></a>WDT_Open</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nu_wdt.o(.text.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[31c]"></a>__rt_ffs</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[2c0]"></a>__rt_libc_exit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stdlib.o(.text.__rt_libc_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2c3]"></a>__wqueue_default_wake</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, waitqueue.o(.text.__wqueue_default_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __wqueue_default_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
</UL>

<P><STRONG><a name="[200]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, syscalls.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[35a]"></a>accept</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, net_sockets.o(.text.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = accept &rArr; sal_accept &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
</UL>

<P><STRONG><a name="[263]"></a>alloc_device</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mem_alloc.o(.text.alloc_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = alloc_device &rArr; malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_counter
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateNewUDev
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_polling
</UL>

<P><STRONG><a name="[370]"></a>alloc_ohci_ED</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mem_alloc.o(.text.alloc_ohci_ED))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = alloc_ohci_ED &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_ctrl_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hcca_int_table
</UL>

<P><STRONG><a name="[371]"></a>alloc_ohci_TD</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mem_alloc.o(.text.alloc_ohci_TD))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = alloc_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_ctrl_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
</UL>

<P><STRONG><a name="[37b]"></a>alloc_utr</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mem_alloc.o(.text.alloc_utr))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = alloc_utr &rArr; malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_counter
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctrl_xfer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
</UL>

<P><STRONG><a name="[37f]"></a>asctime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, time.o(.text.asctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = asctime &rArr; asctime_r &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[380]"></a>asctime_r</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, time.o(.text.asctime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = asctime_r &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[120]"></a>at_bind</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, at_socket.o(.text.at_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = at_bind &rArr; alloc_socket_by_device &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_ipaddr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[386]"></a>at_cli_deinit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at_cli.o(.text.at_cli_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = at_cli_deinit &rArr; rt_ringbuffer_destroy &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[382]"></a>at_cli_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, at_cli.o(.text.at_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = at_cli_init &rArr; rt_ringbuffer_create &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[385]"></a>at_client_get</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at_client.o(.text.at_client_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_client_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[383]"></a>at_client_get_first</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, at_client.o(.text.at_client_get_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = at_client_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[397]"></a>at_client_init</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, at_client.o(.text.at_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_client_init &rArr; at_client_para_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[39b]"></a>at_client_obj_recv</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, at_client.o(.text.at_client_obj_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = at_client_obj_recv &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
</UL>

<P><STRONG><a name="[39c]"></a>at_client_obj_send</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, at_client.o(.text.at_client_obj_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = at_client_obj_send &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
</UL>

<P><STRONG><a name="[39e]"></a>at_client_obj_wait_connect</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, at_client.o(.text.at_client_obj_wait_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = at_client_obj_wait_connect &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
</UL>

<P><STRONG><a name="[11f]"></a>at_closesocket</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, at_socket.o(.text.at_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = at_closesocket &rArr; free_socket &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[121]"></a>at_connect</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, at_socket.o(.text.at_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = at_connect &rArr; at_do_event_changes &rArr; rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[39f]"></a>at_create_resp</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, at_client.o(.text.at_create_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_connect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_close
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_info_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
</UL>

<P><STRONG><a name="[3a0]"></a>at_delete_resp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at_client.o(.text.at_delete_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = at_delete_resp &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_connect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_close
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_info_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
</UL>

<P><STRONG><a name="[3a9]"></a>at_device_class_register</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at_device.o(.text.at_device_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_device_class_register &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_device_class_register
</UL>

<P><STRONG><a name="[3ac]"></a>at_device_control</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, at_device.o(.text.at_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = at_device_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_set
</UL>

<P><STRONG><a name="[389]"></a>at_device_get_by_ipaddr</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at_device.o(.text.at_device_get_by_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_device_get_by_ipaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
</UL>

<P><STRONG><a name="[375]"></a>at_device_get_by_name</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, at_device.o(.text.at_device_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_device_get_by_name &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_up
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_down
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[3ae]"></a>at_device_get_first_initialized</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, at_device.o(.text.at_device_get_first_initialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_device_get_first_initialized
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_set
</UL>

<P><STRONG><a name="[3af]"></a>at_device_register</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, at_device.o(.text.at_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = at_device_register &rArr; rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_get
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_esp8266_port
</UL>

<P><STRONG><a name="[11d]"></a>at_freeaddrinfo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_socket.o(.text.at_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = at_freeaddrinfo &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_netdb_ops)
</UL>
<P><STRONG><a name="[3b8]"></a>at_get_last_cmd</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, at_utils.o(.text.at_get_last_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = at_get_last_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[387]"></a>at_get_socket</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, at_socket.o(.text.at_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_shutdown
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setsockopt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsockopt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
</UL>

<P><STRONG><a name="[11c]"></a>at_getaddrinfo</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, at_socket.o(.text.at_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = at_getaddrinfo &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_netdb_ops)
</UL>
<P><STRONG><a name="[11b]"></a>at_gethostbyname</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, at_socket.o(.text.at_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = at_gethostbyname &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_netdb_ops)
</UL>
<P><STRONG><a name="[124]"></a>at_getsockopt</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, at_socket.o(.text.at_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = at_getsockopt &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[3b6]"></a>at_obj_exec_cmd</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, at_client.o(.text.at_obj_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = at_obj_exec_cmd &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_last_cmd
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_connect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_close
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_info_set
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[3b9]"></a>at_obj_set_end_sign</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at_client.o(.text.at_obj_set_end_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = at_obj_set_end_sign &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
</UL>

<P><STRONG><a name="[3ba]"></a>at_obj_set_urc_table</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, at_client.o(.text.at_obj_set_urc_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = at_obj_set_urc_table &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[123]"></a>at_recvfrom</STRONG> (Thumb, 540 bytes, Stack size 96 bytes, at_socket.o(.text.at_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = at_recvfrom &rArr; at_recvpkt_get &rArr; at_recvpkt_node_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_clean
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[3c9]"></a>at_resp_get_line</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, at_client.o(.text.at_resp_get_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = at_resp_get_line &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
</UL>

<P><STRONG><a name="[3ca]"></a>at_resp_get_line_by_kw</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, at_client.o(.text.at_resp_get_line_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at_resp_get_line_by_kw &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
</UL>

<P><STRONG><a name="[3cc]"></a>at_resp_parse_line_args</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, at_client.o(.text.at_resp_parse_line_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = at_resp_parse_line_args &rArr; at_resp_get_line &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[3cd]"></a>at_resp_parse_line_args_by_kw</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, at_client.o(.text.at_resp_parse_line_args_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = at_resp_parse_line_args_by_kw &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[3ce]"></a>at_resp_set_info</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, at_client.o(.text.at_resp_set_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = at_resp_set_info &rArr; rt_realloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
</UL>

<P><STRONG><a name="[122]"></a>at_sendto</STRONG> (Thumb, 416 bytes, Stack size 88 bytes, at_socket.o(.text.at_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = at_sendto &rArr; at_do_event_changes &rArr; rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[125]"></a>at_setsockopt</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, at_socket.o(.text.at_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = at_setsockopt &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[126]"></a>at_shutdown</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at_socket.o(.text.at_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = at_shutdown &rArr; free_socket &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[11e]"></a>at_socket</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, at_socket.o(.text.at_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_socket &rArr; alloc_socket &rArr; alloc_socket_by_device &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[39d]"></a>at_utils_send</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at_utils.o(.text.at_utils_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_utils_send &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
</UL>

<P><STRONG><a name="[3b7]"></a>at_vprintfln</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, at_utils.o(.text.at_vprintfln))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = at_vprintfln &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[3cf]"></a>bind</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_sockets.o(.text.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = bind &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
</UL>

<P><STRONG><a name="[3d1]"></a>cat</STRONG> (Thumb, 100 bytes, Stack size 104 bytes, dfs_file.o(.text.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>

<P><STRONG><a name="[3d5]"></a>chdir</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, dfs_posix.o(.text.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = chdir &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>

<P><STRONG><a name="[3e9]"></a>close</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dfs_posix.o(.text.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = close &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[3da]"></a>closedir</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dfs_posix.o(.text.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = closedir &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_mount
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[3ea]"></a>closesocket</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, net_sockets.o(.text.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
</UL>

<P><STRONG><a name="[185]"></a>cmd_canstat</STRONG> (Thumb, 268 bytes, Stack size 88 bytes, can.o(.text.cmd_canstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = cmd_canstat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(FSymTab)
</UL>
<P><STRONG><a name="[19f]"></a>cmd_free</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, msh.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[19e]"></a>cmd_ps</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh.o(.text.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[401]"></a>connect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_sockets.o(.text.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = connect &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
</UL>

<P><STRONG><a name="[3ec]"></a>copy</STRONG> (Thumb, 368 bytes, Stack size 104 bytes, dfs_file.o(.text.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>

<P><STRONG><a name="[414]"></a>ctime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, time.o(.text.ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ctime &rArr; asctime &rArr; asctime_r &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>

<P><STRONG><a name="[41d]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(.text.devfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[3ed]"></a>df</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, dfs_fs.o(.text.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>

<P><STRONG><a name="[102]"></a>dfs_device_fs_close</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, devfs.o(.text.dfs_device_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fops)
</UL>
<P><STRONG><a name="[106]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, devfs.o(.text.dfs_device_fs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fops)
</UL>
<P><STRONG><a name="[103]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, devfs.o(.text.dfs_device_fs_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fops)
</UL>
<P><STRONG><a name="[108]"></a>dfs_device_fs_mount</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, devfs.o(.text.dfs_device_fs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dfs_device_fs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fs)
</UL>
<P><STRONG><a name="[101]"></a>dfs_device_fs_open</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, devfs.o(.text.dfs_device_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fops)
</UL>
<P><STRONG><a name="[104]"></a>dfs_device_fs_read</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, devfs.o(.text.dfs_device_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fops)
</UL>
<P><STRONG><a name="[109]"></a>dfs_device_fs_stat</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, devfs.o(.text.dfs_device_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fs)
</UL>
<P><STRONG><a name="[105]"></a>dfs_device_fs_write</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, devfs.o(.text.dfs_device_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fops)
</UL>
<P><STRONG><a name="[130]"></a>dfs_elm_close</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[134]"></a>dfs_elm_flush</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[136]"></a>dfs_elm_getdents</STRONG> (Thumb, 276 bytes, Stack size 336 bytes, dfs_elm.o(.text.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[131]"></a>dfs_elm_ioctl</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, dfs_elm.o(.text.dfs_elm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = dfs_elm_ioctl &rArr; f_lseek &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[135]"></a>dfs_elm_lseek</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, dfs_elm.o(.text.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[12a]"></a>dfs_elm_mkfs</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, dfs_elm.o(.text.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = dfs_elm_mkfs &rArr; f_mkfs &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[128]"></a>dfs_elm_mount</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, dfs_elm.o(.text.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[12f]"></a>dfs_elm_open</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, dfs_elm.o(.text.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[132]"></a>dfs_elm_read</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, dfs_elm.o(.text.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[12e]"></a>dfs_elm_rename</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, dfs_elm.o(.text.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[12d]"></a>dfs_elm_stat</STRONG> (Thumb, 336 bytes, Stack size 400 bytes, dfs_elm.o(.text.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[12b]"></a>dfs_elm_statfs</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, dfs_elm.o(.text.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[12c]"></a>dfs_elm_unlink</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, dfs_elm.o(.text.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[129]"></a>dfs_elm_unmount</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, dfs_elm.o(.text.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[133]"></a>dfs_elm_write</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, dfs_elm.o(.text.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[48b]"></a>dfs_fdtable_get</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, dfs.o(.text.dfs_fdtable_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[3d4]"></a>dfs_file_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dfs_file.o(.text.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[406]"></a>dfs_file_getdents</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dfs_file.o(.text.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
</UL>

<P><STRONG><a name="[4dd]"></a>dfs_file_lseek</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_file.o(.text.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>

<P><STRONG><a name="[3d2]"></a>dfs_file_open</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, dfs_file.o(.text.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[3d3]"></a>dfs_file_read</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, dfs_file.o(.text.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[43a]"></a>dfs_file_rename</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, dfs_file.o(.text.dfs_file_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[403]"></a>dfs_file_stat</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, dfs_file.o(.text.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>

<P><STRONG><a name="[43b]"></a>dfs_file_unlink</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, dfs_file.o(.text.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</UL>

<P><STRONG><a name="[407]"></a>dfs_file_write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dfs_file.o(.text.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[43d]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, dfs_fs.o(.text.dfs_filesystem_get_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dfs_filesystem_get_partition &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[437]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, dfs_fs.o(.text.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_is_mounted
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[16a]"></a>dfs_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfs.o(.text.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[3d6]"></a>dfs_lock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs.o(.text.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[3f3]"></a>dfs_mkfs</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, dfs_fs.o(.text.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</UL>

<P><STRONG><a name="[3f4]"></a>dfs_mount</STRONG> (Thumb, 572 bytes, Stack size 88 bytes, dfs_fs.o(.text.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_mount
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[360]"></a>dfs_net_get_fops</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_net.o(.text.dfs_net_get_fops))
<BR><BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[35b]"></a>dfs_net_getsocket</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dfs_net.o(.text.dfs_net_getsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[3d8]"></a>dfs_normalize_path</STRONG> (Thumb, 636 bytes, Stack size 72 bytes, dfs.o(.text.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[41e]"></a>dfs_register</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, dfs_fs.o(.text.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
</UL>

<P><STRONG><a name="[41f]"></a>dfs_statfs</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dfs_fs.o(.text.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[438]"></a>dfs_subdir</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, dfs.o(.text.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[3d7]"></a>dfs_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs.o(.text.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[3fd]"></a>dfs_unmount</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, dfs_fs.o(.text.dfs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_unmount
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[47b]"></a>disk_initialize</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, dfs_elm.o(.text.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[410]"></a>disk_ioctl</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, dfs_elm.o(.text.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[455]"></a>disk_read</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, dfs_elm.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[4e3]"></a>disk_status</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, dfs_elm.o(.text.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[413]"></a>disk_write</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, dfs_elm.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5ab]"></a>ed_make_info</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, ohci.o(.text.ed_make_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ed_make_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_ctrl_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
</UL>

<P><STRONG><a name="[42d]"></a>elm_get_vol</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ff.o(.text.elm_get_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = elm_get_vol
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[176]"></a>elm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(.text.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[140]"></a>esp8266_netdev_netstat</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, at_device_esp8266.o(.text.esp8266_netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = esp8266_netdev_netstat &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_netdev_ops)
</UL>
<P><STRONG><a name="[45a]"></a>esp8266_socket_class_register</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_socket_esp8266.o(.text.esp8266_socket_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = esp8266_socket_class_register &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_device_class_register
</UL>

<P><STRONG><a name="[461]"></a>esp8266_socket_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_socket_esp8266.o(.text.esp8266_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = esp8266_socket_init &rArr; at_obj_set_urc_table &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[422]"></a>f_close</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[434]"></a>f_getfree</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, ff.o(.text.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[427]"></a>f_lseek</STRONG> (Thumb, 1224 bytes, Stack size 128 bytes, ff.o(.text.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = f_lseek &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[42e]"></a>f_mkdir</STRONG> (Thumb, 396 bytes, Stack size 120 bytes, ff.o(.text.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[42b]"></a>f_mkfs</STRONG> (Thumb, 2632 bytes, Stack size 248 bytes, ff.o(.text.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = f_mkfs &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[42a]"></a>f_mount</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[42f]"></a>f_open</STRONG> (Thumb, 846 bytes, Stack size 128 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[42c]"></a>f_opendir</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[430]"></a>f_read</STRONG> (Thumb, 738 bytes, Stack size 96 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[425]"></a>f_readdir</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[431]"></a>f_rename</STRONG> (Thumb, 466 bytes, Stack size 200 bytes, ff.o(.text.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[428]"></a>f_seekdir</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(.text.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[432]"></a>f_stat</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, ff.o(.text.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[424]"></a>f_sync</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[426]"></a>f_truncate</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, ff.o(.text.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = f_truncate &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[435]"></a>f_unlink</STRONG> (Thumb, 308 bytes, Stack size 136 bytes, ff.o(.text.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[436]"></a>f_write</STRONG> (Thumb, 846 bytes, Stack size 96 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[3dc]"></a>fal_flash_device_find</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fal_flash.o(.text.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[486]"></a>fal_flash_init</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fal_flash.o(.text.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = fal_flash_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[487]"></a>fal_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fal.o(.text.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_init
</UL>

<P><STRONG><a name="[480]"></a>fal_init_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fal.o(.text.fal_init_check))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[485]"></a>fal_partition_erase</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, fal_partition.o(.text.fal_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = fal_partition_erase &rArr; flash_device_find_by_part &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[481]"></a>fal_partition_find</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fal_partition.o(.text.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = fal_partition_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[488]"></a>fal_partition_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fal_partition.o(.text.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[483]"></a>fal_partition_read</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, fal_partition.o(.text.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = fal_partition_read &rArr; flash_device_find_by_part &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[484]"></a>fal_partition_write</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, fal_partition.o(.text.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = fal_partition_write &rArr; flash_device_find_by_part &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[482]"></a>fal_show_part_table</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, fal_partition.o(.text.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[35f]"></a>fd_get</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dfs.o(.text.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = fd_get &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>

<P><STRONG><a name="[43c]"></a>fd_is_open</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, dfs.o(.text.fd_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[35d]"></a>fd_new</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs.o(.text.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = fd_new &rArr; fd_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[361]"></a>fd_put</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs.o(.text.fd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>

<P><STRONG><a name="[47d]"></a>ff_cre_syncobj</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, dfs_elm.o(.text.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[47c]"></a>ff_del_syncobj</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_elm.o(.text.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[449]"></a>ff_memalloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_elm.o(.text.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[44a]"></a>ff_memfree</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_elm.o(.text.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[6ca]"></a>ff_oem2uni</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[48d]"></a>ff_rel_grant</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_elm.o(.text.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[48e]"></a>ff_req_grant</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(.text.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[40e]"></a>ff_uni2oem</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[400]"></a>ff_wtoupper</STRONG> (Thumb, 328 bytes, Stack size 36 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[490]"></a>finsh_get_prompt</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, shell.o(.text.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[494]"></a>finsh_getchar</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, shell.o(.text.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[495]"></a>finsh_set_device</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, shell.o(.text.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[496]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, shell.o(.text.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[497]"></a>finsh_system_function_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, shell.o(.text.finsh_system_function_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_system_function_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[17d]"></a>finsh_system_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, shell.o(.text.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[a0]"></a>finsh_thread_entry</STRONG> (Thumb, 1260 bytes, Stack size 112 bytes, shell.o(.text.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_system_init)
</UL>
<P><STRONG><a name="[49d]"></a>free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem_std.o(.text.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_utr
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_device
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_free_mem
</UL>

<P><STRONG><a name="[49e]"></a>free_device</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mem_alloc.o(.text.free_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = free_device &rArr; usbh_free_mem &rArr; free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_free_mem
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_close_pipe
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_device
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_polling
</UL>

<P><STRONG><a name="[4a0]"></a>free_ohci_ED</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mem_alloc.o(.text.free_ohci_ED))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = free_ohci_ED &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
</UL>

<P><STRONG><a name="[2b6]"></a>free_ohci_TD</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mem_alloc.o(.text.free_ohci_TD))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = free_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IRQHandler
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_ctrl_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
</UL>

<P><STRONG><a name="[4a1]"></a>free_utr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem_alloc.o(.text.free_utr))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = free_utr &rArr; free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctrl_xfer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_xfer_done_cb
</UL>

<P><STRONG><a name="[476]"></a>get_fattime</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, dfs_elm.o(.text.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[492]"></a>getcwd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(.text.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[4a6]"></a>gethostbyname</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, net_netdb.o(.text.gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gethostbyname &rArr; sal_gethostbyname &rArr; netdev_get_first_by_flags &rArr; rt_slist_next
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</UL>

<P><STRONG><a name="[4a3]"></a>gmtime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, time.o(.text.gmtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gmtime &rArr; gmtime_r &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_control
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[4a8]"></a>gmtime_r</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, time.o(.text.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gmtime_r &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_is_dst
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>

<P><STRONG><a name="[1ae]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1bb]"></a>iperf</STRONG> (Thumb, 644 bytes, Stack size 80 bytes, iperf.o(.text.iperf))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = iperf &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_usage
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf.o(FSymTab)
</UL>
<P><STRONG><a name="[a1]"></a>iperf_server</STRONG> (Thumb, 636 bytes, Stack size 136 bytes, iperf.o(.text.iperf_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = iperf_server &rArr; select &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf.o(.text.iperf)
</UL>
<P><STRONG><a name="[4c6]"></a>iperf_usage</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, iperf.o(.text.iperf_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = iperf_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
</UL>

<P><STRONG><a name="[1ba]"></a>list</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmd.o(.text.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b9]"></a>list_device</STRONG> (Thumb, 220 bytes, Stack size 112 bytes, cmd.o(.text.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b3]"></a>list_event</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, cmd.o(.text.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[19c]"></a>list_fd</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, dfs.o(.text.list_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = list_fd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(FSymTab)
</UL>
<P><STRONG><a name="[1b5]"></a>list_mailbox</STRONG> (Thumb, 284 bytes, Stack size 136 bytes, cmd.o(.text.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b7]"></a>list_mempool</STRONG> (Thumb, 284 bytes, Stack size 128 bytes, cmd.o(.text.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b6]"></a>list_msgqueue</STRONG> (Thumb, 268 bytes, Stack size 128 bytes, cmd.o(.text.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b4]"></a>list_mutex</STRONG> (Thumb, 208 bytes, Stack size 128 bytes, cmd.o(.text.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b2]"></a>list_sem</STRONG> (Thumb, 268 bytes, Stack size 128 bytes, cmd.o(.text.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b1]"></a>list_thread</STRONG> (Thumb, 360 bytes, Stack size 256 bytes, cmd.o(.text.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1b8]"></a>list_timer</STRONG> (Thumb, 248 bytes, Stack size 104 bytes, cmd.o(.text.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4cc]"></a>listen</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, net_sockets.o(.text.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = listen &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_listen
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
</UL>

<P><STRONG><a name="[415]"></a>localtime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, time.o(.text.localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = localtime &rArr; localtime_r &rArr; gmtime_r &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_hook
</UL>

<P><STRONG><a name="[4d9]"></a>localtime_r</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, time.o(.text.localtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = localtime_r &rArr; gmtime_r &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[18b]"></a>lptimer_dump</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lptimer.o(.text.lptimer_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lptimer_dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptimer.o(FSymTab)
</UL>
<P><STRONG><a name="[3f1]"></a>ls</STRONG> (Thumb, 260 bytes, Stack size 96 bytes, dfs_file.o(.text.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>

<P><STRONG><a name="[3fc]"></a>lseek</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, dfs_posix.o(.text.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = lseek &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[4de]"></a>$Super$$main</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[b1]"></a>main_thread_entry</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[36b]"></a>malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem_std.o(.text.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_utr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_device
</UL>

<P><STRONG><a name="[3f2]"></a>mkdir</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, dfs_posix.o(.text.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
</UL>

<P><STRONG><a name="[4e2]"></a>mktime</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, time.o(.text.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mktime &rArr; timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[17a]"></a>mnt_init_sdcard_hotplug</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, drv_sdh.o(.text.mnt_init_sdcard_hotplug))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = mnt_init_sdcard_hotplug &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[4e4]"></a>msh_auto_complete</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, msh.o(.text.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[4e5]"></a>msh_auto_complete_path</STRONG> (Thumb, 556 bytes, Stack size 72 bytes, msh.o(.text.msh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[49c]"></a>msh_exec</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, msh.o(.text.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[4e8]"></a>msh_exec_script</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, msh_file.o(.text.msh_exec_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[19d]"></a>msh_help</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, msh.o(.text.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[4ef]"></a>netdev_cmd_ping</STRONG> (Thumb, 624 bytes, Stack size 128 bytes, netdev.o(.text.netdev_cmd_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
</UL>

<P><STRONG><a name="[1bf]"></a>netdev_dns</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, netdev.o(.text.netdev_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = netdev_dns &rArr; netdev_set_dns &rArr; netdev_set_dns_server &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[373]"></a>netdev_family_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netdev.o(.text.netdev_family_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_family_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[374]"></a>netdev_get_by_family</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, netdev.o(.text.netdev_get_by_family))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netdev_get_by_family &rArr; rt_slist_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
</UL>

<P><STRONG><a name="[4f2]"></a>netdev_get_by_ipaddr</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, netdev.o(.text.netdev_get_by_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netdev_get_by_ipaddr &rArr; rt_slist_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
</UL>

<P><STRONG><a name="[467]"></a>netdev_get_by_name</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, netdev.o(.text.netdev_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netdev_get_by_name &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_add
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_hook
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[4eb]"></a>netdev_get_first_by_flags</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, netdev.o(.text.netdev_get_first_by_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netdev_get_first_by_flags &rArr; rt_slist_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[1bd]"></a>netdev_ifconfig</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, netdev.o(.text.netdev_ifconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = netdev_ifconfig &rArr; netdev_set_if &rArr; netdev_set_netmask &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[3b3]"></a>netdev_ip4addr_aton</STRONG> (Thumb, 768 bytes, Stack size 88 bytes, netdev_ipaddr.o(.text.netdev_ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netdev_ip4addr_aton &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ipaddr_addr
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[46a]"></a>netdev_ip4addr_ntoa</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, netdev_ipaddr.o(.text.netdev_ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netdev_ip4addr_ntoa &rArr; netdev_ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
</UL>

<P><STRONG><a name="[4f5]"></a>netdev_ip4addr_ntoa_r</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, netdev_ipaddr.o(.text.netdev_ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
</UL>

<P><STRONG><a name="[4c8]"></a>netdev_ipaddr_addr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, netdev_ipaddr.o(.text.netdev_ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netdev_ipaddr_addr &rArr; netdev_ip4addr_aton &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
</UL>

<P><STRONG><a name="[460]"></a>netdev_low_level_set_dhcp_status</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, netdev.o(.text.netdev_low_level_set_dhcp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netdev_low_level_set_dhcp_status
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[45f]"></a>netdev_low_level_set_dns_server</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, netdev.o(.text.netdev_low_level_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_low_level_set_dns_server &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[45c]"></a>netdev_low_level_set_gw</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, netdev.o(.text.netdev_low_level_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[3e3]"></a>netdev_low_level_set_internet_status</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, netdev.o(.text.netdev_low_level_set_internet_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netdev_low_level_set_internet_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[45e]"></a>netdev_low_level_set_ipaddr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, netdev.o(.text.netdev_low_level_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = netdev_low_level_set_ipaddr &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[464]"></a>netdev_low_level_set_link_status</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, netdev.o(.text.netdev_low_level_set_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
</UL>

<P><STRONG><a name="[45d]"></a>netdev_low_level_set_netmask</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, netdev.o(.text.netdev_low_level_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>

<P><STRONG><a name="[463]"></a>netdev_low_level_set_status</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, netdev.o(.text.netdev_low_level_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = netdev_low_level_set_status &rArr; netdev_auto_change_default &rArr; netdev_get_first_by_flags &rArr; rt_slist_next
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_up
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_down
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
</UL>

<P><STRONG><a name="[1c0]"></a>netdev_netstat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netdev.o(.text.netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = netdev_netstat &rArr; netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[1be]"></a>netdev_ping</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, netdev.o(.text.netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = netdev_ping &rArr; netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[469]"></a>netdev_register</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, netdev.o(.text.netdev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = netdev_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_add
</UL>

<P><STRONG><a name="[4ec]"></a>netdev_set_default</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, netdev.o(.text.netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[4f9]"></a>netdev_set_dns_server</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, netdev.o(.text.netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = netdev_set_dns_server &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[4fa]"></a>netdev_set_gw</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, netdev.o(.text.netdev_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = netdev_set_gw &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[4fb]"></a>netdev_set_ipaddr</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, netdev.o(.text.netdev_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = netdev_set_ipaddr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[4fc]"></a>netdev_set_netmask</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, netdev.o(.text.netdev_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = netdev_set_netmask &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[4fd]"></a>ntp_get_time</STRONG> (Thumb, 760 bytes, Stack size 240 bytes, ntp.o(.text.ntp_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>

<P><STRONG><a name="[3f7]"></a>ntp_sync_to_rtc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ntp.o(.text.ntp_sync_to_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ntp_sync
</UL>

<P><STRONG><a name="[50c]"></a>nu_crc_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_crc.o(.text.nu_crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = nu_crc_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_device_init
</UL>

<P><STRONG><a name="[149]"></a>nu_crc_update</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, drv_crc.o(.text.nu_crc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = nu_crc_update &rArr; nu_crc_run &rArr; nu_pdma_mempush &rArr; nu_pdma_memfun &rArr; nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_crc_ops)
</UL>
<P><STRONG><a name="[37c]"></a>nu_fmc_erase</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, drv_fmc.o(.text.nu_fmc_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = nu_fmc_erase &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldrom_erase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aprom_erase
</UL>

<P><STRONG><a name="[37d]"></a>nu_fmc_read</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, drv_fmc.o(.text.nu_fmc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = nu_fmc_read &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldrom_read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aprom_read
</UL>

<P><STRONG><a name="[37e]"></a>nu_fmc_write</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, drv_fmc.o(.text.nu_fmc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = nu_fmc_write &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldrom_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aprom_write
</UL>

<P><STRONG><a name="[171]"></a>nu_hwcrypto_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, drv_crypto.o(.text.nu_hwcrypto_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = nu_hwcrypto_device_init &rArr; rt_hwcrypto_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwcrypto_register
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crypto_init
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_init
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[542]"></a>nu_pdma_callback_register</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, drv_pdma.o(.text.nu_pdma_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nu_pdma_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_tx_config
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_config
</UL>

<P><STRONG><a name="[52a]"></a>nu_pdma_channel_allocate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, drv_pdma.o(.text.nu_pdma_channel_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_peripheral_set
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_periph_ctrl_fill
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_reset
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_enable
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_cto
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_actor_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hw_uart_dma_allocate
</UL>

<P><STRONG><a name="[541]"></a>nu_pdma_channel_memctrl_set</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_pdma.o(.text.nu_pdma_channel_memctrl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nu_pdma_channel_memctrl_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
</UL>

<P><STRONG><a name="[539]"></a>nu_pdma_channel_terminate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_pdma.o(.text.nu_pdma_channel_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nu_pdma_channel_terminate &rArr; nu_pdma_channel_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_control
</UL>

<P><STRONG><a name="[53a]"></a>nu_pdma_desc_setup</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, drv_pdma.o(.text.nu_pdma_desc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nu_pdma_desc_setup &rArr; nu_pdma_channel_memctrl_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_memctrl_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_transfer
</UL>

<P><STRONG><a name="[53e]"></a>nu_pdma_memcpy</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, drv_pdma.o(.text.nu_pdma_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = nu_pdma_memcpy &rArr; nu_pdma_memfun &rArr; nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
</UL>

<P><STRONG><a name="[510]"></a>nu_pdma_mempush</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, drv_pdma.o(.text.nu_pdma_mempush))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = nu_pdma_mempush &rArr; nu_pdma_memfun &rArr; nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_run
</UL>

<P><STRONG><a name="[543]"></a>nu_pdma_transfer</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, drv_pdma.o(.text.nu_pdma_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nu_pdma_transfer &rArr; _nu_pdma_transfer &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_desc_setup
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_pdma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_dma_transmit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_config
</UL>

<P><STRONG><a name="[548]"></a>nu_pdma_transferred_byte_get</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, drv_pdma.o(.text.nu_pdma_transferred_byte_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nu_pdma_transferred_byte_get &rArr; nu_pdma_non_transfer_count_get
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_non_transfer_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_cb
</UL>

<P><STRONG><a name="[557]"></a>nu_spi_drain_rxfifo</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_spi.o(.text.nu_spi_drain_rxfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nu_spi_drain_rxfifo &rArr; SPI_ClearRxFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearRxFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_transmission_with_poll
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_configure
</UL>

<P><STRONG><a name="[558]"></a>nu_spi_transfer</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, drv_spi.o(.text.nu_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = nu_spi_transfer &rArr; nu_spi_transmission_with_poll &rArr; nu_spi_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_transmission_with_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_xfer
</UL>

<P><STRONG><a name="[52b]"></a>nu_trng_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_trng.o(.text.nu_trng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = nu_trng_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_device_init
</UL>

<P><STRONG><a name="[150]"></a>nu_trng_rand</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_trng.o(.text.nu_trng_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = nu_trng_rand &rArr; nu_trng_run &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_run
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_rng_ops)
</UL>
<P><STRONG><a name="[172]"></a>nu_usbd_register</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_usbd.o(.text.nu_usbd_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = nu_usbd_register &rArr; rt_usb_device_init &rArr; rt_usbd_core_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[173]"></a>nu_usbh_register</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, drv_usbhost.o(.text.nu_usbh_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = nu_usbh_register &rArr; rt_usb_host_init &rArr; rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[571]"></a>nutool_modclkcfg_init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nutool_modclkcfg_init &rArr; nutool_modclkcfg_init_base &rArr; CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_wdt
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_usbh
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_usbd
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart4
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart1
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_uart0
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_trng
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_systick
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sram2
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sram1
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sram0
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_spi1
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_spi0
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_sdh0
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_rtc
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_pdma1
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_pdma0
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_otg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_lcdcp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_lcd
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_isp
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_i2c1
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gph
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpg
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpf
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpe
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpd
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpb
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_gpa
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_fmcidle
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_eadc
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_crpt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_crc
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init_base
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[573]"></a>nutool_modclkcfg_init_base</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nutool_modclkcfg_init_base &rArr; CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[578]"></a>nutool_modclkcfg_init_crc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_crc &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[579]"></a>nutool_modclkcfg_init_crpt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_crpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_crpt &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[57a]"></a>nutool_modclkcfg_init_eadc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_eadc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_eadc &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[57b]"></a>nutool_modclkcfg_init_fmcidle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_fmcidle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_fmcidle &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[57d]"></a>nutool_modclkcfg_init_gpa</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gpa &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[57e]"></a>nutool_modclkcfg_init_gpb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gpb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gpb &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[57f]"></a>nutool_modclkcfg_init_gpc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gpc &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[580]"></a>nutool_modclkcfg_init_gpd</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gpd &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[581]"></a>nutool_modclkcfg_init_gpe</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gpe))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gpe &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[582]"></a>nutool_modclkcfg_init_gpf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gpf &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[583]"></a>nutool_modclkcfg_init_gpg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gpg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gpg &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[584]"></a>nutool_modclkcfg_init_gph</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_gph))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_gph &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[585]"></a>nutool_modclkcfg_init_i2c1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_i2c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_i2c1 &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[57c]"></a>nutool_modclkcfg_init_isp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_isp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_isp &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[586]"></a>nutool_modclkcfg_init_lcd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_lcd &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[587]"></a>nutool_modclkcfg_init_lcdcp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_lcdcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_lcdcp &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[588]"></a>nutool_modclkcfg_init_otg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_otg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_otg &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[589]"></a>nutool_modclkcfg_init_pdma0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_pdma0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_pdma0 &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[58a]"></a>nutool_modclkcfg_init_pdma1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_pdma1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_pdma1 &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[58b]"></a>nutool_modclkcfg_init_rtc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_rtc &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[58c]"></a>nutool_modclkcfg_init_sdh0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_sdh0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_sdh0 &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[58d]"></a>nutool_modclkcfg_init_spi0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_spi0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_spi0 &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[58e]"></a>nutool_modclkcfg_init_spi1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_spi1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_spi1 &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[574]"></a>nutool_modclkcfg_init_sram0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_sram0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_sram0 &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[575]"></a>nutool_modclkcfg_init_sram1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_sram1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_sram1 &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[576]"></a>nutool_modclkcfg_init_sram2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_sram2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_sram2 &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[577]"></a>nutool_modclkcfg_init_systick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nutool_modclkcfg_init_systick &rArr; CLK_EnableSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[58f]"></a>nutool_modclkcfg_init_trng</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_trng))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nutool_modclkcfg_init_trng &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[590]"></a>nutool_modclkcfg_init_uart0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_uart0 &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[591]"></a>nutool_modclkcfg_init_uart1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_uart1 &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[592]"></a>nutool_modclkcfg_init_uart4</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_uart4))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_uart4 &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[593]"></a>nutool_modclkcfg_init_usbd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_usbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_usbd &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[594]"></a>nutool_modclkcfg_init_usbh</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_usbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_usbh &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[595]"></a>nutool_modclkcfg_init_wdt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nutool_modclkcfg.o(.text.nutool_modclkcfg_init_wdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nutool_modclkcfg_init_wdt &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[59b]"></a>nutool_pincfg_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nutool_pincfg.o(.text.nutool_pincfg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nutool_pincfg_init &rArr; nutool_pincfg_init_eadc0
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pincfg_init_slcd
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_usb
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_uart4
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_uart1
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_uart0
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_spi1
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_spi0
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_sd0
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_ph
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_ice
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_i2s0
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_i2c1
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_epwm1
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_epwm0
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init_eadc0
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[59c]"></a>nutool_pincfg_init_eadc0</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_eadc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nutool_pincfg_init_eadc0
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[59d]"></a>nutool_pincfg_init_epwm0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_epwm0))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[59e]"></a>nutool_pincfg_init_epwm1</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_epwm1))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[59f]"></a>nutool_pincfg_init_i2c1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_i2c1))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a0]"></a>nutool_pincfg_init_i2s0</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_i2s0))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a1]"></a>nutool_pincfg_init_ice</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_ice))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a2]"></a>nutool_pincfg_init_ph</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_ph))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a3]"></a>nutool_pincfg_init_sd0</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_sd0))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a4]"></a>nutool_pincfg_init_spi0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_spi0))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a5]"></a>nutool_pincfg_init_spi1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_spi1))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a6]"></a>nutool_pincfg_init_uart0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_uart0))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a7]"></a>nutool_pincfg_init_uart1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_uart1))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a8]"></a>nutool_pincfg_init_uart4</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_uart4))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[5a9]"></a>nutool_pincfg_init_usb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.nutool_pincfg_init_usb))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[3ee]"></a>open</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dfs_posix.o(.text.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[3d9]"></a>opendir</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dfs_posix.o(.text.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_mount
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[5aa]"></a>pincfg_init_slcd</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nutool_pincfg.o(.text.pincfg_init_slcd))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
</UL>

<P><STRONG><a name="[309]"></a>pm_get_sleep_threshold_mode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pm.o(.text.pm_get_sleep_threshold_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_get_sleep_threshold_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[307]"></a>pm_timer_next_timeout_tick</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pm.o(.text.pm_timer_next_timeout_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pm_timer_next_timeout_tick &rArr; rt_lptimer_next_timeout_tick &rArr; rt_list_isempty
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lptimer_next_timeout_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[5c4]"></a>poll</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, poll.o(.text.poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[3fb]"></a>read</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, dfs_posix.o(.text.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = read &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[453]"></a>readdir</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, dfs_posix.o(.text.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = readdir &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[3f8]"></a>readspeed</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, readspeed.o(.text.readspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = readspeed &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readspeed
</UL>

<P><STRONG><a name="[4ce]"></a>recv</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, net_sockets.o(.text.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
</UL>

<P><STRONG><a name="[4d0]"></a>recvfrom</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, net_sockets.o(.text.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = recvfrom &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
</UL>

<P><STRONG><a name="[3f6]"></a>rename</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dfs_posix.o(.text.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[4e7]"></a>rewinddir</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dfs_posix.o(.text.rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rewinddir &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[366]"></a>rt_adc_disable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, adc.o(.text.rt_adc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_adc_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[364]"></a>rt_adc_enable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, adc.o(.text.rt_adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_adc_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[365]"></a>rt_adc_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, adc.o(.text.rt_adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_adc_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[5d9]"></a>rt_application_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2c5]"></a>rt_assert_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, kservice.o(.text.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_bfsz_func
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_connect
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_at_netdev_set_pf_info
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_class_register
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_add
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_control
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_family_get
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_socket
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closed_notice_cb
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_set_info
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwcrypto_register
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pm_device_read
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_control
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send_then_recv
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_configure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_run
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_mst_xfer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_bus_control
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_transfer
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_xfer
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_configure
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_slcd_register
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_slcd_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_control
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_register
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbhost_pm_suspend
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbhost_pm_resume
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_rh_thread_entry
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdh_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_control
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_sof_handler
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_reset_handler
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_out_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_in_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_setup_handler
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_out_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_in_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_disconnect_handler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_connect_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_read_prepare
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_receive
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_dma_transmit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_control
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_configure
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_tx_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_tx_cb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_cb
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hw_uart_dma_allocate
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_run
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eadc_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_get_eadc_value
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_eadc_enabled
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_signal_init
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_thread_entry
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dance_mouse_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_get_id
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_free_id
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_control
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_enable
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_disable
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_add_pipe
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_feature
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_config
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_interface
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_endpoint
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_device
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_config
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_altsetting
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_string
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_qualifier
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_os_comp_id_desc
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_descriptor
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_controller
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_add_config
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_add_function
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_clear_feature
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_read_prepare
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_assign
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_config
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_set_stall
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_enable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_disable
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_clear_stall
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stop_notify
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sof_notify
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_config
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_address
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_request_interface
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_string_descriptor
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_qualifier_descriptor
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_interface
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_device_descriptor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_config_descriptor
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_config
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_request
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep0_out_notify
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_notify
</UL>

<P><STRONG><a name="[3a1]"></a>rt_calloc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, kservice.o(.text.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_start_delay_work
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_add
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_device_class_register
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[5da]"></a>rt_completion_done</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, completion.o(.text.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_done_cb
</UL>

<P><STRONG><a name="[54c]"></a>rt_completion_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, completion.o(.text.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
</UL>

<P><STRONG><a name="[327]"></a>rt_completion_wait</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, completion.o(.text.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_bulk_xfer
</UL>

<P><STRONG><a name="[600]"></a>rt_components_board_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[4e1]"></a>rt_components_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[38a]"></a>rt_console_get_device</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kservice.o(.text.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[5df]"></a>rt_console_set_device</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, kservice.o(.text.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[5e0]"></a>rt_data_queue_deinit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dataqueue.o(.text.rt_data_queue_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_data_queue_deinit &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[5e2]"></a>rt_data_queue_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dataqueue.o(.text.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[5e4]"></a>rt_data_queue_len</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dataqueue.o(.text.rt_data_queue_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[5e5]"></a>rt_data_queue_peek</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, dataqueue.o(.text.rt_data_queue_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_data_queue_peek &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[5e6]"></a>rt_data_queue_pop</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, dataqueue.o(.text.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[323]"></a>rt_data_queue_push</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, dataqueue.o(.text.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[5e1]"></a>rt_data_queue_reset</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, dataqueue.o(.text.rt_data_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_data_queue_reset &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>

<P><STRONG><a name="[3a4]"></a>rt_device_close</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, device.o(.text.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_panel_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
</UL>

<P><STRONG><a name="[3eb]"></a>rt_device_control</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, device.o(.text.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_get
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_panel_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo_rx_entry
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
</UL>

<P><STRONG><a name="[363]"></a>rt_device_find</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(.text.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbd_register
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_panel_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dance_mouse_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
</UL>

<P><STRONG><a name="[5f1]"></a>rt_device_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, device.o(.text.rt_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[399]"></a>rt_device_open</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, device.o(.text.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_panel_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dance_mouse_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
</UL>

<P><STRONG><a name="[5f2]"></a>rt_device_pin_register</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pin.o(.text.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gpio_init
</UL>

<P><STRONG><a name="[393]"></a>rt_device_read</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, device.o(.text.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar_rx_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar_rx_ind
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_irq_rx_entry
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo_rx_entry
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
</UL>

<P><STRONG><a name="[56c]"></a>rt_device_register</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, device.o(.text.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwcrypto_register
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_pm_init
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_slcd_register
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_register
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdh_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbd_register
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
</UL>

<P><STRONG><a name="[38b]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, device.o(.text.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
</UL>

<P><STRONG><a name="[5f4]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, device.o(.text.rt_device_set_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_set_tx_complete &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_thread_entry
</UL>

<P><STRONG><a name="[5f5]"></a>rt_device_unregister</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, device.o(.text.rt_device_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_unregister &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[2a1]"></a>rt_device_write</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, device.o(.text.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLCD_SetPixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_thread_entry
</UL>

<P><STRONG><a name="[351]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
</UL>

<P><STRONG><a name="[3b0]"></a>rt_event_create</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ipc.o(.text.rt_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
</UL>

<P><STRONG><a name="[5f8]"></a>rt_event_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text.rt_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdh_init
</UL>

<P><STRONG><a name="[46e]"></a>rt_event_recv</STRONG> (Thumb, 548 bytes, Stack size 64 bytes, ipc.o(.text.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_event_recv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_hotplugger
</UL>

<P><STRONG><a name="[470]"></a>rt_event_send</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, ipc.o(.text.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_event_send
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_isr
</UL>

<P><STRONG><a name="[354]"></a>rt_exit_critical</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
</UL>

<P><STRONG><a name="[272]"></a>rt_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeaddrinfo
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_update
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_finish
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_reset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_destroy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePipe
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_free_sig
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
</UL>

<P><STRONG><a name="[5fa]"></a>rt_hw_adc_register</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, adc.o(.text.rt_hw_adc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_hw_adc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eadc_init
</UL>

<P><STRONG><a name="[5fb]"></a>rt_hw_board_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_common.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_uart_init &rArr; nu_hw_uart_dma_allocate &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_pincfg_init
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[60d]"></a>rt_hw_console_output</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, kservice.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[5d8]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_common.o(.text.rt_hw_cpu_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_cpu_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[164]"></a>rt_hw_eadc_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_eadc.o(.text.rt_hw_eadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_hw_eadc_init &rArr; rt_hw_adc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eadc.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[161]"></a>rt_hw_gpio_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_gpio.o(.text.rt_hw_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_hw_gpio_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[201]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[16e]"></a>rt_hw_i2c_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_i2c.o(.text.rt_hw_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_hw_i2c_init &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Close
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_i2c.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[170]"></a>rt_hw_pdma_memfun_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_pdma.o(.text.rt_hw_pdma_memfun_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_hw_pdma_memfun_init &rArr; nu_pdma_memfun_actor_init &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_actor_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pdma.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[163]"></a>rt_hw_pm_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_clk.o(.text.rt_hw_pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_hw_pm_init &rArr; rt_system_pm_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_pm_init
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPMUWKSrc
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_clk.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[165]"></a>rt_hw_rtc_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_rtc.o(.text.rt_hw_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_hw_rtc_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[54a]"></a>rt_hw_serial_isr</STRONG> (Thumb, 612 bytes, Stack size 80 bytes, serial.o(.text.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_isr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_tx_cb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_cb
</UL>

<P><STRONG><a name="[608]"></a>rt_hw_serial_register</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, serial.o(.text.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[609]"></a>rt_hw_slcd_register</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, drv_slcd.o(.text.rt_hw_slcd_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_hw_slcd_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_slcd_init
</UL>

<P><STRONG><a name="[342]"></a>rt_hw_stack_init</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[5ff]"></a>rt_hw_uart_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, drv_uart.o(.text.rt_hw_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = rt_hw_uart_init &rArr; nu_hw_uart_dma_allocate &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hw_uart_dma_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[60a]"></a>rt_hw_watchdog_register</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, watchdog.o(.text.rt_hw_watchdog_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdt_init
</UL>

<P><STRONG><a name="[162]"></a>rt_hw_wdt_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_wdt.o(.text.rt_hw_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = rt_hw_wdt_init &rArr; rt_pm_device_register &rArr; rt_realloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_wdt_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[52c]"></a>rt_hwcrypto_register</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, hwcrypto.o(.text.rt_hwcrypto_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_hwcrypto_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_device_init
</UL>

<P><STRONG><a name="[60b]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, i2c_dev.o(.text.rt_i2c_bus_device_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[603]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, i2c_core.o(.text.rt_i2c_bus_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[4c0]"></a>rt_i2c_control</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, i2c_core.o(.text.rt_i2c_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_i2c_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
</UL>

<P><STRONG><a name="[175]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(.text.rt_i2c_core_init))
<BR>[Address Reference Count : 1]<UL><LI> i2c_core.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[4c1]"></a>rt_i2c_master_recv</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, i2c_core.o(.text.rt_i2c_master_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[4c2]"></a>rt_i2c_master_send</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, i2c_core.o(.text.rt_i2c_master_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[4bf]"></a>rt_i2c_transfer</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, i2c_core.o(.text.rt_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>

<P><STRONG><a name="[273]"></a>rt_interrupt_enter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPH_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPG_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPF_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPE_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPD_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPA_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH0_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IRQHandler
</UL>

<P><STRONG><a name="[5de]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[275]"></a>rt_interrupt_leave</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPH_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPG_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPF_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPE_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPD_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPA_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH0_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IRQHandler
</UL>

<P><STRONG><a name="[26c]"></a>rt_kprintf</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_control
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_connect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_close
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_netstat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_info_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_up
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_down
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_ping
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_add
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_device_class_register
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_control
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_socket
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setsockopt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsockopt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_clean
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_end_sign
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_entry
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_writespeed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readspeed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_set
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_dump_status
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptimer_dump
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_control
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_qspi_fast_read_enable
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRPT_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_update
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_finish
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_role
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_wait_ready_with_timeout
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_send_address
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_mst_xfer
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_wdt_init
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_write
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_read
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_xfer
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_configure
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_open
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_utr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_device
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_bulk_xfer
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_unmount
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_mount
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_setup_handler
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbd_register
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_configure
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_signal_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_panel_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_thread_entry
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_usage
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_device
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_done
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_port_reset
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_polling
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_reset
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_TD
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_ED
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_TD
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_ED
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_tc_list
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_help
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_show_data
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo_rx_entry
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_report
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_data
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_register
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_interface
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_endpoint
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_device
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_config
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_altsetting
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_new
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_add_config
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_new
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_string_descriptor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_request
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_notify
</UL>

<P><STRONG><a name="[5c0]"></a>rt_lptimer_next_timeout_tick</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lptimer.o(.text.rt_lptimer_next_timeout_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_lptimer_next_timeout_tick &rArr; rt_list_isempty
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_next_timeout_tick
</UL>

<P><STRONG><a name="[277]"></a>rt_malloc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, kservice.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_update
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_finish
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_create
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFreePipe
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo_rx_entry
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_new
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_new
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
</UL>

<P><STRONG><a name="[3e2]"></a>rt_memcmp</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, kservice.o(.text.rt_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_configure
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_is_mounted
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[2d3]"></a>rt_memcpy</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, kservice.o(.text.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_update
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_finish
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_clone
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_bus_configure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_control
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_setup_handler
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_descriptor
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_add_config
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
</UL>

<P><STRONG><a name="[49a]"></a>rt_memmove</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, kservice.o(.text.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3f0]"></a>rt_memory_info</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, kservice.o(.text.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_memory_info &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_smem_info
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[341]"></a>rt_memset</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwcrypto_register
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_pm_init
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_create
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_actor_init
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_card_detector
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbd_register
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_rtc_set_time
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_rtc_set_date
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdszero
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_new
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_new
</UL>

<P><STRONG><a name="[614]"></a>rt_mp_create</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, mempool.o(.text.rt_mp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_mp_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_signal_init
</UL>

<P><STRONG><a name="[616]"></a>rt_mp_free</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mempool.o(.text.rt_mp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = rt_mp_free &rArr;  rt_schedule (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_handle_sig
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_free_sig
</UL>

<P><STRONG><a name="[618]"></a>rt_mq_create</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, ipc.o(.text.rt_mq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
</UL>

<P><STRONG><a name="[619]"></a>rt_mq_init</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, ipc.o(.text.rt_mq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_mq_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_core_init
</UL>

<P><STRONG><a name="[4b2]"></a>rt_mq_recv</STRONG> (Thumb, 648 bytes, Stack size 72 bytes, ipc.o(.text.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_thread_entry
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_thread_entry
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
</UL>

<P><STRONG><a name="[2d4]"></a>rt_mq_send</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ipc.o(.text.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>

<P><STRONG><a name="[61a]"></a>rt_mq_send_wait</STRONG> (Thumb, 608 bytes, Stack size 64 bytes, ipc.o(.text.rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[377]"></a>rt_mutex_create</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ipc.o(.text.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_actor_init
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_slcd_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_register
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[3a3]"></a>rt_mutex_delete</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ipc.o(.text.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[61b]"></a>rt_mutex_detach</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ipc.o(.text.rt_mutex_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_mutex_detach &rArr; _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
</UL>

<P><STRONG><a name="[2e7]"></a>rt_mutex_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(.text.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crypto_init
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_init
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
</UL>

<P><STRONG><a name="[2e9]"></a>rt_mutex_release</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, ipc.o(.text.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_employ
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_run
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_rh_thread_entry
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_run
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
</UL>

<P><STRONG><a name="[2e5]"></a>rt_mutex_take</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, ipc.o(.text.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_employ
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_run
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_slcd_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_rh_thread_entry
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_run
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>

<P><STRONG><a name="[5f7]"></a>rt_object_allocate</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[5ee]"></a>rt_object_delete</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[5ed]"></a>rt_object_detach</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[5f0]"></a>rt_object_find</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, object.o(.text.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[421]"></a>rt_object_get_information</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[5ef]"></a>rt_object_get_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(.text.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>

<P><STRONG><a name="[5f3]"></a>rt_object_init</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
</UL>

<P><STRONG><a name="[5ec]"></a>rt_object_is_systemobject</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
</UL>

<P><STRONG><a name="[4df]"></a>rt_pin_mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pin.o(.text.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_esp8266_port
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4e0]"></a>rt_pin_write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pin.o(.text.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_esp8266_port
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[56f]"></a>rt_pm_device_register</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, pm.o(.text.rt_pm_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_pm_device_register &rArr; rt_realloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdt_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_register
</UL>

<P><STRONG><a name="[302]"></a>rt_pm_enter_critical</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pm.o(.text.rt_pm_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pm_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[305]"></a>rt_pm_exit_critical</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, drv_clk.o(.text.rt_pm_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_pm_exit_critical &rArr; __NVIC_ClearPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetWakeupFlag
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetIntFlag
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearWakeupFlag
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[610]"></a>rt_pm_module_delay_sleep</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, pm.o(.text.rt_pm_module_delay_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pm_module_delay_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_delay_sleep
</UL>

<P><STRONG><a name="[611]"></a>rt_pm_module_release</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_module_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_pm_module_release
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_release_mode
</UL>

<P><STRONG><a name="[612]"></a>rt_pm_module_release_all</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_module_release_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_pm_module_release_all
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_release_mode_all
</UL>

<P><STRONG><a name="[613]"></a>rt_pm_module_request</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_module_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_pm_module_request
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_module_request_mode
</UL>

<P><STRONG><a name="[318]"></a>rt_pm_release</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_pm_release
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pm_device_write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pm_device_control
</UL>

<P><STRONG><a name="[623]"></a>rt_pm_release_all</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_release_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_pm_release_all
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_mode_all
</UL>

<P><STRONG><a name="[317]"></a>rt_pm_request</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_pm_request
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request_mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pm_device_write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pm_device_control
</UL>

<P><STRONG><a name="[624]"></a>rt_pm_run_enter</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, pm.o(.text.rt_pm_run_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_pm_run_enter &rArr; _pm_device_frequency_change
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_frequency_change
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_mode_switch
</UL>

<P><STRONG><a name="[5cc]"></a>rt_pwm_disable</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, rt_drv_pwm.o(.text.rt_pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_pwm_disable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[5cd]"></a>rt_pwm_enable</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, rt_drv_pwm.o(.text.rt_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_pwm_enable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>

<P><STRONG><a name="[5ce]"></a>rt_pwm_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rt_drv_pwm.o(.text.rt_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_pwm_get &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
</UL>

<P><STRONG><a name="[5d2]"></a>rt_pwm_set</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, rt_drv_pwm.o(.text.rt_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>

<P><STRONG><a name="[625]"></a>rt_qspi_configure</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, qspi_core.o(.text.rt_qspi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_qspi_configure &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[627]"></a>rt_qspi_send</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, qspi_core.o(.text.rt_qspi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = rt_qspi_send &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[628]"></a>rt_qspi_send_then_recv</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, qspi_core.o(.text.rt_qspi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = rt_qspi_send_then_recv &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[5d3]"></a>rt_qspi_transfer_message</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, qspi_core.o(.text.rt_qspi_transfer_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send_then_recv
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
</UL>

<P><STRONG><a name="[3bb]"></a>rt_realloc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, kservice.o(.text.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_realloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_set_info
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_device_register
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
</UL>

<P><STRONG><a name="[38f]"></a>rt_ringbuffer_create</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ringbuffer.o(.text.rt_ringbuffer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_ringbuffer_create &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[62b]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ringbuffer.o(.text.rt_ringbuffer_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_data_len &rArr; rt_ringbuffer_status
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>

<P><STRONG><a name="[38d]"></a>rt_ringbuffer_destroy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ringbuffer.o(.text.rt_ringbuffer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_ringbuffer_destroy &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[3e6]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ringbuffer.o(.text.rt_ringbuffer_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ringbuffer_getchar &rArr; rt_ringbuffer_data_len &rArr; rt_ringbuffer_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar
</UL>

<P><STRONG><a name="[62a]"></a>rt_ringbuffer_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ringbuffer.o(.text.rt_ringbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_ringbuffer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
</UL>

<P><STRONG><a name="[3e7]"></a>rt_ringbuffer_put_force</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, ringbuffer.o(.text.rt_ringbuffer_put_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_ringbuffer_put_force &rArr; rt_ringbuffer_data_len &rArr; rt_ringbuffer_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar_rx_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar_rx_ind
</UL>

<P><STRONG><a name="[2d0]"></a>rt_schedule</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_handle_sig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[62d]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[33d]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[396]"></a>rt_sem_control</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ipc.o(.text.rt_sem_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_sem_control &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[379]"></a>rt_sem_create</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ipc.o(.text.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_actor_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[37a]"></a>rt_sem_delete</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[38c]"></a>rt_sem_detach</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_sem_detach &rArr; _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[38e]"></a>rt_sem_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdh_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_thread_entry
</UL>

<P><STRONG><a name="[353]"></a>rt_sem_release</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closed_notice_cb
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_rx_ind
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar_rx_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar_rx_ind
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_cb
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_hid_in
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_callback
</UL>

<P><STRONG><a name="[395]"></a>rt_sem_take</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_employ
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_thread_entry
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_irq_rx_entry
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo_rx_entry
</UL>

<P><STRONG><a name="[352]"></a>rt_sem_trytake</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_trytake))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
</UL>

<P><STRONG><a name="[31f]"></a>rt_set_errno</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(.text.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_mst_xfer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_read
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[635]"></a>rt_sfud_flash_delete</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_flash_sfud.o(.text.rt_sfud_flash_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_sfud_flash_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[636]"></a>rt_sfud_flash_probe</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, spi_flash_sfud.o(.text.rt_sfud_flash_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[637]"></a>rt_sfud_flash_probe_ex</STRONG> (Thumb, 688 bytes, Stack size 80 bytes, spi_flash_sfud.o(.text.rt_sfud_flash_probe_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_sfud_flash_probe_ex &rArr; sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_configure
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_qspi_fast_read_enable
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
</UL>

<P><STRONG><a name="[63c]"></a>rt_show_version</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[60e]"></a>rt_smem_alloc</STRONG> (Thumb, 648 bytes, Stack size 48 bytes, mem.o(.text.rt_smem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_smem_alloc &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
</UL>

<P><STRONG><a name="[5f9]"></a>rt_smem_free</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, mem.o(.text.rt_smem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
</UL>

<P><STRONG><a name="[63d]"></a>rt_smem_init</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, mem.o(.text.rt_smem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_smem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[629]"></a>rt_smem_realloc</STRONG> (Thumb, 492 bytes, Stack size 64 bytes, mem.o(.text.rt_smem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_smem_realloc &rArr; rt_smem_alloc &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[319]"></a>rt_snprintf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, kservice.o(.text.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_pm_device_read
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_hook
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[63e]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_dev.o(.text.rt_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[55f]"></a>rt_spi_bus_register</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, spi_core.o(.text.rt_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_register_bus
</UL>

<P><STRONG><a name="[626]"></a>rt_spi_configure</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, spi_core.o(.text.rt_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_configure
</UL>

<P><STRONG><a name="[641]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, spi_core.o(.text.rt_spi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[338]"></a>rt_spi_transfer</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, spi_core.o(.text.rt_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_recv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[454]"></a>rt_sprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, kservice.o(.text.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[391]"></a>rt_strcmp</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, kservice.o(.text.rt_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
</UL>

<P><STRONG><a name="[439]"></a>rt_strdup</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, kservice.o(.text.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
</UL>

<P><STRONG><a name="[728]"></a>strdup</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, kservice.o(.text.rt_strdup), UNUSED)

<P><STRONG><a name="[27f]"></a>rt_strlen</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text.rt_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_is_mounted
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLIB_Printf
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_string_descriptor
</UL>

<P><STRONG><a name="[3ad]"></a>rt_strncmp</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, kservice.o(.text.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[420]"></a>rt_strncpy</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
</UL>

<P><STRONG><a name="[3e8]"></a>rt_strstr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, kservice.o(.text.rt_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_strstr &rArr; rt_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[5fe]"></a>rt_system_heap_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, kservice.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_system_heap_init &rArr; rt_smem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[606]"></a>rt_system_pm_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, pm.o(.text.rt_system_pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_system_pm_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pm_init
</UL>

<P><STRONG><a name="[643]"></a>rt_system_power_manager</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pm.o(.text.rt_system_power_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_system_power_manager &rArr; _pm_change_sleep_mode &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[644]"></a>rt_system_scheduler_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_scheduler_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[646]"></a>rt_system_scheduler_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[648]"></a>rt_system_signal_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, signal.o(.text.rt_system_signal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_system_signal_init &rArr; rt_mp_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[649]"></a>rt_system_timer_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[6b0]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2c2]"></a>rt_thread_control</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, thread.o(.text.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>

<P><STRONG><a name="[3a2]"></a>rt_thread_create</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
</UL>

<P><STRONG><a name="[5ea]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_thread_defunct_dequeue &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[33e]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, idle.o(.text.rt_thread_defunct_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_thread_defunct_enqueue &rArr; rt_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[2ff]"></a>rt_thread_delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_delay_100us
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_int_xfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_hotplugger
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[3e5]"></a>rt_thread_delete</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[64a]"></a>rt_thread_detach</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[5eb]"></a>rt_thread_free_sig</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, signal.o(.text.rt_thread_free_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_thread_free_sig &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[62f]"></a>rt_thread_handle_sig</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, signal.o(.text.rt_thread_handle_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_thread_handle_sig &rArr; rt_mp_free &rArr;  rt_schedule (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[64e]"></a>rt_thread_idle_init</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[64f]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_idle_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_thread_idle_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_init
</UL>

<P><STRONG><a name="[416]"></a>rt_thread_init</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnt_init_sdcard_hotplug
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dance_mouse_init
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_core_init
</UL>

<P><STRONG><a name="[45b]"></a>rt_thread_mdelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_domain_resolve
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_delay_ms
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_rh_thread_entry
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_thread_entry
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
</UL>

<P><STRONG><a name="[2ce]"></a>rt_thread_resume</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbhost_pm_resume
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>

<P><STRONG><a name="[2c1]"></a>rt_thread_self</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_handle_sig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
</UL>

<P><STRONG><a name="[64d]"></a>rt_thread_sleep</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[39a]"></a>rt_thread_startup</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnt_init_sdcard_hotplug
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dance_mouse_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_int
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_core_init
</UL>

<P><STRONG><a name="[2f1]"></a>rt_thread_suspend</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbhost_pm_suspend
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[93]"></a>rt_thread_timeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[394]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_close
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dhcp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_addr_info
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_tick_from_millisecond
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[308]"></a>rt_tick_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_delay_sleep
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_check_idle
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lptimer_next_timeout_tick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_wait_ready_with_timeout
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_ticks
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_hook
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[2a9]"></a>rt_tick_increase</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[30e]"></a>rt_tick_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock.o(.text.rt_tick_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tick_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[310]"></a>rt_timer_check</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[34d]"></a>rt_timer_control</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[2cb]"></a>rt_timer_detach</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[343]"></a>rt_timer_init</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[5bf]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text.rt_timer_next_timeout_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_timer_next_timeout_tick &rArr; _timer_list_next_timeout &rArr; rt_list_isempty
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_next_timeout_tick
</UL>

<P><STRONG><a name="[34e]"></a>rt_timer_start</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[34c]"></a>rt_timer_stop</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>

<P><STRONG><a name="[653]"></a>rt_udisk_run</STRONG> (Thumb, 1092 bytes, Stack size 232 bytes, udisk.o(.text.rt_udisk_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = rt_udisk_run &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_get_id
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
</UL>

<P><STRONG><a name="[65b]"></a>rt_udisk_stop</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, udisk.o(.text.rt_udisk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_udisk_stop &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_free_id
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
</UL>

<P><STRONG><a name="[56d]"></a>rt_usb_device_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, usbdevice.o(.text.rt_usb_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usb_device_init &rArr; rt_usbd_core_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_config
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_os_comp_id_desc
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_descriptor
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_controller
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_new
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_add_config
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_core_init
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_new
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_add_function
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbd_register
</UL>

<P><STRONG><a name="[300]"></a>rt_usb_hcd_pipe_xfer</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, usbhost_core.o(.text.rt_usb_hcd_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[56e]"></a>rt_usb_host_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usbhost.o(.text.rt_usb_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = rt_usb_host_init &rArr; rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_storage
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_register
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_init
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_hub
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_register
</UL>

<P><STRONG><a name="[672]"></a>rt_usbd_altsetting_add_endpoint</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_altsetting_add_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_altsetting_add_endpoint &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[674]"></a>rt_usbd_altsetting_config_descriptor</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_altsetting_config_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_usbd_altsetting_config_descriptor &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[675]"></a>rt_usbd_altsetting_new</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_altsetting_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_usbd_altsetting_new &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[167]"></a>rt_usbd_class_list_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbdevice.o(.text.rt_usbd_class_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_usbd_class_list_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[677]"></a>rt_usbd_class_register</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbdevice.o(.text.rt_usbd_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_usbd_class_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_hid_class_register
</UL>

<P><STRONG><a name="[339]"></a>rt_usbd_clear_feature</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_usbd_clear_feature &rArr; dcd_ep_clear_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[665]"></a>rt_usbd_config_add_function</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_config_add_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_config_add_function &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[663]"></a>rt_usbd_config_new</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_config_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_usbd_config_new &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[2b7]"></a>rt_usbd_connect_handler</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbd_connect_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[660]"></a>rt_usbd_core_init</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, usbdevice_core.o(.text.rt_usbd_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_usbd_core_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[667]"></a>rt_usbd_device_add_config</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, usbdevice_core.o(.text.rt_usbd_device_add_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_usbd_device_add_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_assign
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[661]"></a>rt_usbd_device_new</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_device_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_usbd_device_new &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[662]"></a>rt_usbd_device_set_controller</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_device_set_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_device_set_controller &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[666]"></a>rt_usbd_device_set_descriptor</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_device_set_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_usbd_device_set_descriptor &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[664]"></a>rt_usbd_device_set_os_comp_id_desc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_device_set_os_comp_id_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_device_set_os_comp_id_desc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
</UL>

<P><STRONG><a name="[67b]"></a>rt_usbd_device_set_qualifier</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_device_set_qualifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_device_set_qualifier &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[67c]"></a>rt_usbd_device_set_string</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_device_set_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_device_set_string &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[2b8]"></a>rt_usbd_disconnect_handler</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbd_disconnect_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[67d]"></a>rt_usbd_endpoint_new</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_endpoint_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_usbd_endpoint_new &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[2bc]"></a>rt_usbd_ep0_in_handler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_ep0_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_usbd_ep0_in_handler &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[2bd]"></a>rt_usbd_ep0_out_handler</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_ep0_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbd_ep0_out_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[2d2]"></a>rt_usbd_ep0_read</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_ep0_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_usbd_ep0_read &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep0_out_notify
</UL>

<P><STRONG><a name="[2d8]"></a>rt_usbd_ep0_set_stall</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_ep0_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_usbd_ep0_set_stall &rArr; dcd_ep_set_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_config
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_string_descriptor
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_qualifier_descriptor
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_interface
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_request
</UL>

<P><STRONG><a name="[2bb]"></a>rt_usbd_ep0_setup_handler</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, usbdevice_core.o(.text.rt_usbd_ep0_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = rt_usbd_ep0_setup_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[2db]"></a>rt_usbd_ep0_write</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_ep0_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_usbd_ep0_write &rArr; dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_string_descriptor
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_qualifier_descriptor
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_interface
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_device_descriptor
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_config_descriptor
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_config
</UL>

<P><STRONG><a name="[2be]"></a>rt_usbd_ep_in_handler</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbdevice_core.o(.text.rt_usbd_ep_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_usbd_ep_in_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>rt_usbd_ep_out_handler</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbdevice_core.o(.text.rt_usbd_ep_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_usbd_ep_out_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[679]"></a>rt_usbd_event_signal</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_event_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_sof_handler
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_reset_handler
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_out_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_in_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_setup_handler
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_out_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_disconnect_handler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_connect_handler
</UL>

<P><STRONG><a name="[680]"></a>rt_usbd_find_altsetting</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_find_altsetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_usbd_find_altsetting &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
</UL>

<P><STRONG><a name="[681]"></a>rt_usbd_find_config</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_find_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_usbd_find_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_config
</UL>

<P><STRONG><a name="[682]"></a>rt_usbd_find_device</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_find_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_usbd_find_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
</UL>

<P><STRONG><a name="[2c6]"></a>rt_usbd_find_endpoint</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, usbdevice_core.o(.text.rt_usbd_find_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_usbd_find_endpoint &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_notify
</UL>

<P><STRONG><a name="[2d9]"></a>rt_usbd_find_interface</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, usbdevice_core.o(.text.rt_usbd_find_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_usbd_find_interface &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_request_interface
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_interface
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_request
</UL>

<P><STRONG><a name="[683]"></a>rt_usbd_function_add_interface</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_function_add_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_function_add_interface &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[5]"></a>rt_usbd_function_hid_create</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, hid.o(.text.rt_usbd_function_hid_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_usbd_function_hid_create &rArr; rt_usb_hid_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_descriptor_config
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_string
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_qualifier
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.data.hid_class)
</UL>
<P><STRONG><a name="[684]"></a>rt_usbd_function_new</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_function_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_usbd_function_new &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[16b]"></a>rt_usbd_hid_class_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hid.o(.text.rt_usbd_hid_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_usbd_hid_class_register &rArr; rt_usbd_class_register &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[687]"></a>rt_usbd_interface_add_altsetting</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbdevice_core.o(.text.rt_usbd_interface_add_altsetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_interface_add_altsetting &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[685]"></a>rt_usbd_interface_new</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_interface_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_usbd_interface_new &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[2d5]"></a>rt_usbd_io_request</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_io_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_read_prepare
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_write
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[2ba]"></a>rt_usbd_reset_handler</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbd_reset_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[332]"></a>rt_usbd_set_altsetting</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_set_altsetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_usbd_set_altsetting &rArr; rt_usbd_find_altsetting &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_altsetting
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
</UL>

<P><STRONG><a name="[32e]"></a>rt_usbd_set_config</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_usbd_set_config &rArr; rt_usbd_find_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_config
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_config
</UL>

<P><STRONG><a name="[33a]"></a>rt_usbd_set_feature</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_set_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_usbd_set_feature &rArr; dcd_ep_set_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[2b9]"></a>rt_usbd_sof_handler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbd_sof_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_IRQHandler
</UL>

<P><STRONG><a name="[688]"></a>rt_usbh_alloc_instance</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, usbhost_core.o(.text.rt_usbh_alloc_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_usbh_alloc_instance &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[68a]"></a>rt_usbh_attatch_instance</STRONG> (Thumb, 912 bytes, Stack size 2136 bytes, usbhost_core.o(.text.rt_usbh_attatch_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 2596<LI>Call Chain = rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_enable
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_add_pipe
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[694]"></a>rt_usbh_class_driver_disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, driver.o(.text.rt_usbh_class_driver_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbh_class_driver_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
</UL>

<P><STRONG><a name="[693]"></a>rt_usbh_class_driver_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, driver.o(.text.rt_usbh_class_driver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbh_class_driver_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[692]"></a>rt_usbh_class_driver_find</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, driver.o(.text.rt_usbh_class_driver_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_usbh_class_driver_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[66f]"></a>rt_usbh_class_driver_hub</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hub.o(.text.rt_usbh_class_driver_hub))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[66c]"></a>rt_usbh_class_driver_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, driver.o(.text.rt_usbh_class_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_usbh_class_driver_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[66e]"></a>rt_usbh_class_driver_register</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, driver.o(.text.rt_usbh_class_driver_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_usbh_class_driver_register &rArr; rt_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[66d]"></a>rt_usbh_class_driver_storage</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mass.o(.text.rt_usbh_class_driver_storage))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[2fe]"></a>rt_usbh_clear_feature</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, usbhost_core.o(.text.rt_usbh_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_usbh_clear_feature &rArr; rt_usb_hcd_setup_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
</UL>

<P><STRONG><a name="[698]"></a>rt_usbh_detach_instance</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, usbhost_core.o(.text.rt_usbh_detach_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbh_detach_instance &rArr; rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_disable
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
</UL>

<P><STRONG><a name="[4c5]"></a>rt_usbh_event_signal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hub.o(.text.rt_usbh_event_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_disconnect_handler
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_connect_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_xfer_done_cb
</UL>

<P><STRONG><a name="[68b]"></a>rt_usbh_get_descriptor</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, usbhost_core.o(.text.rt_usbh_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_usbh_get_descriptor &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[691]"></a>rt_usbh_get_endpoint_descriptor</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, usbhost_core.o(.text.rt_usbh_get_endpoint_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_usbh_get_endpoint_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[690]"></a>rt_usbh_get_interface_descriptor</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, usbhost_core.o(.text.rt_usbh_get_interface_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_usbh_get_interface_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[68d]"></a>rt_usbh_hub_clear_port_feature</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, hub.o(.text.rt_usbh_hub_clear_port_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_usbh_hub_clear_port_feature &rArr; root_hub_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[69c]"></a>rt_usbh_hub_get_descriptor</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, hub.o(.text.rt_usbh_hub_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_usbh_hub_get_descriptor &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[6a0]"></a>rt_usbh_hub_get_port_status</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, hub.o(.text.rt_usbh_hub_get_port_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_usbh_hub_get_port_status &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[66b]"></a>rt_usbh_hub_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hub.o(.text.rt_usbh_hub_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[6a2]"></a>rt_usbh_hub_port_debounce</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, hub.o(.text.rt_usbh_hub_port_debounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_usbh_hub_port_debounce &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[68c]"></a>rt_usbh_hub_reset_port</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, hub.o(.text.rt_usbh_hub_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_usbh_hub_reset_port &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[69d]"></a>rt_usbh_hub_set_port_feature</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, hub.o(.text.rt_usbh_hub_set_port_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_usbh_hub_set_port_feature &rArr; root_hub_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[525]"></a>rt_usbh_root_hub_connect_handler</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, hub.o(.text.rt_usbh_root_hub_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_connect_callback
</UL>

<P><STRONG><a name="[526]"></a>rt_usbh_root_hub_disconnect_handler</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, hub.o(.text.rt_usbh_root_hub_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbh_root_hub_disconnect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_disconnect_callback
</UL>

<P><STRONG><a name="[68e]"></a>rt_usbh_set_address</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, usbhost_core.o(.text.rt_usbh_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_usbh_set_address &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[68f]"></a>rt_usbh_set_configure</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usbhost_core.o(.text.rt_usbh_set_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_usbh_set_configure &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[659]"></a>rt_usbh_storage_get_capacity</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, mass.o(.text.rt_usbh_storage_get_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usbh_storage_get_capacity &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[655]"></a>rt_usbh_storage_get_max_lun</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, mass.o(.text.rt_usbh_storage_get_max_lun))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_usbh_storage_get_max_lun &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[656]"></a>rt_usbh_storage_inquiry</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, mass.o(.text.rt_usbh_storage_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usbh_storage_inquiry &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[652]"></a>rt_usbh_storage_read10</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, mass.o(.text.rt_usbh_storage_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_usbh_storage_read10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[658]"></a>rt_usbh_storage_request_sense</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, mass.o(.text.rt_usbh_storage_request_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usbh_storage_request_sense &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[654]"></a>rt_usbh_storage_reset</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, mass.o(.text.rt_usbh_storage_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_usbh_storage_reset &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[657]"></a>rt_usbh_storage_test_unit_ready</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, mass.o(.text.rt_usbh_storage_test_unit_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usbh_storage_test_unit_ready &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[65d]"></a>rt_usbh_storage_write10</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, mass.o(.text.rt_usbh_storage_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_usbh_storage_write10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
</UL>

<P><STRONG><a name="[60c]"></a>rt_vsnprintf</STRONG> (Thumb, 1596 bytes, Stack size 104 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[642]"></a>rt_vsprintf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kservice.o(.text.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[46c]"></a>rt_work_submit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, workqueue.o(.text.rt_work_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_start_delay_work
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[6aa]"></a>rt_workqueue_create</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, workqueue.o(.text.rt_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
</UL>

<P><STRONG><a name="[6a9]"></a>rt_workqueue_submit_work</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, workqueue.o(.text.rt_workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
</UL>

<P><STRONG><a name="[315]"></a>rt_wqueue_add</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, waitqueue.o(.text.rt_wqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_wqueue_add &rArr; rt_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</UL>

<P><STRONG><a name="[5c9]"></a>rt_wqueue_remove</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, waitqueue.o(.text.rt_wqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_wqueue_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
</UL>

<P><STRONG><a name="[3b1]"></a>rt_wqueue_wakeup</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, waitqueue.o(.text.rt_wqueue_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
</UL>

<P><STRONG><a name="[261]"></a>rtthread_startup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; rt_hw_uart_init &rArr; nu_hw_uart_dma_allocate &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_signal_init
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35c]"></a>sal_accept</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, sal_socket.o(.text.sal_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = sal_accept &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[468]"></a>sal_at_netdev_set_pf_info</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, af_inet_at.o(.text.sal_at_netdev_set_pf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sal_at_netdev_set_pf_info &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_add
</UL>

<P><STRONG><a name="[3d0]"></a>sal_bind</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, sal_socket.o(.text.sal_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sal_bind &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sockaddr_to_ipaddr
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[4f6]"></a>sal_check_netdev_internet_up</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_check_netdev_internet_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
</UL>

<P><STRONG><a name="[35e]"></a>sal_closesocket</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sal_socket.o(.text.sal_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_close
</UL>

<P><STRONG><a name="[402]"></a>sal_connect</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sal_socket.o(.text.sal_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sal_connect &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[3bc]"></a>sal_get_socket</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_listen
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
</UL>

<P><STRONG><a name="[4a7]"></a>sal_gethostbyname</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sal_gethostbyname &rArr; netdev_get_first_by_flags &rArr; rt_slist_next
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[178]"></a>sal_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = sal_init &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[43f]"></a>sal_ioctlsocket</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sal_socket.o(.text.sal_ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sal_ioctlsocket &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</UL>

<P><STRONG><a name="[4d8]"></a>sal_listen</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, sal_socket.o(.text.sal_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sal_listen &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[440]"></a>sal_poll</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sal_socket.o(.text.sal_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sal_poll &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
</UL>

<P><STRONG><a name="[441]"></a>sal_recvfrom</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sal_socket.o(.text.sal_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sal_recvfrom &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
</UL>

<P><STRONG><a name="[442]"></a>sal_sendto</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sal_socket.o(.text.sal_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sal_sendto &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
</UL>

<P><STRONG><a name="[6b6]"></a>sal_setsockopt</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sal_socket.o(.text.sal_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sal_setsockopt &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[6b7]"></a>sal_socket</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, sal_socket.o(.text.sal_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[4cd]"></a>select</STRONG> (Thumb, 744 bytes, Stack size 56 bytes, select.o(.text.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = select &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdszero
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
</UL>

<P><STRONG><a name="[4cb]"></a>send</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, net_sockets.o(.text.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
</UL>

<P><STRONG><a name="[4cf]"></a>sendto</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, net_sockets.o(.text.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sendto &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
</UL>

<P><STRONG><a name="[419]"></a>set_date</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, rtc.o(.text.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = set_date &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_rtc_set_date
</UL>

<P><STRONG><a name="[418]"></a>set_time</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, rtc.o(.text.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_rtc_set_time
</UL>

<P><STRONG><a name="[4c9]"></a>setsockopt</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_sockets.o(.text.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = setsockopt &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
</UL>

<P><STRONG><a name="[6bc]"></a>sfud_chip_erase</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, sfud.o(.text.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[638]"></a>sfud_device_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sfud.o(.text.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[634]"></a>sfud_erase</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, sfud.o(.text.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>

<P><STRONG><a name="[63b]"></a>sfud_erase_write</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sfud.o(.text.sfud_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
</UL>

<P><STRONG><a name="[639]"></a>sfud_qspi_fast_read_enable</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, sfud.o(.text.sfud_qspi_fast_read_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = sfud_qspi_fast_read_enable &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_set_read_cmd_format
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[63a]"></a>sfud_read</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, sfud.o(.text.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
</UL>

<P><STRONG><a name="[4ae]"></a>sfud_read_sfdp</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sfud_sfdp.o(.text.sfud_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[6ba]"></a>sfud_read_status</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sfud.o(.text.sfud_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>

<P><STRONG><a name="[6be]"></a>sfud_sfdp_get_suitable_eraser</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, sfud_sfdp.o(.text.sfud_sfdp_get_suitable_eraser))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = sfud_sfdp_get_suitable_eraser &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[4ac]"></a>sfud_spi_port_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_flash_sfud.o(.text.sfud_spi_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfud_spi_port_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[6bb]"></a>sfud_write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sfud.o(.text.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>

<P><STRONG><a name="[4b0]"></a>sfud_write_status</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, sfud.o(.text.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[f3]"></a>slcd_demo_hook</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, slcd_show_tick.o(.text.slcd_demo_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = slcd_demo_hook &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLIB_SetSymbol
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLIB_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slcd_show_tick.o(.text.slcd_demo_init)
</UL>
<P><STRONG><a name="[4c7]"></a>socket</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, net_sockets.o(.text.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_server
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_client
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client
</UL>

<P><STRONG><a name="[3f9]"></a>stat</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dfs_posix.o(.text.stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
</UL>

<P><STRONG><a name="[2b5]"></a>td_done</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, ohci.o(.text.td_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = td_done &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ohci_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IRQHandler
</UL>

<P><STRONG><a name="[417]"></a>time</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, time.o(.text.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slcd_demo_hook
</UL>

<P><STRONG><a name="[433]"></a>timegm</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, time.o(.text.timegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_is_date_valid
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_control
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[4da]"></a>tz_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(.text.tz_get))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[4aa]"></a>tz_is_dst</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(.text.tz_is_dst))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[3f5]"></a>unlink</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dfs_posix.o(.text.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[507]"></a>usbh_bulk_xfer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_bulk_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_bulk_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_bulk_xfer
</UL>

<P><STRONG><a name="[5b2]"></a>usbh_connect_device</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_connect_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = usbh_connect_device &rArr; usbh_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_polling
</UL>

<P><STRONG><a name="[527]"></a>usbh_core_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_core_init &rArr; usbh_memory_init
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_memory_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_init
</UL>

<P><STRONG><a name="[518]"></a>usbh_ctrl_xfer</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, usb_core.o(.text.usbh_ctrl_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = usbh_ctrl_xfer &rArr; alloc_utr &rArr; malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_tick_from_millisecond
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_quit_utr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_ticks
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_utr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_utr
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctrl_xfer
</UL>

<P><STRONG><a name="[36a]"></a>usbh_delay_ms</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_usbhost.o(.text.usbh_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = usbh_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_connect_device
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_reset
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_ED_remove_list
</UL>

<P><STRONG><a name="[5b1]"></a>usbh_disconnect_device</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_disconnect_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = usbh_disconnect_device &rArr; free_device &rArr; usbh_free_mem &rArr; free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_quit_xfer
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_polling
</UL>

<P><STRONG><a name="[49f]"></a>usbh_free_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mem_alloc.o(.text.usbh_free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = usbh_free_mem &rArr; free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_device
</UL>

<P><STRONG><a name="[5b4]"></a>usbh_get_ticks</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_usbhost.o(.text.usbh_get_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_get_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctrl_xfer
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_port_reset
</UL>

<P><STRONG><a name="[528]"></a>usbh_install_conn_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(.text.usbh_install_conn_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_install_conn_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_init
</UL>

<P><STRONG><a name="[532]"></a>usbh_int_xfer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_int_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_int_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_int_xfer
</UL>

<P><STRONG><a name="[6cc]"></a>usbh_memory_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mem_alloc.o(.text.usbh_memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_memory_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[570]"></a>usbh_polling_root_hubs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_polling_root_hubs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_polling_root_hubs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_usbh_rh_thread_entry
</UL>

<P><STRONG><a name="[54d]"></a>usbh_quit_utr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_quit_utr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_quit_utr
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctrl_xfer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
</UL>

<P><STRONG><a name="[50b]"></a>usbh_quit_xfer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_quit_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_quit_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hcd_disconnect_callback
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_close_pipe
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_device
</UL>

<P><STRONG><a name="[54e]"></a>usbh_reset_port</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usb_core.o(.text.usbh_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_reset_port
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_reset_port
</UL>

<P><STRONG><a name="[5b3]"></a>usbh_tick_from_millisecond</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_usbhost.o(.text.usbh_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbh_tick_from_millisecond &rArr; rt_tick_from_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctrl_xfer
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_port_reset
</UL>

<P><STRONG><a name="[179]"></a>utest_init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, utest.o(.text.utest_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = utest_init &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1b0]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[3ef]"></a>write</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, dfs_posix.o(.text.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = write &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[3fe]"></a>writespeed</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, writespeed.o(.text.writespeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = writespeed &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_writespeed
</UL>

<P><STRONG><a name="[255]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[241]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6d5]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[6d7]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[24f]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[6d8]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[25c]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[230]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6d9]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[6dd]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[89]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1f5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[6da]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[6de]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[6dc]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[6df]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[6c5]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
</UL>

<P><STRONG><a name="[6e0]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[6c4]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
</UL>

<P><STRONG><a name="[729]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[72a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[6e2]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1d4]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[248]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[24e]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[24d]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[181]"></a>cmd_readspeed</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, readspeed.o(.text.cmd_readspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = cmd_readspeed &rArr; readspeed &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> readspeed.o(FSymTab)
</UL>
<P><STRONG><a name="[182]"></a>cmd_writespeed</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, writespeed.o(.text.cmd_writespeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = cmd_writespeed &rArr; writespeed &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> writespeed.o(FSymTab)
</UL>
<P><STRONG><a name="[183]"></a>at</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, at_cli.o(.text.at))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = at &rArr; client_cli_parser &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get_first
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(FSymTab)
</UL>
<P><STRONG><a name="[9b]"></a>at_client_entry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at_cli.o(.text.at_client_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_client_entry &rArr; client_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(.text.client_cli_parser)
</UL>
<P><STRONG><a name="[384]"></a>client_cli_parser</STRONG> (Thumb, 392 bytes, Stack size 128 bytes, at_cli.o(.text.client_cli_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = client_cli_parser &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[390]"></a>client_getchar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cli.o(.text.client_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = client_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_entry
</UL>

<P><STRONG><a name="[9a]"></a>client_getchar_rx_ind</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, at_cli.o(.text.client_getchar_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = client_getchar_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(.text.client_cli_parser)
</UL>
<P><STRONG><a name="[3e4]"></a>console_getchar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cli.o(.text.console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = console_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[95]"></a>console_getchar_rx_ind</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, at_cli.o(.text.console_getchar_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = console_getchar_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(.text.at_cli_init)
</UL>
<P><STRONG><a name="[392]"></a>at_client_getchar</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, at_client.o(.text.at_client_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_client_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[398]"></a>at_client_para_init</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, at_client.o(.text.at_client_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = at_client_para_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
</UL>

<P><STRONG><a name="[96]"></a>at_client_rx_ind</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, at_client.o(.text.at_client_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = at_client_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_client.o(.text.at_client_init)
</UL>
<P><STRONG><a name="[3bf]"></a>at_recv_readline</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, at_client.o(.text.at_recv_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = at_recv_readline &rArr; at_client_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[97]"></a>client_parser</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, at_client.o(.text.client_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = client_parser &rArr; at_recv_readline &rArr; at_client_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_client.o(.text.at_client_para_init)
</UL>
<P><STRONG><a name="[3c0]"></a>get_urc_obj</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, at_client.o(.text.get_urc_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_urc_obj &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[36d]"></a>alloc_empty_socket</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, at_socket.o(.text.alloc_empty_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = alloc_empty_socket &rArr; rt_slist_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_insert
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>

<P><STRONG><a name="[372]"></a>alloc_socket</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, at_socket.o(.text.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = alloc_socket &rArr; alloc_socket_by_device &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_family_get
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_socket
</UL>

<P><STRONG><a name="[376]"></a>alloc_socket_by_device</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, at_socket.o(.text.alloc_socket_by_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = alloc_socket_by_device &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[99]"></a>at_closed_notice_cb</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, at_socket.o(.text.at_closed_notice_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = at_closed_notice_cb &rArr; at_do_event_changes &rArr; rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket.o(.text.at_socket)
</UL>
<P><STRONG><a name="[3a5]"></a>at_do_event_changes</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, at_socket.o(.text.at_do_event_changes))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = at_do_event_changes &rArr; rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closed_notice_cb
</UL>

<P><STRONG><a name="[3b2]"></a>at_do_event_clean</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, at_socket.o(.text.at_do_event_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = at_do_event_clean &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
</UL>

<P><STRONG><a name="[98]"></a>at_recv_notice_cb</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, at_socket.o(.text.at_recv_notice_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = at_recv_notice_cb &rArr; at_recvpkt_put &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket.o(.text.at_socket)
</UL>
<P><STRONG><a name="[3c3]"></a>at_recvpkt_all_delete</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, at_socket.o(.text.at_recvpkt_all_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = at_recvpkt_all_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[3c1]"></a>at_recvpkt_get</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, at_socket.o(.text.at_recvpkt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = at_recvpkt_get &rArr; at_recvpkt_node_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
</UL>

<P><STRONG><a name="[3c6]"></a>at_recvpkt_node_delete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, at_socket.o(.text.at_recvpkt_node_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = at_recvpkt_node_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
</UL>

<P><STRONG><a name="[3be]"></a>at_recvpkt_put</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at_socket.o(.text.at_recvpkt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = at_recvpkt_put &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
</UL>

<P><STRONG><a name="[3a6]"></a>free_socket</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, at_socket.o(.text.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = free_socket &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_shutdown
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
</UL>

<P><STRONG><a name="[3a7]"></a>ipaddr_to_ipstr</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, at_socket.o(.text.ipaddr_to_ipstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ipaddr_to_ipstr &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
</UL>

<P><STRONG><a name="[4d1]"></a>ipstr_atol</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, at_socket.o(.text.ipstr_atol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipstr_atol &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
</UL>

<P><STRONG><a name="[3b5]"></a>ipstr_to_u32</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, at_socket.o(.text.ipstr_to_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipstr_to_u32 &rArr; ipstr_atol &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_atol
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
</UL>

<P><STRONG><a name="[6ad]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, at_socket.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
</UL>

<P><STRONG><a name="[3c8]"></a>rt_slist_append</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, at_socket.o(.text.rt_slist_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
</UL>

<P><STRONG><a name="[3c4]"></a>rt_slist_first</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, at_socket.o(.text.rt_slist_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
</UL>

<P><STRONG><a name="[36e]"></a>rt_slist_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, at_socket.o(.text.rt_slist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
</UL>

<P><STRONG><a name="[36f]"></a>rt_slist_insert</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_socket.o(.text.rt_slist_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_slist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
</UL>

<P><STRONG><a name="[3c2]"></a>rt_slist_isempty</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, at_socket.o(.text.rt_slist_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
</UL>

<P><STRONG><a name="[3c5]"></a>rt_slist_next</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, at_socket.o(.text.rt_slist_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
</UL>

<P><STRONG><a name="[3c7]"></a>rt_slist_remove</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at_socket.o(.text.rt_slist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_slist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
</UL>

<P><STRONG><a name="[378]"></a>rt_wqueue_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_socket.o(.text.rt_wqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_wqueue_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>

<P><STRONG><a name="[388]"></a>socketaddr_to_ipaddr_port</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_socket.o(.text.socketaddr_to_ipaddr_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = socketaddr_to_ipaddr_port
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
</UL>

<P><STRONG><a name="[139]"></a>esp8266_control</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, at_device_esp8266.o(.text.esp8266_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = esp8266_control &rArr; esp8266_reset &rArr; esp8266_net_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_info_set
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_device_ops)
</UL>
<P><STRONG><a name="[138]"></a>esp8266_deinit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, at_device_esp8266.o(.text.esp8266_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = esp8266_deinit &rArr; esp8266_netdev_set_down &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_device_ops)
</UL>
<P><STRONG><a name="[16c]"></a>esp8266_device_class_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at_device_esp8266.o(.text.esp8266_device_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = esp8266_device_class_register &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_class_register
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[9e]"></a>esp8266_get_netdev_info</STRONG> (Thumb, 844 bytes, Stack size 320 bytes, at_device_esp8266.o(.text.esp8266_get_netdev_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = esp8266_get_netdev_info &rArr; esp8266_netdev_set_dns_server &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dhcp_status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_dns_server
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.text.esp8266_netdev_start_delay_work)
</UL>
<P><STRONG><a name="[137]"></a>esp8266_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, at_device_esp8266.o(.text.esp8266_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = esp8266_init &rArr; at_client_init &rArr; at_client_para_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_up
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_add
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_device_ops)
</UL>
<P><STRONG><a name="[9d]"></a>esp8266_init_thread_entry</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, at_device_esp8266.o(.text.esp8266_init_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = esp8266_init_thread_entry &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_start_delay_work
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_set_info
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.text.esp8266_net_init)
</UL>
<P><STRONG><a name="[466]"></a>esp8266_net_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, at_device_esp8266.o(.text.esp8266_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = esp8266_net_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_set_up
</UL>

<P><STRONG><a name="[462]"></a>esp8266_netdev_add</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, at_device_esp8266.o(.text.esp8266_netdev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = esp8266_netdev_add &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_at_netdev_set_pf_info
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[13f]"></a>esp8266_netdev_ping</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, at_device_esp8266.o(.text.esp8266_netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = esp8266_netdev_ping &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_netdev_ops)
</UL>
<P><STRONG><a name="[13c]"></a>esp8266_netdev_set_addr_info</STRONG> (Thumb, 472 bytes, Stack size 104 bytes, at_device_esp8266.o(.text.esp8266_netdev_set_addr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = esp8266_netdev_set_addr_info &rArr; netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_netdev_ops)
</UL>
<P><STRONG><a name="[13e]"></a>esp8266_netdev_set_dhcp</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, at_device_esp8266.o(.text.esp8266_netdev_set_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = esp8266_netdev_set_dhcp &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dhcp_status
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_netdev_ops)
</UL>
<P><STRONG><a name="[13d]"></a>esp8266_netdev_set_dns_server</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, at_device_esp8266.o(.text.esp8266_netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = esp8266_netdev_set_dns_server &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netdev_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_netdev_ops)
</UL>
<P><STRONG><a name="[13b]"></a>esp8266_netdev_set_down</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at_device_esp8266.o(.text.esp8266_netdev_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = esp8266_netdev_set_down &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_netdev_ops)
</UL>
<P><STRONG><a name="[13a]"></a>esp8266_netdev_set_up</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at_device_esp8266.o(.text.esp8266_netdev_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = esp8266_netdev_set_up &rArr; esp8266_net_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.esp8266_netdev_ops)
</UL>
<P><STRONG><a name="[465]"></a>esp8266_netdev_start_delay_work</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at_device_esp8266.o(.text.esp8266_netdev_start_delay_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = esp8266_netdev_start_delay_work &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init_thread_entry
</UL>

<P><STRONG><a name="[458]"></a>esp8266_reset</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, at_device_esp8266.o(.text.esp8266_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = esp8266_reset &rArr; esp8266_net_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_control
</UL>

<P><STRONG><a name="[459]"></a>esp8266_wifi_info_set</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, at_device_esp8266.o(.text.esp8266_wifi_info_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = esp8266_wifi_info_set &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_control
</UL>

<P><STRONG><a name="[6a6]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, at_device_esp8266.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
</UL>

<P><STRONG><a name="[46b]"></a>rt_work_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, at_device_esp8266.o(.text.rt_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_work_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_start_delay_work
</UL>

<P><STRONG><a name="[158]"></a>urc_busy_p_func</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, at_device_esp8266.o(.text.urc_busy_p_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = urc_busy_p_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[159]"></a>urc_busy_s_func</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, at_device_esp8266.o(.text.urc_busy_s_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = urc_busy_s_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[15a]"></a>urc_func</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, at_device_esp8266.o(.text.urc_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = urc_func &rArr; netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netdev_start_delay_work
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp8266.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[144]"></a>esp8266_domain_resolve</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, at_socket_esp8266.o(.text.esp8266_domain_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = esp8266_domain_resolve &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.esp8266_socket_ops)
</UL>
<P><STRONG><a name="[142]"></a>esp8266_socket_close</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, at_socket_esp8266.o(.text.esp8266_socket_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = esp8266_socket_close &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.esp8266_socket_ops)
</UL>
<P><STRONG><a name="[141]"></a>esp8266_socket_connect</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, at_socket_esp8266.o(.text.esp8266_socket_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = esp8266_socket_connect &rArr; esp8266_socket_close &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_close
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.esp8266_socket_ops)
</UL>
<P><STRONG><a name="[46d]"></a>esp8266_socket_event_recv</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, at_socket_esp8266.o(.text.esp8266_socket_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = esp8266_socket_event_recv &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_send
</UL>

<P><STRONG><a name="[46f]"></a>esp8266_socket_event_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at_socket_esp8266.o(.text.esp8266_socket_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = esp8266_socket_event_send &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
</UL>

<P><STRONG><a name="[143]"></a>esp8266_socket_send</STRONG> (Thumb, 504 bytes, Stack size 72 bytes, at_socket_esp8266.o(.text.esp8266_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = esp8266_socket_send &rArr; at_create_resp &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_event_recv
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_end_sign
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.esp8266_socket_ops)
</UL>
<P><STRONG><a name="[145]"></a>esp8266_socket_set_event_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_socket_esp8266.o(.text.esp8266_socket_set_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = esp8266_socket_set_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.esp8266_socket_ops)
</UL>
<P><STRONG><a name="[15d]"></a>urc_close_func</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, at_socket_esp8266.o(.text.urc_close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = urc_close_func &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[15e]"></a>urc_recv_func</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, at_socket_esp8266.o(.text.urc_recv_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = urc_recv_func &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[15c]"></a>urc_send_bfsz_func</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, at_socket_esp8266.o(.text.urc_send_bfsz_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = urc_send_bfsz_func &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[15b]"></a>urc_send_func</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, at_socket_esp8266.o(.text.urc_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = urc_send_func &rArr; esp8266_socket_event_send &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_socket_event_send
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp8266.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[3a8]"></a>at_device_class_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at_device.o(.text.at_device_class_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_device_class_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
</UL>

<P><STRONG><a name="[3ab]"></a>rt_slist_append</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, at_device.o(.text.rt_slist_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
</UL>

<P><STRONG><a name="[3aa]"></a>rt_slist_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, at_device.o(.text.rt_slist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
</UL>

<P><STRONG><a name="[184]"></a>at_wifi_set</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, board_dev.o(.text.at_wifi_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = at_wifi_set &rArr; at_device_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_control
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_dev.o(FSymTab)
</UL>
<P><STRONG><a name="[17b]"></a>rt_hw_esp8266_port</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, board_dev.o(.text.rt_hw_esp8266_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rt_hw_esp8266_port &rArr; at_device_register &rArr; rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_dev.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[596]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nutool_modclkcfg.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[572]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nutool_modclkcfg.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nutool_modclkcfg_init
</UL>

<P><STRONG><a name="[ce]"></a>i2c_bus_device_control</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, i2c_dev.o(.text.i2c_bus_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[cc]"></a>i2c_bus_device_read</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, i2c_dev.o(.text.i2c_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[cd]"></a>i2c_bus_device_write</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, i2c_dev.o(.text.i2c_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[b6]"></a>_adc_control</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, adc.o(.text._adc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _adc_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.text.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[b5]"></a>_adc_read</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, adc.o(.text._adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _adc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.text.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[186]"></a>adc</STRONG> (Thumb, 492 bytes, Stack size 96 bytes, adc.o(.text.adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = adc &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(FSymTab)
</UL>
<P><STRONG><a name="[188]"></a>pwm_disable</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rt_drv_pwm.o(.text.pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = pwm_disable &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[187]"></a>pwm_enable</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rt_drv_pwm.o(.text.pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = pwm_enable &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[18a]"></a>pwm_get</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, rt_drv_pwm.o(.text.pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = pwm_get &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_get
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[189]"></a>pwm_set</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, rt_drv_pwm.o(.text.pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = pwm_set &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[b4]"></a>_pin_control</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, pin.o(.text._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[b2]"></a>_pin_read</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, pin.o(.text._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[b3]"></a>_pin_write</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, pin.o(.text._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[4dc]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lptimer.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lptimer_next_timeout_tick
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptimer_dump
</UL>

<P><STRONG><a name="[313]"></a>_judge_sleep_mode</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, pm.o(.text._judge_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _judge_sleep_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_select_sleep_mode
</UL>

<P><STRONG><a name="[301]"></a>_pm_change_sleep_mode</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, pm.o(.text._pm_change_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _pm_change_sleep_mode &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_enter_critical
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_next_timeout_tick
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_sleep_threshold_mode
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_lptimer_stop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_lptimer_start
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_lptimer_get_timeout
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_select_sleep_mode
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_suspend
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_resume
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_check_idle
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_power_manager
</UL>

<P><STRONG><a name="[304]"></a>_pm_device_check_idle</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pm.o(.text._pm_device_check_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pm_device_check_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[312]"></a>_pm_device_frequency_change</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pm.o(.text._pm_device_frequency_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pm_device_frequency_change
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
</UL>

<P><STRONG><a name="[30f]"></a>_pm_device_resume</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pm.o(.text._pm_device_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pm_device_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[306]"></a>_pm_device_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pm.o(.text._pm_device_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pm_device_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[311]"></a>_pm_frequency_scaling</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pm.o(.text._pm_frequency_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _pm_frequency_scaling &rArr; _pm_device_frequency_change
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_frequency_change
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_power_manager
</UL>

<P><STRONG><a name="[303]"></a>_pm_select_sleep_mode</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pm.o(.text._pm_select_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pm_select_sleep_mode &rArr; _judge_sleep_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_judge_sleep_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[d7]"></a>_rt_pm_device_control</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, pm.o(.text._rt_pm_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _rt_pm_device_control &rArr; rt_pm_request
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(.text.rt_system_pm_init)
</UL>
<P><STRONG><a name="[d5]"></a>_rt_pm_device_read</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, pm.o(.text._rt_pm_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _rt_pm_device_read &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(.text.rt_system_pm_init)
</UL>
<P><STRONG><a name="[d6]"></a>_rt_pm_device_write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, pm.o(.text._rt_pm_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _rt_pm_device_write &rArr; rt_pm_request
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(.text.rt_system_pm_init)
</UL>
<P><STRONG><a name="[30c]"></a>pm_lptimer_get_timeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pm.o(.text.pm_lptimer_get_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_lptimer_get_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[30a]"></a>pm_lptimer_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pm.o(.text.pm_lptimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_lptimer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[30d]"></a>pm_lptimer_stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pm.o(.text.pm_lptimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_lptimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[30b]"></a>pm_sleep</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pm.o(.text.pm_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[192]"></a>rt_module_delay_sleep</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pm.o(.text.rt_module_delay_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_module_delay_sleep &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_delay_sleep
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[18f]"></a>rt_module_release_mode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pm.o(.text.rt_module_release_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_module_release_mode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_release
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[190]"></a>rt_module_release_mode_all</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pm.o(.text.rt_module_release_mode_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_module_release_mode_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_release_all
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[191]"></a>rt_module_request_mode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pm.o(.text.rt_module_request_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_module_request_mode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_module_request
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[194]"></a>rt_pm_dump_status</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_dump_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_pm_dump_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[18c]"></a>rt_pm_release_mode</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_release_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_pm_release_mode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[18d]"></a>rt_pm_release_mode_all</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_release_mode_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_pm_release_mode_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_all
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[18e]"></a>rt_pm_request_mode</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_request_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_pm_request_mode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[193]"></a>rt_pm_run_mode_switch</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pm.o(.text.rt_pm_run_mode_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_pm_run_mode_switch &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[195]"></a>date</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, rtc.o(.text.date))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = date &rArr; set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[31d]"></a>_serial_check_buffer_size</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, serial.o(.text._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
</UL>

<P><STRONG><a name="[31e]"></a>_serial_dma_rx</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, serial.o(.text._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[322]"></a>_serial_dma_tx</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, serial.o(.text._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[324]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, serial.o(.text._serial_fifo_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[325]"></a>_serial_int_rx</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, serial.o(.text._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[326]"></a>_serial_int_tx</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, serial.o(.text._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[328]"></a>_serial_poll_rx</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, serial.o(.text._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[329]"></a>_serial_poll_tx</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, serial.o(.text._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[320]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, serial.o(.text.rt_dma_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[321]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, serial.o(.text.rt_dma_recv_update_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[5f6]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, serial.o(.text.rt_dma_recv_update_put_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[c0]"></a>rt_serial_close</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, serial.o(.text.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_serial_close &rArr; rt_data_queue_deinit &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c3]"></a>rt_serial_control</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, serial.o(.text.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[be]"></a>rt_serial_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(.text.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bf]"></a>rt_serial_open</STRONG> (Thumb, 928 bytes, Stack size 56 bytes, serial.o(.text.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c1]"></a>rt_serial_read</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, serial.o(.text.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c2]"></a>rt_serial_write</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, serial.o(.text.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[355]"></a>aai_write</STRONG> (Thumb, 544 bytes, Stack size 72 bytes, sfud.o(.text.aai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[4ab]"></a>hardware_init</STRONG> (Thumb, 832 bytes, Stack size 32 bytes, sfud.o(.text.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[358]"></a>make_adress_byte_array</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, sfud.o(.text.make_adress_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = make_adress_byte_array &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[356]"></a>page256_or_1_byte_write</STRONG> (Thumb, 564 bytes, Stack size 64 bytes, sfud.o(.text.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[6bf]"></a>qspi_set_read_cmd_format</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, sfud.o(.text.qspi_set_read_cmd_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qspi_set_read_cmd_format
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_qspi_fast_read_enable
</UL>

<P><STRONG><a name="[4ad]"></a>read_jedec_id</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, sfud.o(.text.read_jedec_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = read_jedec_id &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[4af]"></a>reset</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, sfud.o(.text.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = reset &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[4b1]"></a>set_4_byte_address_mode</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, sfud.o(.text.set_4_byte_address_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[357]"></a>set_write_enabled</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, sfud.o(.text.set_write_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[6bd]"></a>software_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sfud.o(.text.software_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = software_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[359]"></a>wait_busy</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sfud.o(.text.wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[5d4]"></a>read_basic_header</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, sfud_sfdp.o(.text.read_basic_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = read_basic_header &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[5d6]"></a>read_basic_table</STRONG> (Thumb, 1520 bytes, Stack size 136 bytes, sfud_sfdp.o(.text.read_basic_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[5d5]"></a>read_sfdp_data</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, sfud_sfdp.o(.text.read_sfdp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>

<P><STRONG><a name="[5d7]"></a>read_sfdp_header</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, sfud_sfdp.o(.text.read_sfdp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = read_sfdp_header &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[d4]"></a>_spi_bus_device_control</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_dev.o(.text._spi_bus_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _spi_bus_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[d2]"></a>_spi_bus_device_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, spi_dev.o(.text._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[d3]"></a>_spi_bus_device_write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, spi_dev.o(.text._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[ef]"></a>qspi_read</STRONG> (Thumb, 220 bytes, Stack size 96 bytes, spi_flash_sfud.o(.text.qspi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = qspi_read &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[f2]"></a>retry_delay_100us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash_sfud.o(.text.retry_delay_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = retry_delay_100us &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[d1]"></a>rt_sfud_control</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, spi_flash_sfud.o(.text.rt_sfud_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_sfud_control &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[cf]"></a>rt_sfud_read</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, spi_flash_sfud.o(.text.rt_sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_sfud_read &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[d0]"></a>rt_sfud_write</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, spi_flash_sfud.o(.text.rt_sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_sfud_write &rArr; sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[63f]"></a>rt_spi_recv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, spi_flash_sfud.o(.text.rt_spi_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_spi_recv &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[640]"></a>rt_spi_send</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, spi_flash_sfud.o(.text.rt_spi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_spi_send &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[196]"></a>sf</STRONG> (Thumb, 1924 bytes, Stack size 152 bytes, spi_flash_sfud.o(.text.sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = sf &rArr; rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(FSymTab)
</UL>
<P><STRONG><a name="[f0]"></a>spi_lock</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, spi_flash_sfud.o(.text.spi_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = spi_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[f1]"></a>spi_unlock</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_flash_sfud.o(.text.spi_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = spi_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[ee]"></a>spi_write_read</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, spi_flash_sfud.o(.text.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = spi_write_read &rArr; rt_qspi_send_then_recv &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_recv
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send_then_recv
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[94]"></a>_delayed_work_timeout_handler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, workqueue.o(.text._delayed_work_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _delayed_work_timeout_handler &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.text._workqueue_submit_work)
</UL>
<P><STRONG><a name="[34b]"></a>_workqueue_submit_work</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, workqueue.o(.text._workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>

<P><STRONG><a name="[e9]"></a>_workqueue_thread_entry</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, workqueue.o(.text._workqueue_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _workqueue_thread_entry &rArr; _workqueue_work_completion &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.text.rt_workqueue_create)
</UL>
<P><STRONG><a name="[350]"></a>_workqueue_work_completion</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, workqueue.o(.text._workqueue_work_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _workqueue_work_completion &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[6ab]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, workqueue.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>

<P><STRONG><a name="[2cd]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, workqueue.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
</UL>

<P><STRONG><a name="[34f]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, workqueue.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[2cc]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, workqueue.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
</UL>

<P><STRONG><a name="[169]"></a>rt_work_sys_workqueue_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, workqueue.o(.text.rt_work_sys_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = rt_work_sys_workqueue_init &rArr; rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[5e3]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dataqueue.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[5e7]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dataqueue.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[5e8]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dataqueue.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[6ac]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, waitqueue.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
</UL>

<P><STRONG><a name="[6af]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, waitqueue.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</UL>

<P><STRONG><a name="[6ae]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, waitqueue.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>

<P><STRONG><a name="[5dc]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, completion.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>

<P><STRONG><a name="[5dd]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, completion.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[5db]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, completion.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[62c]"></a>rt_ringbuffer_status</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ringbuffer.o(.text.rt_ringbuffer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[ca]"></a>rt_watchdog_close</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, watchdog.o(.text.rt_watchdog_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_watchdog_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(.text.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[cb]"></a>rt_watchdog_control</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, watchdog.o(.text.rt_watchdog_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_watchdog_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(.text.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[c8]"></a>rt_watchdog_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, watchdog.o(.text.rt_watchdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_watchdog_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(.text.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[c9]"></a>rt_watchdog_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, watchdog.o(.text.rt_watchdog_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_watchdog_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(.text.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[88]"></a>SPD_Next</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_m2354.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2354.o(.text)
</UL>
<P><STRONG><a name="[564]"></a>nu_get16_le</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_spi.o(.text.nu_get16_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_get16_le
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_write
</UL>

<P><STRONG><a name="[563]"></a>nu_get24_le</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_spi.o(.text.nu_get24_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_get24_le
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_write
</UL>

<P><STRONG><a name="[562]"></a>nu_get32_le</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_spi.o(.text.nu_get32_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_get32_le
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_write
</UL>

<P><STRONG><a name="[55d]"></a>nu_set16_le</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_spi.o(.text.nu_set16_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_set16_le
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_read
</UL>

<P><STRONG><a name="[55c]"></a>nu_set24_le</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_spi.o(.text.nu_set24_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_set24_le
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_read
</UL>

<P><STRONG><a name="[55b]"></a>nu_set32_le</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_spi.o(.text.nu_set32_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_set32_le
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_read
</UL>

<P><STRONG><a name="[d]"></a>nu_spi_bus_configure</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, drv_spi.o(.text.nu_spi_bus_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = nu_spi_bus_configure &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_drain_rxfifo
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data.nu_spi_poll_ops)
</UL>
<P><STRONG><a name="[e]"></a>nu_spi_bus_xfer</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, drv_spi.o(.text.nu_spi_bus_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = nu_spi_bus_xfer &rArr; nu_spi_transfer &rArr; nu_spi_transmission_with_poll &rArr; nu_spi_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data.nu_spi_poll_ops)
</UL>
<P><STRONG><a name="[55a]"></a>nu_spi_read</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, drv_spi.o(.text.nu_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = nu_spi_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_set32_le
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_set24_le
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_set16_le
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_transmission_with_poll
</UL>

<P><STRONG><a name="[55e]"></a>nu_spi_register_bus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_spi.o(.text.nu_spi_register_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = nu_spi_register_bus &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[560]"></a>nu_spi_transmission_with_poll</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, drv_spi.o(.text.nu_spi_transmission_with_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = nu_spi_transmission_with_poll &rArr; nu_spi_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_drain_rxfifo
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_write
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_transfer
</UL>

<P><STRONG><a name="[561]"></a>nu_spi_write</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, drv_spi.o(.text.nu_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = nu_spi_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_get32_le
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_get24_le
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_get16_le
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_transmission_with_poll
</UL>

<P><STRONG><a name="[16d]"></a>rt_hw_spi_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_spi.o(.text.rt_hw_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_hw_spi_init &rArr; nu_spi_register_bus &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_spi_register_bus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[521]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_gpio.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_irq_enable
</UL>

<P><STRONG><a name="[514]"></a>nu_cto</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_gpio.o(.text.nu_cto))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nu_cto &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_attach_irq
</UL>

<P><STRONG><a name="[515]"></a>nu_ctz</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, drv_gpio.o(.text.nu_ctz))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_detach_irq
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_find_irqindex
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_cto
</UL>

<P><STRONG><a name="[51b]"></a>nu_find_irqindex</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_gpio.o(.text.nu_find_irqindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_irq_enable
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_attach_irq
</UL>

<P><STRONG><a name="[9]"></a>nu_gpio_attach_irq</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, drv_gpio.o(.text.nu_gpio_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nu_gpio_attach_irq &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_port_check
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_find_irqindex
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_cto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.data.nu_gpio_ops)
</UL>
<P><STRONG><a name="[a]"></a>nu_gpio_detach_irq</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, drv_gpio.o(.text.nu_gpio_detach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nu_gpio_detach_irq &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_port_check
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.data.nu_gpio_ops)
</UL>
<P><STRONG><a name="[b]"></a>nu_gpio_irq_enable</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, drv_gpio.o(.text.nu_gpio_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nu_gpio_irq_enable &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInt
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_port_check
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_find_irqindex
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.data.nu_gpio_ops)
</UL>
<P><STRONG><a name="[6]"></a>nu_gpio_mode</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, drv_gpio.o(.text.nu_gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nu_gpio_mode &rArr; GPIO_SetPullCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullCtl
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_port_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.data.nu_gpio_ops)
</UL>
<P><STRONG><a name="[c]"></a>nu_gpio_pin_get</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, drv_gpio.o(.text.nu_gpio_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nu_gpio_pin_get &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.data.nu_gpio_ops)
</UL>
<P><STRONG><a name="[8]"></a>nu_gpio_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_gpio.o(.text.nu_gpio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nu_gpio_read &rArr; nu_port_check
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_port_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.data.nu_gpio_ops)
</UL>
<P><STRONG><a name="[7]"></a>nu_gpio_write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, drv_gpio.o(.text.nu_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nu_gpio_write &rArr; nu_port_check
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_port_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.data.nu_gpio_ops)
</UL>
<P><STRONG><a name="[51f]"></a>nu_port_check</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, drv_gpio.o(.text.nu_port_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_port_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_write
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_read
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_mode
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_irq_enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_detach_irq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_gpio_attach_irq
</UL>

<P><STRONG><a name="[274]"></a>pin_irq_hdr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, drv_gpio.o(.text.pin_irq_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pin_irq_hdr &rArr; nu_find_irqindex &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_find_irqindex
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPH_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPG_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPF_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPE_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPD_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPA_IRQHandler
</UL>

<P><STRONG><a name="[4bd]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_wdt.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_pm_suspend
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_pm_resume
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_wdt_init
</UL>

<P><STRONG><a name="[4bc]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_wdt.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_pm_suspend
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_pm_resume
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_wdt_init
</UL>

<P><STRONG><a name="[6d3]"></a>WDT_Close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_wdt.o(.text.WDT_Close))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[6d2]"></a>WDT_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_wdt.o(.text.WDT_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[4be]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_wdt.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_wdt_init
</UL>

<P><STRONG><a name="[4bb]"></a>hw_wdt_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, drv_wdt.o(.text.hw_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = hw_wdt_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdt_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[6d0]"></a>soft_time_feed_dog</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, drv_wdt.o(.text.soft_time_feed_dog))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = soft_time_feed_dog
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[6c2]"></a>soft_time_freqeucy_change</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, drv_wdt.o(.text.soft_time_freqeucy_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = soft_time_freqeucy_change &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_pm_frequency_change
</UL>

<P><STRONG><a name="[6c7]"></a>soft_time_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_wdt.o(.text.soft_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = soft_time_init &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[6c8]"></a>soft_time_setup</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, drv_wdt.o(.text.soft_time_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = soft_time_setup &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[26]"></a>wdt_control</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, drv_wdt.o(.text.wdt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wdt_control &rArr; wdt_get_working_hz &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_get_working_hz
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_setup
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_feed_dog
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_EnableInt
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Close
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.data.ops_wdt)
</UL>
<P><STRONG><a name="[6d4]"></a>wdt_get_module_clock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_wdt.o(.text.wdt_get_module_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wdt_get_module_clock &rArr; CLK_GetModuleClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_pm_frequency_change
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_get_working_hz
</UL>

<P><STRONG><a name="[6cf]"></a>wdt_get_working_hz</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, drv_wdt.o(.text.wdt_get_working_hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wdt_get_working_hz &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_get_module_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_pm_frequency_change
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[25]"></a>wdt_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_wdt.o(.text.wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = wdt_init &rArr; hw_wdt_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_init
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_wdt_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.data.ops_wdt)
</UL>
<P><STRONG><a name="[2]"></a>wdt_pm_frequency_change</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, drv_wdt.o(.text.wdt_pm_frequency_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = wdt_pm_frequency_change &rArr; soft_time_freqeucy_change &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_get_working_hz
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_get_module_clock
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_freqeucy_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.data.device_pm_ops)
</UL>
<P><STRONG><a name="[1]"></a>wdt_pm_resume</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_wdt.o(.text.wdt_pm_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wdt_pm_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.data.device_pm_ops)
</UL>
<P><STRONG><a name="[0]"></a>wdt_pm_suspend</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, drv_wdt.o(.text.wdt_pm_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wdt_pm_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.data.device_pm_ops)
</UL>
<P><STRONG><a name="[530]"></a>I2C_STOP</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, drv_i2c.o(.text.I2C_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_mst_xfer
</UL>

<P><STRONG><a name="[604]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_i2c.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[601]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_i2c.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[14f]"></a>nu_i2c_bus_control</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_i2c.o(.text.nu_i2c_bus_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nu_i2c_bus_control &rArr; I2C_SetBusClockFreq &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBusClockFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_i2c.o(.rodata.nu_i2c_ops)
</UL>
<P><STRONG><a name="[14e]"></a>nu_i2c_mst_xfer</STRONG> (Thumb, 768 bytes, Stack size 64 bytes, drv_i2c.o(.text.nu_i2c_mst_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = nu_i2c_mst_xfer &rArr; nu_i2c_send_address &rArr; nu_i2c_send_data &rArr; nu_i2c_wait_ready_with_timeout &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_wait_ready_with_timeout
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_send_data
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_send_address
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_i2c.o(.rodata.nu_i2c_ops)
</UL>
<P><STRONG><a name="[52e]"></a>nu_i2c_send_address</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, drv_i2c.o(.text.nu_i2c_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = nu_i2c_send_address &rArr; nu_i2c_send_data &rArr; nu_i2c_wait_ready_with_timeout &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_wait_ready_with_timeout
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_mst_xfer
</UL>

<P><STRONG><a name="[52f]"></a>nu_i2c_send_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_i2c.o(.text.nu_i2c_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = nu_i2c_send_data &rArr; nu_i2c_wait_ready_with_timeout &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_wait_ready_with_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_send_address
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_mst_xfer
</UL>

<P><STRONG><a name="[52d]"></a>nu_i2c_wait_ready_with_timeout</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_i2c.o(.text.nu_i2c_wait_ready_with_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = nu_i2c_wait_ready_with_timeout &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_send_data
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_send_address
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_i2c_mst_xfer
</UL>

<P><STRONG><a name="[4b7]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_clk.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_run
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[4b4]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_clk.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_run
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[2a5]"></a>SysTick_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_clk.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_run
</UL>

<P><STRONG><a name="[61f]"></a>TIMER_ClearIntFlag</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
</UL>

<P><STRONG><a name="[621]"></a>TIMER_ClearWakeupFlag</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_ClearWakeupFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ClearWakeupFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
</UL>

<P><STRONG><a name="[4b8]"></a>TIMER_EnableInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[4b9]"></a>TIMER_EnableWakeup</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_EnableWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_EnableWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[5be]"></a>TIMER_GetCounter</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_get_tick
</UL>

<P><STRONG><a name="[61e]"></a>TIMER_GetIntFlag</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
</UL>

<P><STRONG><a name="[620]"></a>TIMER_GetWakeupFlag</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_GetWakeupFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_GetWakeupFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
</UL>

<P><STRONG><a name="[5c3]"></a>TIMER_ResetCounter</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_ResetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ResetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_stop
</UL>

<P><STRONG><a name="[5c1]"></a>TIMER_Start</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_start
</UL>

<P><STRONG><a name="[5c2]"></a>TIMER_Stop</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, drv_clk.o(.text.TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_stop
</UL>

<P><STRONG><a name="[622]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_clk.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
</UL>

<P><STRONG><a name="[4ba]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_clk.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_init
</UL>

<P><STRONG><a name="[2a6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_clk.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[4b3]"></a>hw_timer_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_clk.o(.text.hw_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hw_timer_init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableWakeup
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pm_init
</UL>

<P><STRONG><a name="[5b5]"></a>os_tick_from_pm_tick</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_clk.o(.text.os_tick_from_pm_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_tick_from_pm_tick &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_get_tick
</UL>

<P><STRONG><a name="[1f]"></a>pm_run</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, drv_clk.o(.text.pm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pm_run &rArr; CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_clk.o(.data.ops)
</UL>
<P><STRONG><a name="[1e]"></a>pm_sleep</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, drv_clk.o(.text.pm_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_sleep &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPowerDownMode
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PowerDown
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_clk.o(.data.ops)
</UL>
<P><STRONG><a name="[5bd]"></a>pm_tick_from_os_tick</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_clk.o(.text.pm_tick_from_os_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pm_tick_from_os_tick &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_timer_start
</UL>

<P><STRONG><a name="[22]"></a>pm_timer_get_tick</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_clk.o(.text.pm_timer_get_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pm_timer_get_tick &rArr; os_tick_from_pm_tick &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_pm_tick
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_clk.o(.data.ops)
</UL>
<P><STRONG><a name="[20]"></a>pm_timer_start</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, drv_clk.o(.text.pm_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pm_timer_start &rArr; pm_tick_from_os_tick &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_tick_from_os_tick
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_clk.o(.data.ops)
</UL>
<P><STRONG><a name="[21]"></a>pm_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_clk.o(.text.pm_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pm_timer_stop &rArr; TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_clk.o(.data.ops)
</UL>
<P><STRONG><a name="[5fd]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_common.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[5fc]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_common.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2a7]"></a>SysTick_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_common.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2a8]"></a>__NVIC_SetPriority</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_common.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[197]"></a>reboot</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_common.o(.text.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reboot &rArr; rt_hw_cpu_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(FSymTab)
</UL>
<P><STRONG><a name="[5b9]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_otg.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otg_init
</UL>

<P><STRONG><a name="[5b6]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_otg.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otg_init
</UL>

<P><STRONG><a name="[5b7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_otg.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otg_init
</UL>

<P><STRONG><a name="[5b8]"></a>_usb_init_delay</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, drv_otg.o(.text._usb_init_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _usb_init_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otg_init
</UL>

<P><STRONG><a name="[16f]"></a>otg_init</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, drv_otg.o(.text.otg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = otg_init &rArr; _usb_init_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_init_delay
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_otg.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[198]"></a>usb_role</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, drv_otg.o(.text.usb_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = usb_role &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_otg.o(FSymTab)
</UL>
<P><STRONG><a name="[50e]"></a>nu_crc_run</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, drv_crc.o(.text.nu_crc_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = nu_crc_run &rArr; nu_pdma_mempush &rArr; nu_pdma_memfun &rArr; nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_mempush
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Open
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crc_update
</UL>

<P><STRONG><a name="[53d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_pdma.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
</UL>

<P><STRONG><a name="[2f9]"></a>_nu_pdma_transfer</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, drv_pdma.o(.text._nu_pdma_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _nu_pdma_transfer &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Trigger
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_timeout_set
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_transfer
</UL>

<P><STRONG><a name="[516]"></a>nu_cto</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_pdma.o(.text.nu_cto))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nu_cto &rArr; nu_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_employ
</UL>

<P><STRONG><a name="[285]"></a>nu_ctz</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, drv_pdma.o(.text.nu_ctz))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_cto
</UL>

<P><STRONG><a name="[537]"></a>nu_pdma_channel_enable</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_pdma.o(.text.nu_pdma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nu_pdma_channel_enable &rArr; PDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
</UL>

<P><STRONG><a name="[53b]"></a>nu_pdma_channel_memctrl_fill</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_pdma.o(.text.nu_pdma_channel_memctrl_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nu_pdma_channel_memctrl_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_desc_setup
</UL>

<P><STRONG><a name="[536]"></a>nu_pdma_channel_reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_pdma.o(.text.nu_pdma_channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nu_pdma_channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_terminate
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
</UL>

<P><STRONG><a name="[533]"></a>nu_pdma_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_pdma.o(.text.nu_pdma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Close
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_actor_init
</UL>

<P><STRONG><a name="[53f]"></a>nu_pdma_memfun</STRONG> (Thumb, 356 bytes, Stack size 96 bytes, drv_pdma.o(.text.nu_pdma_memfun))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = nu_pdma_memfun &rArr; nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_transfer
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_terminate
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_memctrl_set
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_callback_register
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_non_transfer_count_get
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun_employ
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memcpy
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_mempush
</UL>

<P><STRONG><a name="[545]"></a>nu_pdma_memfun_actor_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, drv_pdma.o(.text.nu_pdma_memfun_actor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = nu_pdma_memfun_actor_init &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pdma_memfun_init
</UL>

<P><STRONG><a name="[a9]"></a>nu_pdma_memfun_cb</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, drv_pdma.o(.text.nu_pdma_memfun_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = nu_pdma_memfun_cb &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pdma.o(.text.nu_pdma_memfun)
</UL>
<P><STRONG><a name="[540]"></a>nu_pdma_memfun_employ</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, drv_pdma.o(.text.nu_pdma_memfun_employ))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_cto
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
</UL>

<P><STRONG><a name="[544]"></a>nu_pdma_non_transfer_count_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_pdma.o(.text.nu_pdma_non_transfer_count_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nu_pdma_non_transfer_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_transferred_byte_get
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memfun
</UL>

<P><STRONG><a name="[535]"></a>nu_pdma_periph_ctrl_fill</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, drv_pdma.o(.text.nu_pdma_periph_ctrl_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nu_pdma_periph_ctrl_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
</UL>

<P><STRONG><a name="[534]"></a>nu_pdma_peripheral_set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, drv_pdma.o(.text.nu_pdma_peripheral_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nu_pdma_peripheral_set
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
</UL>

<P><STRONG><a name="[287]"></a>nu_pdma_timeout_set</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, drv_pdma.o(.text.nu_pdma_timeout_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTimeOut
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_pdma_transfer
</UL>

<P><STRONG><a name="[29d]"></a>SHABlockUpdate</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, drv_crypto.o(.text.SHABlockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SHABlockUpdate &rArr; SHA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Start
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_SetDMATransfer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_finish
</UL>

<P><STRONG><a name="[513]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_crypto.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_crypto_init
</UL>

<P><STRONG><a name="[148]"></a>nu_aes_crypt</STRONG> (Thumb, 624 bytes, Stack size 104 bytes, drv_crypto.o(.text.nu_aes_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = nu_aes_crypt &rArr; nu_aes_crypt_run &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_aes_ops)
</UL>
<P><STRONG><a name="[4ff]"></a>nu_aes_crypt_run</STRONG> (Thumb, 284 bytes, Stack size 96 bytes, drv_crypto.o(.text.nu_aes_crypt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = nu_aes_crypt_run &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Start
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_SetKey
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_SetInitVect
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_SetDMATransfer
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Open
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_get32_be
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt
</UL>

<P><STRONG><a name="[512]"></a>nu_crypto_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_crypto.o(.text.nu_crypto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = nu_crypto_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_hwcrypto_device_init
</UL>

<P><STRONG><a name="[500]"></a>nu_get32_be</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_crypto.o(.text.nu_get32_be))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nu_get32_be
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_aes_crypt_run
</UL>

<P><STRONG><a name="[14c]"></a>nu_hwcrypto_clone</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_crypto.o(.text.nu_hwcrypto_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nu_hwcrypto_clone &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_hwcrypto_ops)
</UL>
<P><STRONG><a name="[14a]"></a>nu_hwcrypto_create</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, drv_crypto.o(.text.nu_hwcrypto_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = nu_hwcrypto_create &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_hwcrypto_ops)
</UL>
<P><STRONG><a name="[14b]"></a>nu_hwcrypto_destroy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_crypto.o(.text.nu_hwcrypto_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = nu_hwcrypto_destroy &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_hwcrypto_ops)
</UL>
<P><STRONG><a name="[14d]"></a>nu_hwcrypto_reset</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_crypto.o(.text.nu_hwcrypto_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = nu_hwcrypto_reset &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_hwcrypto_ops)
</UL>
<P><STRONG><a name="[152]"></a>nu_sha_finish</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, drv_crypto.o(.text.nu_sha_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = nu_sha_finish &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHABlockUpdate
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_sha_ops)
</UL>
<P><STRONG><a name="[555]"></a>nu_sha_hash_run</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, drv_crypto.o(.text.nu_sha_hash_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = nu_sha_hash_run &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHABlockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_update
</UL>

<P><STRONG><a name="[151]"></a>nu_sha_update</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, drv_crypto.o(.text.nu_sha_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = nu_sha_update &rArr; nu_sha_hash_run &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sha_hash_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto.o(.rodata.nu_sha_ops)
</UL>
<P><STRONG><a name="[146]"></a>nu_eadc_enabled</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_eadc.o(.text.nu_eadc_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nu_eadc_enabled &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_Open
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eadc.o(.rodata.nu_adc_ops)
</UL>
<P><STRONG><a name="[147]"></a>nu_get_eadc_value</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, drv_eadc.o(.text.nu_get_eadc_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nu_get_eadc_value &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_ConfigSampleModule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eadc.o(.rodata.nu_adc_ops)
</UL>
<P><STRONG><a name="[566]"></a>nu_trng_run</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drv_trng.o(.text.nu_trng_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = nu_trng_run &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Random
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Open
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_trng_rand
</UL>

<P><STRONG><a name="[56b]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, drv_uart.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_control
</UL>

<P><STRONG><a name="[569]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_configure
</UL>

<P><STRONG><a name="[529]"></a>nu_hw_uart_dma_allocate</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, drv_uart.o(.text.nu_hw_uart_dma_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = nu_hw_uart_dma_allocate &rArr; nu_pdma_channel_allocate &rArr; nu_pdma_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[aa]"></a>nu_pdma_uart_rx_cb</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, drv_uart.o(.text.nu_pdma_uart_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = nu_pdma_uart_rx_cb &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_transferred_byte_get
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.text.nu_pdma_uart_rx_config)
</UL>
<P><STRONG><a name="[549]"></a>nu_pdma_uart_rx_config</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, drv_uart.o(.text.nu_pdma_uart_rx_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nu_pdma_uart_rx_config &rArr; nu_pdma_transfer &rArr; _nu_pdma_transfer &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_transfer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_dma_transmit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_control
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_cb
</UL>

<P><STRONG><a name="[ab]"></a>nu_pdma_uart_tx_cb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, drv_uart.o(.text.nu_pdma_uart_tx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = nu_pdma_uart_tx_cb &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.text.nu_pdma_uart_tx_config)
</UL>
<P><STRONG><a name="[54b]"></a>nu_pdma_uart_tx_config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_uart.o(.text.nu_pdma_uart_tx_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nu_pdma_uart_tx_config &rArr; nu_pdma_callback_register
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_uart_control
</UL>

<P><STRONG><a name="[153]"></a>nu_uart_configure</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, drv_uart.o(.text.nu_uart_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = nu_uart_configure &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.nu_uart_ops)
</UL>
<P><STRONG><a name="[154]"></a>nu_uart_control</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, drv_uart.o(.text.nu_uart_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nu_uart_control &rArr; nu_pdma_uart_rx_config &rArr; nu_pdma_transfer &rArr; _nu_pdma_transfer &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_channel_terminate
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_tx_config
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_config
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.nu_uart_ops)
</UL>
<P><STRONG><a name="[157]"></a>nu_uart_dma_transmit</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, drv_uart.o(.text.nu_uart_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nu_uart_dma_transmit &rArr; nu_pdma_uart_rx_config &rArr; nu_pdma_transfer &rArr; _nu_pdma_transfer &rArr; nu_pdma_timeout_set &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_transfer
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_uart_rx_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.nu_uart_ops)
</UL>
<P><STRONG><a name="[2ad]"></a>nu_uart_isr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_uart.o(.text.nu_uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = nu_uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>nu_uart_receive</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_uart.o(.text.nu_uart_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nu_uart_receive &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.nu_uart_ops)
</UL>
<P><STRONG><a name="[155]"></a>nu_uart_send</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_uart.o(.text.nu_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nu_uart_send &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.nu_uart_ops)
</UL>
<P><STRONG><a name="[199]"></a>msh_rtc_set_date</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, drv_rtc.o(.text.msh_rtc_set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = msh_rtc_set_date &rArr; set_date &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[19a]"></a>msh_rtc_set_time</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, drv_rtc.o(.text.msh_rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = msh_rtc_set_time &rArr; set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[b7]"></a>nu_rtc_control</STRONG> (Thumb, 200 bytes, Stack size 120 bytes, drv_rtc.o(.text.nu_rtc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nu_rtc_control &rArr; gmtime &rArr; gmtime_r &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateAndTime
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateAndTime
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_is_date_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.text.rt_hw_rtc_init)
</UL>
<P><STRONG><a name="[551]"></a>nu_rtc_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_rtc.o(.text.nu_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nu_rtc_init &rArr; RTC_Open &rArr; RTC_SetDateAndTime
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[550]"></a>nu_rtc_is_date_valid</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drv_rtc.o(.text.nu_rtc_is_date_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nu_rtc_is_date_valid &rArr; timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_rtc_control
</UL>

<P><STRONG><a name="[2b1]"></a>USBD_ClearStall</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, drv_usbd.o(.text.USBD_ClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_clear_stall
</UL>

<P><STRONG><a name="[2d6]"></a>USBD_MemCopy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_usbd.o(.text.USBD_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_read
</UL>

<P><STRONG><a name="[2b2]"></a>_USBD_IRQHandler</STRONG> (Thumb, 1644 bytes, Stack size 40 bytes, drv_usbd.o(.text._USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = _USBD_IRQHandler &rArr; rt_usbd_ep0_setup_handler &rArr; rt_usbd_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_sof_handler
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_reset_handler
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_out_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_in_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_setup_handler
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_out_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_in_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_disconnect_handler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_connect_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_usbd.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
</UL>

<P><STRONG><a name="[118]"></a>_ep0_send_status</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_usbd.o(.text._ep0_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ep0_send_status
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[112]"></a>_ep_clear_stall</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_usbd.o(.text._ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ep_clear_stall &rArr; USBD_ClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[114]"></a>_ep_disable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, drv_usbd.o(.text._ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ep_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[113]"></a>_ep_enable</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, drv_usbd.o(.text._ep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ep_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[116]"></a>_ep_read</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, drv_usbd.o(.text._ep_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ep_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[115]"></a>_ep_read_prepare</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_usbd.o(.text._ep_read_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[111]"></a>_ep_set_stall</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drv_usbd.o(.text._ep_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ep_set_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[117]"></a>_ep_write</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, drv_usbd.o(.text._ep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[ae]"></a>_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_usbd.o(.text._init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _init &rArr; USBD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nu_ep_partition
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.text.nu_usbd_register)
</UL>
<P><STRONG><a name="[2eb]"></a>_nu_ep_partition</STRONG> (Thumb, 720 bytes, Stack size 8 bytes, drv_usbd.o(.text._nu_ep_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nu_ep_partition
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init
</UL>

<P><STRONG><a name="[10f]"></a>_set_address</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, drv_usbd.o(.text._set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _set_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[110]"></a>_set_config</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, drv_usbd.o(.text._set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _set_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[119]"></a>_suspend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_usbd.o(.text._suspend))
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[11a]"></a>_wakeup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_usbd.o(.text._wakeup))
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.rodata._udc_ops)
</UL>
<P><STRONG><a name="[607]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, drv_sdh.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdh_init
</UL>

<P><STRONG><a name="[508]"></a>nu_card_detector</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_sdh.o(.text.nu_card_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = nu_card_detector &rArr; nu_sdh_hotplug_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Open
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_unmount
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_hotplugger
</UL>

<P><STRONG><a name="[ba]"></a>nu_sdh_close</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, drv_sdh.o(.text.nu_sdh_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nu_sdh_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.text.rt_hw_sdh_init)
</UL>
<P><STRONG><a name="[bd]"></a>nu_sdh_control</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, drv_sdh.o(.text.nu_sdh_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nu_sdh_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.text.rt_hw_sdh_init)
</UL>
<P><STRONG><a name="[553]"></a>nu_sdh_hotplug_is_mounted</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, drv_sdh.o(.text.nu_sdh_hotplug_is_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = nu_sdh_hotplug_is_mounted &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_unmount
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_mount
</UL>

<P><STRONG><a name="[50a]"></a>nu_sdh_hotplug_mount</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, drv_sdh.o(.text.nu_sdh_hotplug_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = nu_sdh_hotplug_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_is_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_hotplugger
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_card_detector
</UL>

<P><STRONG><a name="[509]"></a>nu_sdh_hotplug_unmount</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, drv_sdh.o(.text.nu_sdh_hotplug_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = nu_sdh_hotplug_unmount &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_is_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_card_detector
</UL>

<P><STRONG><a name="[b8]"></a>nu_sdh_init</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, drv_sdh.o(.text.nu_sdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nu_sdh_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.text.rt_hw_sdh_init)
</UL>
<P><STRONG><a name="[28a]"></a>nu_sdh_isr</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, drv_sdh.o(.text.nu_sdh_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = nu_sdh_isr &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH0_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>nu_sdh_open</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, drv_sdh.o(.text.nu_sdh_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nu_sdh_open &rArr; SDH_Probe &rArr; SDH_Init &rArr; SDH_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.text.rt_hw_sdh_init)
</UL>
<P><STRONG><a name="[bb]"></a>nu_sdh_read</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, drv_sdh.o(.text.nu_sdh_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = nu_sdh_read &rArr; nu_pdma_memcpy &rArr; nu_pdma_memfun &rArr; nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.text.rt_hw_sdh_init)
</UL>
<P><STRONG><a name="[bc]"></a>nu_sdh_write</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, drv_sdh.o(.text.nu_sdh_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = nu_sdh_write &rArr; nu_pdma_memcpy &rArr; nu_pdma_memfun &rArr; nu_pdma_memfun_employ &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pdma_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.text.rt_hw_sdh_init)
</UL>
<P><STRONG><a name="[166]"></a>rt_hw_sdh_init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, drv_sdh.o(.text.rt_hw_sdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_hw_sdh_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDH_Open
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[a5]"></a>sdh_hotplugger</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, drv_sdh.o(.text.sdh_hotplugger))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = sdh_hotplugger &rArr; nu_card_detector &rArr; nu_sdh_hotplug_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_sdh_hotplug_mount
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_card_detector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdh.o(.text.mnt_init_sdcard_hotplug)
</UL>
<P><STRONG><a name="[51d]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_fmc.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_init
</UL>

<P><STRONG><a name="[51c]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_fmc.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_init
</UL>

<P><STRONG><a name="[fd]"></a>aprom_erase</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_fmc.o(.text.aprom_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = aprom_erase &rArr; nu_fmc_erase &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fmc.o(.rodata.Onchip_aprom_flash)
</UL>
<P><STRONG><a name="[fb]"></a>aprom_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drv_fmc.o(.text.aprom_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = aprom_read &rArr; nu_fmc_read &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fmc.o(.rodata.Onchip_aprom_flash)
</UL>
<P><STRONG><a name="[fc]"></a>aprom_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drv_fmc.o(.text.aprom_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = aprom_write &rArr; nu_fmc_write &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fmc.o(.rodata.Onchip_aprom_flash)
</UL>
<P><STRONG><a name="[100]"></a>ldrom_erase</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_fmc.o(.text.ldrom_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = ldrom_erase &rArr; nu_fmc_erase &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fmc.o(.rodata.Onchip_ldrom_flash)
</UL>
<P><STRONG><a name="[fe]"></a>ldrom_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drv_fmc.o(.text.ldrom_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ldrom_read &rArr; nu_fmc_read &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fmc.o(.rodata.Onchip_ldrom_flash)
</UL>
<P><STRONG><a name="[ff]"></a>ldrom_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drv_fmc.o(.text.ldrom_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ldrom_write &rArr; nu_fmc_write &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_fmc_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fmc.o(.rodata.Onchip_ldrom_flash)
</UL>
<P><STRONG><a name="[17c]"></a>nu_fmc_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_fmc.o(.text.nu_fmc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = nu_fmc_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fmc.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[262]"></a>AllocateNewUDev</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, drv_usbhost.o(.text.AllocateNewUDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = AllocateNewUDev &rArr; alloc_device &rArr; malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_device
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_open_pipe
</UL>

<P><STRONG><a name="[271]"></a>FreePipe</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, drv_usbhost.o(.text.FreePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = FreePipe &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_close_pipe
</UL>

<P><STRONG><a name="[276]"></a>GetFreePipe</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drv_usbhost.o(.text.GetFreePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = GetFreePipe &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_open_pipe
</UL>

<P><STRONG><a name="[278]"></a>GetPortDevFromPipe</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, drv_usbhost.o(.text.GetPortDevFromPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetPortDevFromPipe &rArr; GetRHPortControlFromPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRHPortControlFromPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_open_pipe
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_close_pipe
</UL>

<P><STRONG><a name="[279]"></a>GetRHPortControlFromPipe</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_usbhost.o(.text.GetRHPortControlFromPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetRHPortControlFromPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_open_pipe
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_close_pipe
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortDevFromPipe
</UL>

<P><STRONG><a name="[ad]"></a>int_xfer_done_cb</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, drv_usbhost.o(.text.int_xfer_done_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = int_xfer_done_cb &rArr; free_utr &rArr; free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_utr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.text.nu_pipe_xfer)
</UL>
<P><STRONG><a name="[506]"></a>nu_bulk_xfer</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, drv_usbhost.o(.text.nu_bulk_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = nu_bulk_xfer &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_bulk_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
</UL>

<P><STRONG><a name="[12]"></a>nu_close_pipe</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, drv_usbhost.o(.text.nu_close_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = nu_close_pipe &rArr; free_device &rArr; usbh_free_mem &rArr; free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_quit_xfer
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_device
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRHPortControlFromPipe
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortDevFromPipe
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.data.nu_uhcd_ops)
</UL>
<P><STRONG><a name="[517]"></a>nu_ctrl_xfer</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, drv_usbhost.o(.text.nu_ctrl_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = nu_ctrl_xfer &rArr; usbh_ctrl_xfer &rArr; alloc_utr &rArr; malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctrl_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
</UL>

<P><STRONG><a name="[a6]"></a>nu_hcd_connect_callback</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_usbhost.o(.text.nu_hcd_connect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = nu_hcd_connect_callback &rArr; rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_connect_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.text.nu_hcd_init)
</UL>
<P><STRONG><a name="[a7]"></a>nu_hcd_disconnect_callback</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, drv_usbhost.o(.text.nu_hcd_disconnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = nu_hcd_disconnect_callback &rArr; rt_usbh_root_hub_disconnect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_quit_xfer
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_disconnect_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.text.nu_hcd_init)
</UL>
<P><STRONG><a name="[af]"></a>nu_hcd_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_usbhost.o(.text.nu_hcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = nu_hcd_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_install_conn_callback
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.text.nu_usbh_register)
</UL>
<P><STRONG><a name="[531]"></a>nu_int_xfer</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, drv_usbhost.o(.text.nu_int_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = nu_int_xfer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_pipe_xfer
</UL>

<P><STRONG><a name="[11]"></a>nu_open_pipe</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, drv_usbhost.o(.text.nu_open_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = nu_open_pipe &rArr; AllocateNewUDev &rArr; alloc_device &rArr; malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRHPortControlFromPipe
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortDevFromPipe
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFreePipe
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateNewUDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.data.nu_uhcd_ops)
</UL>
<P><STRONG><a name="[10]"></a>nu_pipe_xfer</STRONG> (Thumb, 640 bytes, Stack size 64 bytes, drv_usbhost.o(.text.nu_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = nu_pipe_xfer &rArr; nu_ctrl_xfer &rArr; usbh_ctrl_xfer &rArr; alloc_utr &rArr; malloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_quit_utr
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_utr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_utr
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_int_xfer
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctrl_xfer
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_bulk_xfer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRHPortControlFromPipe
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortDevFromPipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.data.nu_uhcd_ops)
</UL>
<P><STRONG><a name="[f]"></a>nu_reset_port</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, drv_usbhost.o(.text.nu_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nu_reset_port &rArr; usbh_reset_port
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_reset_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.data.nu_uhcd_ops)
</UL>
<P><STRONG><a name="[a8]"></a>nu_usbh_rh_thread_entry</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_usbhost.o(.text.nu_usbh_rh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = nu_usbh_rh_thread_entry &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_polling_root_hubs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.text.nu_hcd_init)
</UL>
<P><STRONG><a name="[4]"></a>usbhost_pm_resume</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_usbhost.o(.text.usbhost_pm_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbhost_pm_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.data.device_pm_ops)
</UL>
<P><STRONG><a name="[3]"></a>usbhost_pm_suspend</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drv_usbhost.o(.text.usbhost_pm_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usbhost_pm_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.data.device_pm_ops)
</UL>
<P><STRONG><a name="[ac]"></a>xfer_done_cb</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_usbhost.o(.text.xfer_done_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = xfer_done_cb &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbhost.o(.text.nu_pipe_xfer)
</UL>
<P><STRONG><a name="[c5]"></a>nu_slcd_close</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, drv_slcd.o(.text.nu_slcd_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nu_slcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_slcd.o(.text.rt_hw_slcd_register)
</UL>
<P><STRONG><a name="[c7]"></a>nu_slcd_control</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, drv_slcd.o(.text.nu_slcd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nu_slcd_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_slcd.o(.text.rt_hw_slcd_register)
</UL>
<P><STRONG><a name="[c4]"></a>nu_slcd_open</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, drv_slcd.o(.text.nu_slcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = nu_slcd_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_slcd.o(.text.rt_hw_slcd_register)
</UL>
<P><STRONG><a name="[c6]"></a>nu_slcd_write</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, drv_slcd.o(.text.nu_slcd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = nu_slcd_write &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_slcd.o(.text.rt_hw_slcd_register)
</UL>
<P><STRONG><a name="[174]"></a>rt_hw_slcd_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, drv_slcd.o(.text.rt_hw_slcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_hw_slcd_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_slcd_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_slcd.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[19b]"></a>fal</STRONG> (Thumb, 2116 bytes, Stack size 128 bytes, fal_rtt.o(.text.fal))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = fal &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init_check
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(FSymTab)
</UL>
<P><STRONG><a name="[3db]"></a>check_and_update_part_cache</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fal_partition.o(.text.check_and_update_part_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = check_and_update_part_cache &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[489]"></a>flash_device_find_by_part</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fal_partition.o(.text.flash_device_find_by_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = flash_device_find_by_part &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>

<P><STRONG><a name="[48a]"></a>fd_alloc</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, dfs.o(.text.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = fd_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[2e2]"></a>_get_path_lastname</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dfs_file.o(.text._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[405]"></a>copydir</STRONG> (Thumb, 280 bytes, Stack size 400 bytes, dfs_file.o(.text.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[404]"></a>copyfile</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, dfs_file.o(.text.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[107]"></a>dfs_device_fs_poll</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, devfs.o(.text.dfs_device_fs_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dfs_device_fs_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.rodata._device_fops)
</UL>
<P><STRONG><a name="[423]"></a>elm_result_to_dfs</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, dfs_elm.o(.text.elm_result_to_dfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = elm_result_to_dfs
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[429]"></a>get_disk</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, dfs_elm.o(.text.get_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_disk
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[3dd]"></a>check_fs</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[474]"></a>clmt_clust</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, ff.o(.text.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[448]"></a>clst2sect</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ff.o(.text.clst2sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[3ff]"></a>cmp_lfn</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ff.o(.text.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[408]"></a>create_chain</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[40b]"></a>create_name</STRONG> (Thumb, 1068 bytes, Stack size 72 bytes, ff.o(.text.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[40f]"></a>create_partition</STRONG> (Thumb, 620 bytes, Stack size 112 bytes, ff.o(.text.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = create_partition &rArr; disk_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[4a2]"></a>dbc_1st</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text.dbc_1st))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[6c9]"></a>dbc_2nd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text.dbc_2nd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_2nd
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[443]"></a>dir_alloc</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[446]"></a>dir_clear</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[44b]"></a>dir_find</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[445]"></a>dir_next</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[44d]"></a>dir_read</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[44f]"></a>dir_register</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[452]"></a>dir_remove</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(.text.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dir_remove &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[444]"></a>dir_sdi</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[48f]"></a>find_volume</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[475]"></a>follow_path</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[450]"></a>gen_numname</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, ff.o(.text.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gen_numname &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[409]"></a>get_fat</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[47f]"></a>get_fileinfo</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_fileinfo &rArr; put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[47a]"></a>get_ldnumber</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[47e]"></a>ld_clust</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ff.o(.text.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ld_clust &rArr; ld_word
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3e1]"></a>ld_dword</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff.o(.text.ld_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[3df]"></a>ld_word</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ff.o(.text.ld_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[4db]"></a>lock_fs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ff.o(.text.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[473]"></a>mount_volume</STRONG> (Thumb, 1076 bytes, Stack size 72 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[3de]"></a>move_window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[44e]"></a>pick_lfn</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, ff.o(.text.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pick_lfn &rArr; ld_word
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[40a]"></a>put_fat</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[451]"></a>put_lfn</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, ff.o(.text.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = put_lfn &rArr; st_word
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4a4]"></a>put_utf</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ff.o(.text.put_utf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[479]"></a>remove_chain</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[477]"></a>st_clust</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ff.o(.text.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = st_clust &rArr; st_word
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[411]"></a>st_dword</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text.st_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[412]"></a>st_word</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ff.o(.text.st_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[44c]"></a>sum_sfn</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[478]"></a>sync_fs</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sync_fs &rArr; disk_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[447]"></a>sync_window</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[40c]"></a>tchar2uni</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ff.o(.text.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[472]"></a>unlock_fs</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[471]"></a>validate</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[9f]"></a>finsh_rx_ind</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, shell.o(.text.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_set_device)
</UL>
<P><STRONG><a name="[499]"></a>shell_auto_complete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell.o(.text.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[498]"></a>shell_handle_history</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(.text.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[49b]"></a>shell_push_history</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, shell.o(.text.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shell_push_history &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2f5]"></a>_msh_exec_cmd</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, msh.o(.text._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[2f6]"></a>msh_get_cmd</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, msh.o(.text.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[2f8]"></a>msh_split</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, msh.o(.text.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[4e6]"></a>str_common</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, msh.o(.text.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1a3]"></a>cmd_cat</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, msh_file.o(.text.cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a5]"></a>cmd_cd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a1]"></a>cmd_cp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1ab]"></a>cmd_df</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1ac]"></a>cmd_echo</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, msh_file.o(.text.cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = cmd_echo &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a0]"></a>cmd_ls</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a7]"></a>cmd_mkdir</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a8]"></a>cmd_mkfs</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, msh_file.o(.text.cmd_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a9]"></a>cmd_mount</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, msh_file.o(.text.cmd_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = cmd_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a2]"></a>cmd_mv</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, msh_file.o(.text.cmd_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = cmd_mv &rArr; unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a6]"></a>cmd_pwd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1a4]"></a>cmd_rm</STRONG> (Thumb, 420 bytes, Stack size 112 bytes, msh_file.o(.text.cmd_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = cmd_rm &rArr; directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1ad]"></a>cmd_tail</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, msh_file.o(.text.cmd_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = cmd_tail &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1aa]"></a>cmd_umount</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, msh_file.o(.text.cmd_umount))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cmd_umount &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[3fa]"></a>directory_delete_for_msh</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, msh_file.o(.text.directory_delete_for_msh))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + In Cycle
<LI>Call Chain = directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
</UL>

<P><STRONG><a name="[4e9]"></a>msh_readline</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, msh_file.o(.text.msh_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = msh_readline &rArr; read &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[1af]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4d2]"></a>list_find_init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, cmd.o(.text.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = list_find_init &rArr; rt_object_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[4d4]"></a>list_get_next</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, cmd.o(.text.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[4d3]"></a>object_split</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cmd.o(.text.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[4d5]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cmd.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[4d6]"></a>rt_list_len</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, cmd.o(.text.rt_list_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[4d7]"></a>show_wait_queue</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cmd.o(.text.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[2e4]"></a>_heap_lock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[2e6]"></a>_heap_lock_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kservice.o(.text._heap_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _heap_lock_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[2e8]"></a>_heap_unlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kservice.o(.text._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[60f]"></a>_smem_info</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, kservice.o(.text._smem_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _smem_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[5cb]"></a>divide</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, kservice.o(.text.divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = divide
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[5ca]"></a>print_number</STRONG> (Thumb, 596 bytes, Stack size 88 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[6a5]"></a>skip_atoi</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, kservice.o(.text.skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[5e9]"></a>rt_defunct_execute</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, idle.o(.text.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_defunct_execute &rArr; rt_thread_free_sig &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_free_sig
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[64c]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, idle.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>

<P><STRONG><a name="[64b]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, idle.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>

<P><STRONG><a name="[d8]"></a>rt_thread_idle_entry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_thread_idle_entry &rArr; rt_defunct_execute &rArr; rt_thread_free_sig &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_power_manager
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[61c]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, object.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[61d]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, object.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[344]"></a>_timer_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, timer.o(.text._timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[346]"></a>_timer_list_next_timeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, timer.o(.text._timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _timer_list_next_timeout &rArr; rt_list_isempty
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
</UL>

<P><STRONG><a name="[348]"></a>_timer_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(.text._timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[345]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timer.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>

<P><STRONG><a name="[651]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[347]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, timer.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>

<P><STRONG><a name="[349]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timer.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>

<P><STRONG><a name="[168]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[160]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[180]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[15f]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[5ba]"></a>plug_holes</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[92]"></a>_thread_exit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, thread.o(.text._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[33f]"></a>_thread_init</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, thread.o(.text._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[340]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, thread.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[650]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, thread.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[2ed]"></a>_ipc_list_resume</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ipc.o(.text._ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>

<P><STRONG><a name="[2ee]"></a>_ipc_list_resume_all</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ipc.o(.text._ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>

<P><STRONG><a name="[2f0]"></a>_ipc_list_suspend</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ipc.o(.text._ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>

<P><STRONG><a name="[2f3]"></a>_ipc_object_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(.text._ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ipc_object_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[2f4]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[2f2]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>

<P><STRONG><a name="[2ef]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[615]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mempool.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_create
</UL>

<P><STRONG><a name="[617]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mempool.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_free
</UL>

<P><STRONG><a name="[31a]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, scheduler.o(.text._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[31b]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, scheduler.o(.text._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _scheduler_get_highest_priority_thread &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[645]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[631]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[633]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[632]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[4a9]"></a>__isleap</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, time.o(.text.__isleap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[4a5]"></a>get_timeval</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, time.o(.text.get_timeval))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[381]"></a>num2str</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time.o(.text.num2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = num2str
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>

<P><STRONG><a name="[36c]"></a>memory_counter</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, mem_alloc.o(.text.memory_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memory_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_utr
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_device
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_utr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_device
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_free_mem
</UL>

<P><STRONG><a name="[368]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ohci.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_shutdown
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_ctrl_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_ED_remove_list
</UL>

<P><STRONG><a name="[369]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, ohci.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_ctrl_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_ED_remove_list
</UL>

<P><STRONG><a name="[367]"></a>add_to_ED_remove_list</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ohci.o(.text.add_to_ED_remove_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = add_to_ED_remove_list &rArr; usbh_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_delay_ms
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_quit_xfer
</UL>

<P><STRONG><a name="[5ae]"></a>get_int_tree_head_node</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ohci.o(.text.get_int_tree_head_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_int_tree_head_node
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
</UL>

<P><STRONG><a name="[5af]"></a>get_ohci_interval</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ohci.o(.text.get_ohci_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ohci_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_done
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_iso_xfer
</UL>

<P><STRONG><a name="[4c3]"></a>init_hcca_int_table</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ohci.o(.text.init_hcca_int_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = init_hcca_int_table &rArr; alloc_ohci_ED &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_ED
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_init
</UL>

<P><STRONG><a name="[18]"></a>ohci_bulk_xfer</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, ohci.o(.text.ohci_bulk_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ohci_bulk_xfer &rArr; alloc_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_make_info
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_td
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_TD
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_ED
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_TD
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_ED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[17]"></a>ohci_ctrl_xfer</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, ohci.o(.text.ohci_ctrl_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ohci_ctrl_xfer &rArr; alloc_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_make_info
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_td
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_TD
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_TD
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_ED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[5b0]"></a>ohci_find_device_by_port</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ohci.o(.text.ohci_find_device_by_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ohci_find_device_by_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_polling
</UL>

<P><STRONG><a name="[13]"></a>ohci_init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, ohci.o(.text.ohci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ohci_init &rArr; ohci_reset &rArr; usbh_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_delay_ms
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_reset
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hcca_int_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[19]"></a>ohci_int_xfer</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, ohci.o(.text.ohci_int_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ohci_int_xfer &rArr; alloc_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_make_info
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_td
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_tree_head_node
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_TD
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_ED
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_TD
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_ED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[1a]"></a>ohci_iso_xfer</STRONG> (Thumb, 528 bytes, Stack size 64 bytes, ohci.o(.text.ohci_iso_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ohci_iso_xfer &rArr; alloc_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_make_info
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ohci_interval
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_tree_head_node
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_TD
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_ED
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_TD
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_ohci_ED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[1b]"></a>ohci_quit_xfer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ohci.o(.text.ohci_quit_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ohci_quit_xfer &rArr; add_to_ED_remove_list &rArr; usbh_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_ED_remove_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[5ad]"></a>ohci_reset</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ohci.o(.text.ohci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ohci_reset &rArr; usbh_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_init
</UL>

<P><STRONG><a name="[16]"></a>ohci_resume</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ohci.o(.text.ohci_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ohci_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[1d]"></a>ohci_rh_polling</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ohci.o(.text.ohci_rh_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ohci_rh_polling &rArr; usbh_disconnect_device &rArr; free_device &rArr; usbh_free_mem &rArr; free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_device
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_device
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_device
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_connect_device
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_port_reset
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_find_device_by_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[1c]"></a>ohci_rh_port_reset</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ohci.o(.text.ohci_rh_port_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ohci_rh_port_reset &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_tick_from_millisecond
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_rh_polling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[14]"></a>ohci_shutdown</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ohci.o(.text.ohci_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ohci_shutdown &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_suspend
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[15]"></a>ohci_suspend</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ohci.o(.text.ohci_suspend))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ohci.o(.data.ohci_driver)
</UL>
<P><STRONG><a name="[2b4]"></a>remove_ed</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, ohci.o(.text.remove_ed))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = remove_ed &rArr; free_ohci_TD &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_tree_head_node
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_TD
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ohci_ED
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IRQHandler
</UL>

<P><STRONG><a name="[5ac]"></a>write_td</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ohci.o(.text.write_td))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_td
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_xfer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_ctrl_xfer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_bulk_xfer
</UL>

<P><STRONG><a name="[6cb]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usb_core.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[6cd]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, usb_core.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[a2]"></a>iperf_client</STRONG> (Thumb, 524 bytes, Stack size 104 bytes, iperf.o(.text.iperf_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = iperf_client &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ipaddr_addr
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf.o(.text.iperf)
</UL>
<P><STRONG><a name="[a4]"></a>iperf_udp_client</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, iperf.o(.text.iperf_udp_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = iperf_udp_client &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ipaddr_addr
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf.o(.text.iperf)
</UL>
<P><STRONG><a name="[a3]"></a>iperf_udp_server</STRONG> (Thumb, 548 bytes, Stack size 144 bytes, iperf.o(.text.iperf_udp_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = iperf_udp_server &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ipaddr_addr
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf.o(.text.iperf)
</UL>
<P><STRONG><a name="[1bc]"></a>cmd_ntp_sync</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ntp.o(.text.cmd_ntp_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = cmd_ntp_sync &rArr; ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp.o(FSymTab)
</UL>
<P><STRONG><a name="[4fe]"></a>sendto_ntp_server</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, ntp.o(.text.sendto_ntp_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = sendto_ntp_server &rArr; sendto &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>

<P><STRONG><a name="[17e]"></a>slcd_demo_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, slcd_show_tick.o(.text.slcd_demo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = slcd_demo_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slcd_show_tick.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[17f]"></a>dance_mouse_init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usbd_hid_dance_mouse.o(.text.dance_mouse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dance_mouse_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_dance_mouse.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[f4]"></a>event_hid_in</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_hid_dance_mouse.o(.text.event_hid_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = event_hid_in &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_dance_mouse.o(.text.usb_thread_entry)
</UL>
<P><STRONG><a name="[9c]"></a>usb_thread_entry</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, usbd_hid_dance_mouse.o(.text.usb_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = usb_thread_entry &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_dance_mouse.o(.text.dance_mouse_init)
</UL>
<P><STRONG><a name="[177]"></a>nu_slcd_panel_init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, slcd_rhe6616tp01.o(.text.nu_slcd_panel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = nu_slcd_panel_init &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slcd_rhe6616tp01.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[48c]"></a>fdszero</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, select.o(.text.fdszero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fdszero &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[91]"></a>__wqueue_pollwake</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, poll.o(.text.__wqueue_pollwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __wqueue_pollwake &rArr; __wqueue_default_wake
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_default_wake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(.text._poll_add)
</UL>
<P><STRONG><a name="[b0]"></a>_poll_add</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, poll.o(.text._poll_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _poll_add &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(.text.poll_table_init)
</UL>
<P><STRONG><a name="[456]"></a>do_pollfd</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, poll.o(.text.do_pollfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[5c6]"></a>poll_do</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, poll.o(.text.poll_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[5c5]"></a>poll_table_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, poll.o(.text.poll_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = poll_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[5c7]"></a>poll_teardown</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, poll.o(.text.poll_teardown))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = poll_teardown &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[5c8]"></a>poll_wait_timeout</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, poll.o(.text.poll_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = poll_wait_timeout &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[314]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, poll.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</UL>

<P><STRONG><a name="[2c4]"></a>_data_notify</STRONG> (Thumb, 516 bytes, Stack size 48 bytes, usbdevice_core.o(.text._data_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _data_notify &rArr; rt_usbd_find_endpoint &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_endpoint
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
</UL>

<P><STRONG><a name="[334]"></a>_dump_setup_packet</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, usbdevice_core.o(.text._dump_setup_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _dump_setup_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
</UL>

<P><STRONG><a name="[2d1]"></a>_ep0_out_notify</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, usbdevice_core.o(.text._ep0_out_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ep0_out_notify &rArr; rt_usbd_ep0_read &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
</UL>

<P><STRONG><a name="[2d7]"></a>_function_request</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usbdevice_core.o(.text._function_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _function_request &rArr; rt_usbd_find_interface &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_interface
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
</UL>

<P><STRONG><a name="[2da]"></a>_get_config</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbdevice_core.o(.text._get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _get_config &rArr; rt_usbd_ep0_write &rArr; dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[2dc]"></a>_get_config_descriptor</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, usbdevice_core.o(.text._get_config_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _get_config_descriptor &rArr; rt_usbd_ep0_write &rArr; dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
</UL>

<P><STRONG><a name="[2dd]"></a>_get_descriptor</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, usbdevice_core.o(.text._get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _get_descriptor &rArr; _get_string_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_string_descriptor
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_qualifier_descriptor
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_device_descriptor
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_config_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[2de]"></a>_get_device_descriptor</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usbdevice_core.o(.text._get_device_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _get_device_descriptor &rArr; rt_usbd_ep0_write &rArr; dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
</UL>

<P><STRONG><a name="[2e1]"></a>_get_interface</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usbdevice_core.o(.text._get_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _get_interface &rArr; rt_usbd_find_interface &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_interface
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[2e0]"></a>_get_qualifier_descriptor</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbdevice_core.o(.text._get_qualifier_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _get_qualifier_descriptor &rArr; rt_usbd_ep0_write &rArr; dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
</UL>

<P><STRONG><a name="[2df]"></a>_get_string_descriptor</STRONG> (Thumb, 372 bytes, Stack size 104 bytes, usbdevice_core.o(.text._get_string_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _get_string_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
</UL>

<P><STRONG><a name="[316]"></a>_request_interface</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbdevice_core.o(.text._request_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _request_interface &rArr; rt_usbd_find_interface &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[32a]"></a>_set_address</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usbdevice_core.o(.text._set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _set_address &rArr; dcd_set_address &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[32d]"></a>_set_config</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, usbdevice_core.o(.text._set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _set_config &rArr; rt_usbd_set_config &rArr; rt_usbd_find_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_config
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_enable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_disable
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[331]"></a>_set_interface</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, usbdevice_core.o(.text._set_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _set_interface &rArr; rt_usbd_set_altsetting &rArr; rt_usbd_find_altsetting &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_interface
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_enable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_disable
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[333]"></a>_setup_request</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, usbdevice_core.o(.text._setup_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = _setup_request &rArr; _vendor_request &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_request
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_setup_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
</UL>

<P><STRONG><a name="[337]"></a>_sof_notify</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbdevice_core.o(.text._sof_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sof_notify &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
</UL>

<P><STRONG><a name="[335]"></a>_standard_request</STRONG> (Thumb, 740 bytes, Stack size 64 bytes, usbdevice_core.o(.text._standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _standard_request &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_feature
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_endpoint
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_clear_feature
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_config
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_address
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_request_interface
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_interface
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
</UL>

<P><STRONG><a name="[33c]"></a>_stop_notify</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbdevice_core.o(.text._stop_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _stop_notify &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_thread_entry
</UL>

<P><STRONG><a name="[336]"></a>_vendor_request</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, usbdevice_core.o(.text._vendor_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = _vendor_request &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_interface
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
</UL>

<P><STRONG><a name="[32c]"></a>dcd_ep0_send_status</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbdevice_core.o(.text.dcd_ep0_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_config
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_address
</UL>

<P><STRONG><a name="[41a]"></a>dcd_ep_clear_stall</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbdevice_core.o(.text.dcd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_ep_clear_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_clear_feature
</UL>

<P><STRONG><a name="[32f]"></a>dcd_ep_disable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdevice_core.o(.text.dcd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_ep_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_config
</UL>

<P><STRONG><a name="[330]"></a>dcd_ep_enable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdevice_core.o(.text.dcd_ep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_ep_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_interface
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_config
</UL>

<P><STRONG><a name="[2c8]"></a>dcd_ep_read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbdevice_core.o(.text.dcd_ep_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dcd_ep_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_setup_handler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep0_out_notify
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_notify
</UL>

<P><STRONG><a name="[2c9]"></a>dcd_ep_read_prepare</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbdevice_core.o(.text.dcd_ep_read_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_in_handler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_read_prepare
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_notify
</UL>

<P><STRONG><a name="[41b]"></a>dcd_ep_set_stall</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbdevice_core.o(.text.dcd_ep_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_ep_set_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_feature
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
</UL>

<P><STRONG><a name="[2c7]"></a>dcd_ep_write</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbdevice_core.o(.text.dcd_ep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_in_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_notify
</UL>

<P><STRONG><a name="[32b]"></a>dcd_set_address</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbdevice_core.o(.text.dcd_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_set_address &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_address
</UL>

<P><STRONG><a name="[41c]"></a>dcd_set_config</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbdevice_core.o(.text.dcd_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_set_config &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_config
</UL>

<P><STRONG><a name="[33b]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usbdevice_core.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_os_comp_id_desc
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_new
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_core_init
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_new
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_standard_request
</UL>

<P><STRONG><a name="[673]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbdevice_core.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_new
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_add_config
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_config_add_function
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
</UL>

<P><STRONG><a name="[34a]"></a>rt_list_len</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usbdevice_core.o(.text.rt_list_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vendor_request
</UL>

<P><STRONG><a name="[67a]"></a>rt_usbd_ep_assign</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, usbdevice_core.o(.text.rt_usbd_ep_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_usbd_ep_assign &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_add_config
</UL>

<P><STRONG><a name="[67e]"></a>rt_usbd_ep_read_prepare</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, usbdevice_core.o(.text.rt_usbd_ep_read_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_usbd_ep_read_prepare &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>

<P><STRONG><a name="[67f]"></a>rt_usbd_ep_write</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, usbdevice_core.o(.text.rt_usbd_ep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>

<P><STRONG><a name="[df]"></a>rt_usbd_thread_entry</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, usbdevice_core.o(.text.rt_usbd_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_usbd_thread_entry &rArr; _setup_request &rArr; _vendor_request &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_device
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stop_notify
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sof_notify
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_request
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep0_out_notify
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdevice_core.o(.text.rt_usbd_core_init)
</UL>
<P><STRONG><a name="[676]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usbdevice.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_list_init
</UL>

<P><STRONG><a name="[678]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbdevice.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_register
</UL>

<P><STRONG><a name="[65f]"></a>rt_list_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usbdevice.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_device_init
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_register
</UL>

<P><STRONG><a name="[e2]"></a>_ep_in_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hid.o(.text._ep_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ep_in_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text.rt_usbd_function_hid_create)
</UL>
<P><STRONG><a name="[e1]"></a>_ep_out_handler</STRONG> (Thumb, 156 bytes, Stack size 96 bytes, hid.o(.text._ep_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = _ep_out_handler &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text.rt_usbd_function_hid_create)
</UL>
<P><STRONG><a name="[24]"></a>_function_disable</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hid.o(.text._function_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _function_disable &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.data.ops)
</UL>
<P><STRONG><a name="[23]"></a>_function_enable</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, hid.o(.text._function_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _function_enable &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.data.ops)
</UL>
<P><STRONG><a name="[686]"></a>_hid_descriptor_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hid.o(.text._hid_descriptor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _hid_descriptor_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[90]"></a>_hid_set_report_callback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hid.o(.text._hid_set_report_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _hid_set_report_callback &rArr; dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text._interface_handler)
</UL>
<P><STRONG><a name="[dd]"></a>_hid_write</STRONG> (Thumb, 136 bytes, Stack size 112 bytes, hid.o(.text._hid_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = _hid_write &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text.rt_usb_hid_init)
</UL>
<P><STRONG><a name="[e0]"></a>_interface_handler</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, hid.o(.text._interface_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _interface_handler &rArr; rt_usbd_ep0_read &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text.rt_usbd_function_hid_create)
</UL>
<P><STRONG><a name="[2ea]"></a>dcd_ep0_send_status</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hid.o(.text.dcd_ep0_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_set_report_callback
</UL>

<P><STRONG><a name="[457]"></a>dump_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hid.o(.text.dump_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dump_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_report
</UL>

<P><STRONG><a name="[27b]"></a>dump_report</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hid.o(.text.dump_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dump_report &rArr; dump_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_data
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Report_Received
</UL>

<P><STRONG><a name="[de]"></a>hid_thread_entry</STRONG> (Thumb, 42 bytes, Stack size 88 bytes, hid.o(.text.hid_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = hid_thread_entry &rArr; rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Report_Received
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text.rt_usb_hid_init)
</UL>
<P><STRONG><a name="[66a]"></a>rt_usb_hid_init</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, hid.o(.text.rt_usb_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_usb_hid_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[69a]"></a>root_hub_ctrl</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, hub.o(.text.root_hub_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>

<P><STRONG><a name="[69b]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, hub.o(.text.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>

<P><STRONG><a name="[69e]"></a>rt_usb_instance_find_pipe</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hub.o(.text.rt_usb_instance_find_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_usb_instance_find_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[69f]"></a>rt_usb_pipe_add_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hub.o(.text.rt_usb_pipe_add_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_usb_pipe_add_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[e4]"></a>rt_usbh_hub_disable</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hub.o(.text.rt_usbh_hub_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_usbh_hub_disable &rArr; rt_usbh_detach_instance &rArr; rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.rt_usbh_class_driver_hub)
</UL>
<P><STRONG><a name="[e3]"></a>rt_usbh_hub_enable</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, hub.o(.text.rt_usbh_hub_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = rt_usbh_hub_enable &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_pipe_add_callback
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_find_pipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.rt_usbh_class_driver_hub)
</UL>
<P><STRONG><a name="[e7]"></a>rt_usbh_hub_irq</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hub.o(.text.rt_usbh_hub_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 2660<LI>Call Chain = rt_usbh_hub_irq &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.rt_usbh_hub_enable)
</UL>
<P><STRONG><a name="[6a1]"></a>rt_usbh_hub_port_change</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, hub.o(.text.rt_usbh_hub_port_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 2628<LI>Call Chain = rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_thread_entry
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
</UL>

<P><STRONG><a name="[e8]"></a>rt_usbh_hub_thread_entry</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hub.o(.text.rt_usbh_hub_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 2660<LI>Call Chain = rt_usbh_hub_thread_entry &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.rt_usbh_hub_init)
</UL>
<P><STRONG><a name="[689]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usbhost_core.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
</UL>

<P><STRONG><a name="[671]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbhost_core.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_add_pipe
</UL>

<P><STRONG><a name="[699]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, usbhost_core.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
</UL>

<P><STRONG><a name="[668]"></a>rt_usb_hcd_alloc_pipe</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usbhost_core.o(.text.rt_usb_hcd_alloc_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[669]"></a>rt_usb_hcd_free_pipe</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbhost_core.o(.text.rt_usb_hcd_free_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[697]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, usbhost_core.o(.text.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
</UL>

<P><STRONG><a name="[670]"></a>rt_usb_instance_add_pipe</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbhost_core.o(.text.rt_usb_instance_add_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usb_instance_add_pipe &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[2fd]"></a>_pipe_check</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, mass.o(.text._pipe_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>

<P><STRONG><a name="[65e]"></a>rt_usb_bulk_only_xfer</STRONG> (Thumb, 472 bytes, Stack size 80 bytes, mass.o(.text.rt_usb_bulk_only_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
</UL>

<P><STRONG><a name="[6a4]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, mass.o(.text.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
</UL>

<P><STRONG><a name="[6a3]"></a>rt_usb_instance_find_pipe</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mass.o(.text.rt_usb_instance_find_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_usb_instance_find_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
</UL>

<P><STRONG><a name="[e6]"></a>rt_usbh_storage_disable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mass.o(.text.rt_usbh_storage_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_usbh_storage_disable &rArr; rt_udisk_stop &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mass.o(.text.rt_usbh_class_driver_storage)
</UL>
<P><STRONG><a name="[e5]"></a>rt_usbh_storage_enable</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, mass.o(.text.rt_usbh_storage_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = rt_usbh_storage_enable &rArr; rt_udisk_run &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_find_pipe
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mass.o(.text.rt_usbh_class_driver_storage)
</UL>
<P><STRONG><a name="[dc]"></a>rt_udisk_control</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, udisk.o(.text.rt_udisk_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_udisk_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(.text.rt_udisk_run)
</UL>
<P><STRONG><a name="[d9]"></a>rt_udisk_init</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, udisk.o(.text.rt_udisk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_udisk_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(.text.rt_udisk_run)
</UL>
<P><STRONG><a name="[da]"></a>rt_udisk_read</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, udisk.o(.text.rt_udisk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = rt_udisk_read &rArr; rt_usbh_storage_read10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(.text.rt_udisk_run)
</UL>
<P><STRONG><a name="[db]"></a>rt_udisk_write</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, udisk.o(.text.rt_udisk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = rt_udisk_write &rArr; rt_usbh_storage_write10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(.text.rt_udisk_run)
</UL>
<P><STRONG><a name="[65c]"></a>udisk_free_id</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, udisk.o(.text.udisk_free_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udisk_free_id &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[65a]"></a>udisk_get_id</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, udisk.o(.text.udisk_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udisk_get_id &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[695]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, driver.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_init
</UL>

<P><STRONG><a name="[696]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, driver.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_register
</UL>

<P><STRONG><a name="[4ea]"></a>netdev_auto_change_default</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, netdev.o(.text.netdev_auto_change_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = netdev_auto_change_default &rArr; netdev_get_first_by_flags &rArr; rt_slist_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_default
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
</UL>

<P><STRONG><a name="[4ed]"></a>netdev_cmd_netstat</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, netdev.o(.text.netdev_cmd_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
</UL>

<P><STRONG><a name="[4f0]"></a>netdev_list_dns</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, netdev.o(.text.netdev_list_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = netdev_list_dns &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[4f3]"></a>netdev_list_if</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, netdev.o(.text.netdev_list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = netdev_list_if &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[4f1]"></a>netdev_set_dns</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, netdev.o(.text.netdev_set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = netdev_set_dns &rArr; netdev_set_dns_server &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[4f4]"></a>netdev_set_if</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, netdev.o(.text.netdev_set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = netdev_set_if &rArr; netdev_set_netmask &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[4f8]"></a>rt_slist_append</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, netdev.o(.text.rt_slist_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>

<P><STRONG><a name="[4f7]"></a>rt_slist_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, netdev.o(.text.rt_slist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>

<P><STRONG><a name="[4ee]"></a>rt_slist_next</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, netdev.o(.text.rt_slist_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>

<P><STRONG><a name="[127]"></a>at_poll</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, af_inet_at.o(.text.at_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_poll &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_poll_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[3bd]"></a>rt_poll_add</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, af_inet_at.o(.text.rt_poll_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_poll_add
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
</UL>

<P><STRONG><a name="[10a]"></a>dfs_net_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfs_net.o(.text.dfs_net_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dfs_net_close &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[10b]"></a>dfs_net_ioctl</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dfs_net.o(.text.dfs_net_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dfs_net_ioctl &rArr; sal_ioctlsocket &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[10e]"></a>dfs_net_poll</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dfs_net.o(.text.dfs_net_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dfs_net_poll &rArr; sal_poll &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[10c]"></a>dfs_net_read</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dfs_net.o(.text.dfs_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dfs_net_read &rArr; sal_recvfrom &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[10d]"></a>dfs_net_write</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dfs_net.o(.text.dfs_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dfs_net_write &rArr; sal_sendto &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[ea]"></a>check_netdev_internet_up_work</STRONG> (Thumb, 540 bytes, Stack size 224 bytes, sal_socket.o(.text.check_netdev_internet_up_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = check_netdev_internet_up_work &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_internet_status
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(.text.sal_check_netdev_internet_up)
</UL>
<P><STRONG><a name="[6a8]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sal_socket.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
</UL>

<P><STRONG><a name="[6a7]"></a>rt_work_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sal_socket.o(.text.rt_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_work_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[6b5]"></a>sal_lock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sal_socket.o(.text.sal_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sal_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[6b4]"></a>sal_sockaddr_to_ipaddr</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sal_socket.o(.text.sal_sockaddr_to_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sal_sockaddr_to_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
</UL>

<P><STRONG><a name="[6b8]"></a>sal_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sal_socket.o(.text.sal_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sal_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[6c0]"></a>socket_alloc</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, sal_socket.o(.text.socket_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
</UL>

<P><STRONG><a name="[6b3]"></a>socket_delete</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sal_socket.o(.text.socket_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>

<P><STRONG><a name="[6c1]"></a>socket_free</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sal_socket.o(.text.socket_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = socket_free &rArr; rt_free &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[6b2]"></a>socket_init</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, sal_socket.o(.text.socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = socket_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[6b1]"></a>socket_new</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sal_socket.o(.text.socket_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[ed]"></a>rx_callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sensor_cmd.o(.text.rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rx_callback &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_cmd.o(.text.sensor_int)
</UL>
<P><STRONG><a name="[1c4]"></a>sensor</STRONG> (Thumb, 1368 bytes, Stack size 128 bytes, sensor_cmd.o(.text.sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sensor &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_show_data
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c1]"></a>sensor_fifo</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, sensor_cmd.o(.text.sensor_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = sensor_fifo &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[eb]"></a>sensor_fifo_rx_entry</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, sensor_cmd.o(.text.sensor_fifo_rx_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sensor_fifo_rx_entry &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_show_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_cmd.o(.text.sensor_fifo)
</UL>
<P><STRONG><a name="[1c2]"></a>sensor_int</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, sensor_cmd.o(.text.sensor_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = sensor_int &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ec]"></a>sensor_irq_rx_entry</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, sensor_cmd.o(.text.sensor_irq_rx_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sensor_irq_rx_entry &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_show_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_cmd.o(.text.sensor_int)
</UL>
<P><STRONG><a name="[1c3]"></a>sensor_polling</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, sensor_cmd.o(.text.sensor_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = sensor_polling &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_show_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[6b9]"></a>sensor_show_data</STRONG> (Thumb, 804 bytes, Stack size 48 bytes, sensor_cmd.o(.text.sensor_show_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sensor_show_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_polling
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_irq_rx_entry
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_fifo_rx_entry
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor
</UL>

<P><STRONG><a name="[6ce]"></a>utest_help</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, utest.o(.text.utest_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = utest_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
</UL>

<P><STRONG><a name="[f5]"></a>utest_run</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, utest.o(.text.utest_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = utest_run &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_testcase_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.text.utest_testcase_run)
</UL>
<P><STRONG><a name="[1c5]"></a>utest_tc_list</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, utest.o(.text.utest_tc_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = utest_tc_list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(FSymTab)
</UL>
<P><STRONG><a name="[1c6]"></a>utest_testcase_run</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, utest.o(.text.utest_testcase_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = utest_testcase_run &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_run
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_help
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(FSymTab)
</UL>
<P><STRONG><a name="[6e3]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[6e1]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[8d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[23c]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[24a]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[254]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[256]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[257]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[245]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[247]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
